
BASE_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800809c  0800809c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000228  080082cc  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  080082cc  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e66  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  000350be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00038c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001773d  00000000  00000000  00039ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155b1  00000000  00000000  000512e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911d9  00000000  00000000  00066896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000f7ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000228 	.word	0x20000228
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800805c 	.word	0x0800805c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000022c 	.word	0x2000022c
 80001d4:	0800805c 	.word	0x0800805c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ENDEFF_SOFT_RESET>:
#include "ModBusRTU.h"

#define SLAVE_ADDR (0x15<<1) //End Effector Address
uint32_t timestamp;
int complete;
void ENDEFF_SOFT_RESET(I2C_HandleTypeDef *hi2c) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0x00, 0xFF, 0x55, 0xAA };
	if (HAL_GetTick() - timestamp >= 10) {
 80004e4:	f001 fb44 	bl	8001b70 <HAL_GetTick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	d911      	bls.n	8000518 <ENDEFF_SOFT_RESET+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2304      	movs	r3, #4
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <ENDEFF_SOFT_RESET+0x48>)
 80004fe:	212a      	movs	r1, #42	; 0x2a
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f002 fb51 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000506:	f001 fb33 	bl	8001b70 <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 800050e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <ENDEFF_SOFT_RESET+0x4c>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
		return;
 8000516:	bf00      	nop
	}
}
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000244 	.word	0x20000244
 8000524:	20000000 	.word	0x20000000
 8000528:	20000248 	.word	0x20000248

0800052c <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000534:	f001 fb1c 	bl	8001b70 <HAL_GetTick>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	2b09      	cmp	r3, #9
 8000542:	d911      	bls.n	8000568 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2302      	movs	r3, #2
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <ENDEFF_TEST_MODE+0x48>)
 800054e:	212a      	movs	r1, #42	; 0x2a
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f002 fb29 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000556:	f001 fb0b 	bl	8001b70 <HAL_GetTick>
 800055a:	4603      	mov	r3, r0
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800055e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <ENDEFF_TEST_MODE+0x4c>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		return;
 8000566:	bf00      	nop
	}
}
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000244 	.word	0x20000244
 8000574:	20000004 	.word	0x20000004
 8000578:	20000248 	.word	0x20000248

0800057c <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000584:	f001 faf4 	bl	8001b70 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2b09      	cmp	r3, #9
 8000592:	d911      	bls.n	80005b8 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800059e:	212a      	movs	r1, #42	; 0x2a
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fb01 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005a6:	f001 fae3 	bl	8001b70 <HAL_GetTick>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 80005ae:	6013      	str	r3, [r2, #0]
		complete = 1;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
		return;
 80005b6:	bf00      	nop
	}
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000244 	.word	0x20000244
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000248 	.word	0x20000248

080005cc <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80005d4:	f001 facc 	bl	8001b70 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	d911      	bls.n	8000608 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80005ee:	212a      	movs	r1, #42	; 0x2a
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f002 fad9 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005f6:	f001 fabb 	bl	8001b70 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
		return;
 8000606:	bf00      	nop
	}
}
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000244 	.word	0x20000244
 8000614:	2000000c 	.word	0x2000000c
 8000618:	20000248 	.word	0x20000248

0800061c <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8000624:	f001 faa4 	bl	8001b70 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b09      	cmp	r3, #9
 8000632:	d911      	bls.n	8000658 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <ENDEFF_GRIPPER_IDLE+0x48>)
 800063e:	212a      	movs	r1, #42	; 0x2a
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f002 fab1 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000646:	f001 fa93 	bl	8001b70 <HAL_GetTick>
 800064a:	4603      	mov	r3, r0
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800064e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ENDEFF_GRIPPER_IDLE+0x4c>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
		return;
 8000656:	bf00      	nop
	}
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000244 	.word	0x20000244
 8000664:	20000010 	.word	0x20000010
 8000668:	20000248 	.word	0x20000248

0800066c <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8000674:	f001 fa7c 	bl	8001b70 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000684:	d311      	bcc.n	80006aa <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ENDEFF_GRIPPER_PICK+0x48>)
 8000690:	212a      	movs	r1, #42	; 0x2a
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f002 fa88 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000698:	f001 fa6a 	bl	8001b70 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 80006a0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <ENDEFF_GRIPPER_PICK+0x4c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
		return;
 80006a8:	bf00      	nop
	}
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000244 	.word	0x20000244
 80006b4:	20000014 	.word	0x20000014
 80006b8:	20000248 	.word	0x20000248

080006bc <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80006c4:	f001 fa54 	bl	8001b70 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006d4:	d311      	bcc.n	80006fa <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <ENDEFF_GRIPPER_PLACE+0x48>)
 80006e0:	212a      	movs	r1, #42	; 0x2a
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 fa60 	bl	8002ba8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80006e8:	f001 fa42 	bl	8001b70 <HAL_GetTick>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006f0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
		return;
 80006f8:	bf00      	nop
	}
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000244 	.word	0x20000244
 8000704:	20000018 	.word	0x20000018
 8000708:	20000248 	.word	0x20000248

0800070c <I2C_TO_BASESYSTEM>:
//			decimal >>= 1;
//		}
//	}
//	binary[index] = '0'; // Add null terminator to indicate the end of the string
//}
void I2C_TO_BASESYSTEM(uint16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 8000716:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	f200 810d 	bhi.w	800093a <I2C_TO_BASESYSTEM+0x22e>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <I2C_TO_BASESYSTEM+0x1c>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007eb 	.word	0x080007eb
 8000734:	080008a9 	.word	0x080008a9
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00e      	beq.n	8000762 <I2C_TO_BASESYSTEM+0x56>
			ENDEFF_TEST_MODE(hi2c);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff fef1 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800074a:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80ec 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = TEST;
 8000754:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8000760:	e0e4      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 80de 	beq.w	800092c <I2C_TO_BASESYSTEM+0x220>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8000770:	6838      	ldr	r0, [r7, #0]
 8000772:	f7ff ff2b 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 80d6 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = RUNMODE;
 8000780:	4b70      	ldr	r3, [pc, #448]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000786:	4b70      	ldr	r3, [pc, #448]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e0ce      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10e      	bne.n	80007b8 <I2C_TO_BASESYSTEM+0xac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800079a:	6838      	ldr	r0, [r7, #0]
 800079c:	f7ff feee 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 80c3 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = INIT;
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 80007b6:	e0bb      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 80b5 	beq.w	8000930 <I2C_TO_BASESYSTEM+0x224>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f7ff fed8 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f7ff fefd 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 80aa 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = RUNMODE;
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007de:	2202      	movs	r2, #2
 80007e0:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007e2:	4b59      	ldr	r3, [pc, #356]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		break;
 80007e8:	e0a2      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10e      	bne.n	8000814 <I2C_TO_BASESYSTEM+0x108>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80007f6:	6838      	ldr	r0, [r7, #0]
 80007f8:	f7ff ff10 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f040 8097 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = INIT;
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800080c:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8000812:	e08f      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0001) == 1) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00e      	beq.n	800083e <I2C_TO_BASESYSTEM+0x132>
			ENDEFF_TEST_MODE(hi2c);
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f7ff fe83 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 8082 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = TEST;
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
		break;
 800083c:	e07a      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	2b00      	cmp	r3, #0
 8000848:	d013      	beq.n	8000872 <I2C_TO_BASESYSTEM+0x166>
			ENDEFF_GRIPPER_PICK(hi2c);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff ff0e 	bl	800066c <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8000850:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d16d      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				*DataFrame = 0b0010;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
				picked = 1;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
		break;
 8000870:	e060      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d05a      	beq.n	8000934 <I2C_TO_BASESYSTEM+0x228>
			if (picked == 1) {
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d156      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ff18 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d14f      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
					*DataFrame = 0b0010;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2202      	movs	r2, #2
 8000898:	801a      	strh	r2, [r3, #0]
					complete = 0;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
					picked = 0;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e045      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10d      	bne.n	80008d0 <I2C_TO_BASESYSTEM+0x1c4>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80008b4:	6838      	ldr	r0, [r7, #0]
 80008b6:	f7ff feb1 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d13a      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = INIT;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80008ce:	e033      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b0001) == 1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00d      	beq.n	80008f8 <I2C_TO_BASESYSTEM+0x1ec>
			ENDEFF_TEST_MODE(hi2c);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f7ff fe25 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d126      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = TEST;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e01f      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d019      	beq.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
			ENDEFF_GRIPPER_PLACE(hi2c);
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f7ff fed9 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d112      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				*DataFrame = 0b0010;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2202      	movs	r2, #2
 8000916:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
				picked = 0;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		break;
 800092a:	e005      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		break;
 800092c:	bf00      	nop
 800092e:	e004      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000930:	bf00      	nop
 8000932:	e002      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000934:	bf00      	nop
 8000936:	e000      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000938:	bf00      	nop
	}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000024c 	.word	0x2000024c
 8000948:	20000248 	.word	0x20000248
 800094c:	20000250 	.word	0x20000250

08000950 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <modbus_1t5_Timeout+0x1c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	751a      	strb	r2, [r3, #20]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000254 	.word	0x20000254

08000970 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <modbus_3t5_Timeout+0x1c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	755a      	strb	r2, [r3, #21]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000254 	.word	0x20000254

08000990 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <modbus_UART_Recived+0x60>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <modbus_UART_Recived+0x60>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80009aa:	1c59      	adds	r1, r3, #1
 80009ac:	b289      	uxth	r1, r1
 80009ae:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80009b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009b6:	d210      	bcs.n	80009da <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <modbus_UART_Recived+0x60>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68d8      	ldr	r0, [r3, #12]
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <modbus_UART_Recived+0x60>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <modbus_UART_Recived+0x60>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80009ca:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80009ce:	4413      	add	r3, r2
 80009d0:	3302      	adds	r3, #2
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f006 f979 	bl	8006ccc <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <modbus_UART_Recived+0x60>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000254 	.word	0x20000254

080009f4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80009fe:	4a24      	ldr	r2, [pc, #144]	; (8000a90 <Modbus_init+0x9c>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <Modbus_init+0x9c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <Modbus_init+0x9c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <Modbus_init+0xa0>)
 8000a14:	2114      	movs	r1, #20
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fc64 	bl	80062e4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <Modbus_init+0x9c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <Modbus_init+0xa4>)
 8000a24:	210e      	movs	r1, #14
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fc5c 	bl	80062e4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <Modbus_init+0x9c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <Modbus_init+0xa8>)
 8000a34:	2103      	movs	r1, #3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 f8a0 	bl	8006b7c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <Modbus_init+0x9c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68d8      	ldr	r0, [r3, #12]
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <Modbus_init+0x9c>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <Modbus_init+0x9c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000a4e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000a52:	4413      	add	r3, r2
 8000a54:	3302      	adds	r3, #2
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f006 f937 	bl	8006ccc <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <Modbus_init+0x9c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d10c      	bne.n	8000a88 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <Modbus_init+0x9c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 f8b7 	bl	8005be8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <Modbus_init+0x9c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 f9e0 	bl	8005e48 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000254 	.word	0x20000254
 8000a94:	08000951 	.word	0x08000951
 8000a98:	08000971 	.word	0x08000971
 8000a9c:	08000991 	.word	0x08000991

08000aa0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000aac:	23ff      	movs	r3, #255	; 0xff
 8000aae:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ab0:	23ff      	movs	r3, #255	; 0xff
 8000ab2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ab4:	e013      	b.n	8000ade <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	4053      	eors	r3, r2
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <CRC16+0x64>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4413      	add	r3, r2
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4053      	eors	r3, r2
 8000ad2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <CRC16+0x68>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ade:	883b      	ldrh	r3, [r7, #0]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	803a      	strh	r2, [r7, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1e6      	bne.n	8000ab6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	b29b      	uxth	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	2000011c 	.word	0x2000011c
 8000b08:	2000001c 	.word	0x2000001c

08000b0c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000b12:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	7e1b      	ldrb	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d80a      	bhi.n	8000b34 <Modbus_Protocal_Worker+0x28>
 8000b1e:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <Modbus_Protocal_Worker+0x18>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b3f 	.word	0x08000b3f
 8000b28:	08000cdf 	.word	0x08000cdf
 8000b2c:	08000bcb 	.word	0x08000bcb
 8000b30:	08000bf1 	.word	0x08000bf1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000b34:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	761a      	strb	r2, [r3, #24]
		break;
 8000b3c:	e0e8      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000b4a:	f000 f9dd 	bl	8000f08 <Modbus_Emission>
 8000b4e:	e01c      	b.n	8000b8a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000b50:	4b71      	ldr	r3, [pc, #452]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	7d9b      	ldrb	r3, [r3, #22]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d017      	beq.n	8000b8a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000b62:	4b6d      	ldr	r3, [pc, #436]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0201 	orr.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000b82:	4b65      	ldr	r3, [pc, #404]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2203      	movs	r2, #3
 8000b88:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000b8a:	4b63      	ldr	r3, [pc, #396]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b20      	cmp	r3, #32
 8000b98:	f040 80b3 	bne.w	8000d02 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ba6:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68d8      	ldr	r0, [r3, #12]
 8000bac:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000bb8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f006 f882 	bl	8006ccc <HAL_UART_Receive_IT>
		}
		break;
 8000bc8:	e09b      	b.n	8000d02 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000bca:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	7d1b      	ldrb	r3, [r3, #20]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 8098 	beq.w	8000d06 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	22fe      	movs	r2, #254	; 0xfe
 8000be4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2204      	movs	r2, #4
 8000bec:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000bee:	e08a      	b.n	8000d06 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000bf0:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7d9b      	ldrb	r3, [r3, #22]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d009      	beq.n	8000c0e <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c16:	f113 0f02 	cmn.w	r3, #2
 8000c1a:	d150      	bne.n	8000cbe <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000c24:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f203 2272 	addw	r2, r3, #626	; 0x272
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000c34:	3b02      	subs	r3, #2
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff ff31 	bl	8000aa0 <CRC16>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000c42:	793a      	ldrb	r2, [r7, #4]
 8000c44:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000c50:	3b02      	subs	r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d10c      	bne.n	8000c76 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000c5c:	797a      	ldrb	r2, [r7, #5]
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c60:	6819      	ldr	r1, [r3, #0]
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	440b      	add	r3, r1
 8000c6e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d004      	beq.n	8000c80 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	75da      	strb	r2, [r3, #23]
				break;
 8000c7e:	e047      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d113      	bne.n	8000cba <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000ca2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000cac:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f007 f9be 	bl	8008030 <memcpy>

			//execute command
			Modbus_frame_response();
 8000cb4:	f000 f910 	bl	8000ed8 <Modbus_frame_response>
 8000cb8:	e001      	b.n	8000cbe <Modbus_Protocal_Worker+0x1b2>
				break;
 8000cba:	bf00      	nop
					}
		break;


	}
}
 8000cbc:	e028      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	7d5b      	ldrb	r3, [r3, #21]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d020      	beq.n	8000d0a <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 f8a6 	bl	8006e28 <HAL_UART_AbortReceive>
		break;
 8000cdc:	e015      	b.n	8000d0a <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b20      	cmp	r3, #32
 8000cec:	d10f      	bne.n	8000d0e <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <Modbus_Protocal_Worker+0x20c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	761a      	strb	r2, [r3, #24]
		break;
 8000d00:	e005      	b.n	8000d0e <Modbus_Protocal_Worker+0x202>
		break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
		break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <Modbus_Protocal_Worker+0x204>
		break;
 8000d0e:	bf00      	nop
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000254 	.word	0x20000254

08000d1c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	7e9b      	ldrb	r3, [r3, #26]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	7edb      	ldrb	r3, [r3, #27]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d903      	bls.n	8000d4e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f000 f8a4 	bl	8000e94 <ModbusErrorReply>
			 return;
 8000d4c:	e023      	b.n	8000d96 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	440b      	add	r3, r1
 8000d5e:	7f12      	ldrb	r2, [r2, #28]
 8000d60:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6859      	ldr	r1, [r3, #4]
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	440b      	add	r3, r1
 8000d72:	7f52      	ldrb	r2, [r2, #29]
 8000d74:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000d84:	2208      	movs	r2, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	f007 f952 	bl	8008030 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <modbusWrite1Register+0x80>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000254 	.word	0x20000254

08000da0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000da6:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <modbusRead1Register+0xf0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	7f1b      	ldrb	r3, [r3, #28]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <modbusRead1Register+0xf0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	7f5b      	ldrb	r3, [r3, #29]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <modbusRead1Register+0xf0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	7e9b      	ldrb	r3, [r3, #26]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <modbusRead1Register+0xf0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7edb      	ldrb	r3, [r3, #27]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <modbusRead1Register+0x42>
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	2b7d      	cmp	r3, #125	; 0x7d
 8000de0:	d903      	bls.n	8000dea <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f856 	bl	8000e94 <ModbusErrorReply>
		 return;
 8000de8:	e04e      	b.n	8000e88 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000dea:	88ba      	ldrh	r2, [r7, #4]
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <modbusRead1Register+0xf0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d808      	bhi.n	8000e08 <modbusRead1Register+0x68>
 8000df6:	88ba      	ldrh	r2, [r7, #4]
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 f843 	bl	8000e94 <ModbusErrorReply>
		 return;
 8000e0e:	e03b      	b.n	8000e88 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2203      	movs	r2, #3
 8000e16:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0052      	lsls	r2, r2, #1
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	e020      	b.n	8000e70 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	4423      	add	r3, r4
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	18d1      	adds	r1, r2, r3
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	1c63      	adds	r3, r4, #1
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	7849      	ldrb	r1, [r1, #1]
 8000e46:	4413      	add	r3, r2
 8000e48:	460a      	mov	r2, r1
 8000e4a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	4423      	add	r3, r4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	18d1      	adds	r1, r2, r3
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	0063      	lsls	r3, r4, #1
 8000e62:	3303      	adds	r3, #3
 8000e64:	7809      	ldrb	r1, [r1, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	460a      	mov	r2, r1
 8000e6a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000e6e:	3401      	adds	r4, #1
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	429c      	cmp	r4, r3
 8000e74:	dbdb      	blt.n	8000e2e <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <modbusRead1Register+0xf0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0052      	lsls	r2, r2, #1
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000254 	.word	0x20000254

08000e94 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <ModbusErrorReply+0x40>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	7e5a      	ldrb	r2, [r3, #25]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <ModbusErrorReply+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <ModbusErrorReply+0x40>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <ModbusErrorReply+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000254 	.word	0x20000254

08000ed8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <Modbus_frame_response+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7e5b      	ldrb	r3, [r3, #25]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d004      	beq.n	8000ef0 <Modbus_frame_response+0x18>
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d105      	bne.n	8000ef6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000eea:	f7ff ff17 	bl	8000d1c <modbusWrite1Register>
		break;
 8000eee:	e006      	b.n	8000efe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000ef0:	f7ff ff56 	bl	8000da0 <modbusRead1Register>
		break;
 8000ef4:	e003      	b.n	8000efe <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff ffcc 	bl	8000e94 <ModbusErrorReply>
		break;
 8000efc:	bf00      	nop

	}
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000254 	.word	0x20000254

08000f08 <Modbus_Emission>:

void Modbus_Emission()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <Modbus_Emission+0xfc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b20      	cmp	r3, #32
 8000f1c:	d15e      	bne.n	8000fdc <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <Modbus_Emission+0xfc>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <Modbus_Emission+0xfc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <Modbus_Emission+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000f34:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <Modbus_Emission+0xfc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <Modbus_Emission+0xfc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8000f46:	461a      	mov	r2, r3
 8000f48:	f007 f872 	bl	8008030 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <Modbus_Emission+0xfc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <Modbus_Emission+0xfc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3203      	adds	r2, #3
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <Modbus_Emission+0xfc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <Modbus_Emission+0xfc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000f72:	3b02      	subs	r3, #2
 8000f74:	4619      	mov	r1, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f7ff fd92 	bl	8000aa0 <CRC16>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <Modbus_Emission+0xfc>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <Modbus_Emission+0xfc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000f8c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000f8e:	7939      	ldrb	r1, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <Modbus_Emission+0xfc>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <Modbus_Emission+0xfc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000fa4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000fa6:	7979      	ldrb	r1, [r7, #5]
 8000fa8:	4413      	add	r3, r2
 8000faa:	460a      	mov	r2, r1
 8000fac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <Modbus_Emission+0xfc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	d10d      	bne.n	8000fdc <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <Modbus_Emission+0xfc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <Modbus_Emission+0xfc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <Modbus_Emission+0xfc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000fd2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f005 fea8 	bl	8006d2c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <Modbus_Emission+0xfc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <Modbus_Emission+0xfc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <Modbus_Emission+0xfc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <Modbus_Emission+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000254 	.word	0x20000254

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_DMA_Init+0x3c>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2011      	movs	r0, #17
 8001030:	f000 fe85 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001034:	2011      	movs	r0, #17
 8001036:	f000 fe9e 	bl	8001d76 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_GPIO_Init+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0xd4>)
 80010d4:	f001 fc0a 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010f0:	f001 fa78 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010f4:	2320      	movs	r3, #32
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_GPIO_Init+0xd4>)
 800110c:	f001 fa6a 	bl	80025e4 <HAL_GPIO_Init>

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020800 	.word	0x40020800

08001124 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f001 fbdd 	bl	8002920 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 fa3a 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000258 	.word	0x20000258
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <HAL_I2C_MspInit+0xa4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d13b      	bne.n	800121a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011be:	23c0      	movs	r3, #192	; 0xc0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ce:	2304      	movs	r3, #4
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <HAL_I2C_MspInit+0xac>)
 80011da:	f001 fa03 	bl	80025e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_I2C_MspInit+0xa8>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201f      	movs	r0, #31
 8001200:	f000 fd9d 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001204:	201f      	movs	r0, #31
 8001206:	f000 fdb6 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2020      	movs	r0, #32
 8001210:	f000 fd95 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001214:	2020      	movs	r0, #32
 8001216:	f000 fdae 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40005400 	.word	0x40005400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020400 	.word	0x40020400

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fc35 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f8dd 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f7ff ff03 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8001242:	f7ff fee1 	bl	8001008 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001246:	f000 fb19 	bl	800187c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800124a:	f000 fa71 	bl	8001730 <MX_TIM11_Init>
  MX_I2C1_Init();
 800124e:	f7ff ff69 	bl	8001124 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001252:	f000 fae9 	bl	8001828 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8001256:	4b59      	ldr	r3, [pc, #356]	; (80013bc <main+0x18c>)
 8001258:	4a59      	ldr	r2, [pc, #356]	; (80013c0 <main+0x190>)
 800125a:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <main+0x18c>)
 800125e:	4a59      	ldr	r2, [pc, #356]	; (80013c4 <main+0x194>)
 8001260:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <main+0x18c>)
 8001264:	2215      	movs	r2, #21
 8001266:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001268:	4b54      	ldr	r3, [pc, #336]	; (80013bc <main+0x18c>)
 800126a:	22c8      	movs	r2, #200	; 0xc8
 800126c:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800126e:	4956      	ldr	r1, [pc, #344]	; (80013c8 <main+0x198>)
 8001270:	4852      	ldr	r0, [pc, #328]	; (80013bc <main+0x18c>)
 8001272:	f7ff fbbf 	bl	80009f4 <Modbus_init>
  UARTInterruptConfig();
 8001276:	f000 f927 	bl	80014c8 <UARTInterruptConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800127a:	f7ff fc47 	bl	8000b0c <Modbus_Protocal_Worker>
	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() >= timestamp){
 800127e:	f000 fc77 	bl	8001b70 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <main+0x19c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d309      	bcc.n	80012a0 <main+0x70>
	  	timestamp = HAL_GetTick() + 200;
 800128c:	f000 fc70 	bl	8001b70 <HAL_GetTick>
 8001290:	4603      	mov	r3, r0
 8001292:	33c8      	adds	r3, #200	; 0xc8
 8001294:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <main+0x19c>)
 8001296:	6013      	str	r3, [r2, #0]
	  	registerFrame[00].U16 = 22881;
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <main+0x198>)
 800129a:	f645 1261 	movw	r2, #22881	; 0x5961
 800129e:	801a      	strh	r2, [r3, #0]
//		HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//	  decimalToBinary(registerFrame[2].U16,Data);
//	  	Transmit_To_Basesystem(&registerFrame[2].U16,&hi2c1);
	  }
	  I2C_TO_BASESYSTEM(&registerFrame[2].U16,&hi2c1);
 80012a0:	494b      	ldr	r1, [pc, #300]	; (80013d0 <main+0x1a0>)
 80012a2:	484c      	ldr	r0, [pc, #304]	; (80013d4 <main+0x1a4>)
 80012a4:	f7ff fa32 	bl	800070c <I2C_TO_BASESYSTEM>
//		  }
//		  registerFrame[2].U16 = Result;
//		  flag = 0;
//	  }

 	  if(reset == 1)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <main+0x1a8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d114      	bne.n	80012da <main+0xaa>
	  {
		  ENDEFF_SOFT_RESET(&hi2c1);
 80012b0:	4847      	ldr	r0, [pc, #284]	; (80013d0 <main+0x1a0>)
 80012b2:	f7ff f913 	bl	80004dc <ENDEFF_SOFT_RESET>
		  reset = 0;
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <main+0x1a8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		  start = 0;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <main+0x1ac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
		  test = 0;
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <main+0x1b0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
		  pick = 0;
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <main+0x1b4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		  place = 0;
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <main+0x1b8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
		  stoptest = 0;
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <main+0x1bc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
//		  flag = 1;
	  }
	  if(test == 1)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <main+0x1b0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10f      	bne.n	8001302 <main+0xd2>
	  {
		  ENDEFF_TEST_MODE(&hi2c1);
 80012e2:	483b      	ldr	r0, [pc, #236]	; (80013d0 <main+0x1a0>)
 80012e4:	f7ff f922 	bl	800052c <ENDEFF_TEST_MODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <main+0x1c0>)
 80012f2:	212a      	movs	r1, #42	; 0x2a
 80012f4:	4836      	ldr	r0, [pc, #216]	; (80013d0 <main+0x1a0>)
 80012f6:	f001 fd55 	bl	8002da4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  test = 0;
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <main+0x1b0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e7bb      	b.n	800127a <main+0x4a>
//		  flag = 1;
	  }
	  else if(stoptest == 1)
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <main+0x1bc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10f      	bne.n	800132a <main+0xfa>
	  {
		  ENDEFF_TEST_MODE_QUIT(&hi2c1);
 800130a:	4831      	ldr	r0, [pc, #196]	; (80013d0 <main+0x1a0>)
 800130c:	f7ff f936 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	4a35      	ldr	r2, [pc, #212]	; (80013f0 <main+0x1c0>)
 800131a:	212a      	movs	r1, #42	; 0x2a
 800131c:	482c      	ldr	r0, [pc, #176]	; (80013d0 <main+0x1a0>)
 800131e:	f001 fd41 	bl	8002da4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stoptest = 0;
 8001322:	4b32      	ldr	r3, [pc, #200]	; (80013ec <main+0x1bc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e7a7      	b.n	800127a <main+0x4a>
//		  flag = 1;
	  }
	  else if(start == 1)
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <main+0x1ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10f      	bne.n	8001352 <main+0x122>
	  {
		  ENDEFF_GRIPPER_RUNMODE(&hi2c1);
 8001332:	4827      	ldr	r0, [pc, #156]	; (80013d0 <main+0x1a0>)
 8001334:	f7ff f94a 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <main+0x1c0>)
 8001342:	212a      	movs	r1, #42	; 0x2a
 8001344:	4822      	ldr	r0, [pc, #136]	; (80013d0 <main+0x1a0>)
 8001346:	f001 fd2d 	bl	8002da4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  start = 0;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <main+0x1ac>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e793      	b.n	800127a <main+0x4a>
//		  flag = 1;
	  }
	  else if(pick == 1)
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <main+0x1b4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10f      	bne.n	800137a <main+0x14a>
	  {
		  ENDEFF_GRIPPER_PICK(&hi2c1);
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <main+0x1a0>)
 800135c:	f7ff f986 	bl	800066c <ENDEFF_GRIPPER_PICK>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <main+0x1c0>)
 800136a:	212a      	movs	r1, #42	; 0x2a
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0x1a0>)
 800136e:	f001 fd19 	bl	8002da4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  pick = 0;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <main+0x1b4>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e77f      	b.n	800127a <main+0x4a>
//		  flag = 1;
	  }
	  else if(place == 1)
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <main+0x1b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d106      	bne.n	8001390 <main+0x160>
	  {
		  ENDEFF_GRIPPER_PLACE(&hi2c1);
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <main+0x1a0>)
 8001384:	f7ff f99a 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
		  place = 0;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <main+0x1b8>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e774      	b.n	800127a <main+0x4a>
//		  flag = 1;
	  }
	  else if(stop == 1)
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <main+0x1c4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	f47f af70 	bne.w	800127a <main+0x4a>
	  {
		  ENDEFF_GRIPPER_IDLE(&hi2c1);
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <main+0x1a0>)
 800139c:	f7ff f93e 	bl	800061c <ENDEFF_GRIPPER_IDLE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <main+0x1c0>)
 80013aa:	212a      	movs	r1, #42	; 0x2a
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <main+0x1a0>)
 80013ae:	f001 fcf9 	bl	8002da4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stop = 0;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <main+0x1c4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  {
 80013b8:	e75f      	b.n	800127a <main+0x4a>
 80013ba:	bf00      	nop
 80013bc:	200002ac 	.word	0x200002ac
 80013c0:	20000aa4 	.word	0x20000aa4
 80013c4:	2000097c 	.word	0x2000097c
 80013c8:	20000784 	.word	0x20000784
 80013cc:	20000974 	.word	0x20000974
 80013d0:	20000258 	.word	0x20000258
 80013d4:	20000788 	.word	0x20000788
 80013d8:	20000914 	.word	0x20000914
 80013dc:	20000918 	.word	0x20000918
 80013e0:	20000928 	.word	0x20000928
 80013e4:	2000091c 	.word	0x2000091c
 80013e8:	20000920 	.word	0x20000920
 80013ec:	2000092c 	.word	0x2000092c
 80013f0:	20000930 	.word	0x20000930
 80013f4:	20000924 	.word	0x20000924

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f006 fe20 	bl	800804c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <SystemClock_Config+0xc8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xcc>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001458:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f003 febf 	bl	8005200 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001488:	f000 f8ac 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2103      	movs	r1, #3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f921 	bl	80056f0 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014b4:	f000 f896 	bl	80015e4 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <UARTInterruptConfig>:

/* USER CODE BEGIN 4 */
void UARTInterruptConfig(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, sizeof(RxBuffer));
 80014cc:	2205      	movs	r2, #5
 80014ce:	4903      	ldr	r1, [pc, #12]	; (80014dc <UARTInterruptConfig+0x14>)
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <UARTInterruptConfig+0x18>)
 80014d2:	f005 fbfb 	bl	8006ccc <HAL_UART_Receive_IT>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000934 	.word	0x20000934
 80014e0:	20000a30 	.word	0x20000a30

080014e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a37      	ldr	r2, [pc, #220]	; (80015cc <HAL_UART_RxCpltCallback+0xe8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d167      	bne.n	80015c4 <HAL_UART_RxCpltCallback+0xe0>
		for(int i = 0; i< BUFFER_SIZE;i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e00b      	b.n	8001512 <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedByte[i] = RxBuffer[i];
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_UART_RxCpltCallback+0xf0>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i< BUFFER_SIZE;i++)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b04      	cmp	r3, #4
 8001516:	ddf0      	ble.n	80014fa <HAL_UART_RxCpltCallback+0x16>
		}
		PosData.position_x = (RxBuffer[1] << 8) | RxBuffer[0];
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001526:	6193      	str	r3, [r2, #24]
		PosData.position_y = (RxBuffer[3] << 8) | RxBuffer[2];
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 800152a:	78db      	ldrb	r3, [r3, #3]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 8001530:	7892      	ldrb	r2, [r2, #2]
 8001532:	4313      	orrs	r3, r2
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001536:	61d3      	str	r3, [r2, #28]
		if(PosData.position_x >= UINT16_MAX/2) PosData.position_x -= UINT16_MAX + 1;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001540:	4293      	cmp	r3, r2
 8001542:	dd06      	ble.n	8001552 <HAL_UART_RxCpltCallback+0x6e>
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	e00b      	b.n	800156a <HAL_UART_RxCpltCallback+0x86>
		else if(PosData.position_y >= UINT16_MAX/2) PosData.position_y -= UINT16_MAX + 1;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800155a:	4293      	cmp	r3, r2
 800155c:	dd05      	ble.n	800156a <HAL_UART_RxCpltCallback+0x86>
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001568:	61d3      	str	r3, [r2, #28]
		SetTrayPos = RxBuffer[4];
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	461a      	mov	r2, r3
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_UART_RxCpltCallback+0xf8>)
 8001572:	601a      	str	r2, [r3, #0]
		static int point;
		if(SetTrayPos == 1)
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_UART_RxCpltCallback+0xf8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11e      	bne.n	80015ba <HAL_UART_RxCpltCallback+0xd6>
		{
			PosData.tray_x[point] = PosData.position_x;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001582:	6992      	ldr	r2, [r2, #24]
 8001584:	4914      	ldr	r1, [pc, #80]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PosData.tray_y[point] = PosData.position_y;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001590:	69d2      	ldr	r2, [r2, #28]
 8001592:	4911      	ldr	r1, [pc, #68]	; (80015d8 <HAL_UART_RxCpltCallback+0xf4>)
 8001594:	3302      	adds	r3, #2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	605a      	str	r2, [r3, #4]
			point++;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 80015a4:	6013      	str	r3, [r2, #0]
			if(point == 3) point = 0;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d102      	bne.n	80015b4 <HAL_UART_RxCpltCallback+0xd0>
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_UART_RxCpltCallback+0xfc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
			SetTrayPos = 0;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_UART_RxCpltCallback+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, RxBuffer, sizeof(RxBuffer));
 80015ba:	2205      	movs	r2, #5
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <HAL_UART_RxCpltCallback+0xec>)
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <HAL_UART_RxCpltCallback+0xe8>)
 80015c0:	f005 fb84 	bl	8006ccc <HAL_UART_Receive_IT>
	}
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000a30 	.word	0x20000a30
 80015d0:	20000934 	.word	0x20000934
 80015d4:	2000093c 	.word	0x2000093c
 80015d8:	20000954 	.word	0x20000954
 80015dc:	20000950 	.word	0x20000950
 80015e0:	20000978 	.word	0x20000978

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162e:	2007      	movs	r0, #7
 8001630:	f000 fb7a 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 fa5c 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Stream6_IRQHandler+0x10>)
 800169a:	f000 fd1f 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000b18 	.word	0x20000b18

080016a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80016ae:	f004 fc31 	bl	8005f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000097c 	.word	0x2000097c

080016bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <I2C1_EV_IRQHandler+0x10>)
 80016c2:	f001 fd95 	bl	80031f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000258 	.word	0x20000258

080016d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <I2C1_ER_IRQHandler+0x10>)
 80016d6:	f001 fefc 	bl	80034d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000258 	.word	0x20000258

080016e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USART1_IRQHandler+0x10>)
 80016ea:	f005 fc41 	bl	8006f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000a30 	.word	0x20000a30

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f005 fc37 	bl	8006f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000aa4 	.word	0x20000aa4

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_TIM11_Init+0xa0>)
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <MX_TIM11_Init+0xa4>)
 800174c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001750:	2263      	movs	r2, #99	; 0x63
 8001752:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_TIM11_Init+0xa0>)
 800175c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001760:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_TIM11_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001770:	f004 f9de 	bl	8005b30 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800177a:	f7ff ff33 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001780:	f004 fa94 	bl	8005cac <HAL_TIM_OC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800178a:	f7ff ff2b 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800178e:	2108      	movs	r1, #8
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <MX_TIM11_Init+0xa0>)
 8001792:	f004 faf1 	bl	8005d78 <HAL_TIM_OnePulse_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 800179c:	f7ff ff22 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80017a0:	2310      	movs	r3, #16
 80017a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80017a4:	f240 5399 	movw	r3, #1433	; 0x599
 80017a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM11_Init+0xa0>)
 80017ba:	f004 fcd3 	bl	8006164 <HAL_TIM_OC_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80017c4:	f7ff ff0e 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000097c 	.word	0x2000097c
 80017d4:	40014800 	.word	0x40014800

080017d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_TIM_Base_MspInit+0x48>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d115      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	201a      	movs	r0, #26
 800180c:	f000 fa97 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001810:	201a      	movs	r0, #26
 8001812:	f000 fab0 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40014800 	.word	0x40014800
 8001824:	40023800 	.word	0x40023800

08001828 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <MX_USART1_UART_Init+0x50>)
 8001830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART1_UART_Init+0x4c>)
 8001860:	f005 f932 	bl	8006ac8 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800186a:	f7ff febb 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000a30 	.word	0x20000a30
 8001878:	40011000 	.word	0x40011000

0800187c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <MX_USART2_UART_Init+0x54>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001888:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x50>)
 800189e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x50>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x50>)
 80018b8:	f005 f906 	bl	8006ac8 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80018c2:	f7ff fe8f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000aa4 	.word	0x20000aa4
 80018d0:	40004400 	.word	0x40004400

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_UART_MspInit+0x164>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d135      	bne.n	8001962 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_UART_MspInit+0x168>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a4f      	ldr	r2, [pc, #316]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800192e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001940:	2307      	movs	r3, #7
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	483d      	ldr	r0, [pc, #244]	; (8001a40 <HAL_UART_MspInit+0x16c>)
 800194c:	f000 fe4a 	bl	80025e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2025      	movs	r0, #37	; 0x25
 8001956:	f000 f9f2 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800195a:	2025      	movs	r0, #37	; 0x25
 800195c:	f000 fa0b 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001960:	e066      	b.n	8001a30 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <HAL_UART_MspInit+0x170>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d161      	bne.n	8001a30 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a4:	230c      	movs	r3, #12
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b4:	2307      	movs	r3, #7
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4820      	ldr	r0, [pc, #128]	; (8001a40 <HAL_UART_MspInit+0x16c>)
 80019c0:	f000 fe10 	bl	80025e4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_UART_MspInit+0x178>)
 80019c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0x174>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0x174>)
 8001a06:	f000 f9d1 	bl	8001dac <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001a10:	f7ff fde8 	bl	80015e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_UART_MspInit+0x174>)
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_UART_MspInit+0x174>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2026      	movs	r0, #38	; 0x26
 8001a26:	f000 f98a 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a2a:	2026      	movs	r0, #38	; 0x26
 8001a2c:	f000 f9a3 	bl	8001d76 <HAL_NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40004400 	.word	0x40004400
 8001a48:	20000b18 	.word	0x20000b18
 8001a4c:	400260a0 	.word	0x400260a0

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a56:	490e      	ldr	r1, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a6c:	4c0b      	ldr	r4, [pc, #44]	; (8001a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7a:	f7ff fe47 	bl	800170c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f006 fab3 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff fbd5 	bl	8001230 <main>
  bx  lr    
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001a94:	080080a4 	.word	0x080080a4
  ldr r2, =_sbss
 8001a98:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001a9c:	20000b7c 	.word	0x20000b7c

08001aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_Init+0x40>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_Init+0x40>)
 8001aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x40>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f92b 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fd8a 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f943 	bl	8001d92 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f90b 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000021c 	.word	0x2000021c
 8001b40:	20000224 	.word	0x20000224
 8001b44:	20000220 	.word	0x20000220

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000224 	.word	0x20000224
 8001b6c:	20000b78 	.word	0x20000b78

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000b78 	.word	0x20000b78

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff29 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff3e 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff31 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff feda 	bl	8001b70 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e099      	b.n	8001efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de8:	e00f      	b.n	8001e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff fec1 	bl	8001b70 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d908      	bls.n	8001e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e078      	b.n	8001efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e8      	bne.n	8001dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_DMA_Init+0x158>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d117      	bne.n	8001ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb1b 	bl	80024ec <DMA_CheckFifoParam>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fad2 	bl	8002480 <DMA_CalcBaseAndBitshift>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	223f      	movs	r2, #63	; 0x3f
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f010803f 	.word	0xf010803f

08001f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Start_IT+0x26>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e040      	b.n	8001fb0 <HAL_DMA_Start_IT+0xa8>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12f      	bne.n	8001fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa64 	bl	8002424 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0216 	orr.w	r2, r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fc6:	f7ff fdd3 	bl	8001b70 <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e052      	b.n	8002090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0216 	bic.w	r2, r2, #22
 8001ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_DMA_Abort+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0208 	bic.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203a:	e013      	b.n	8002064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203c:	f7ff fd98 	bl	8001b70 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b05      	cmp	r3, #5
 8002048:	d90c      	bls.n	8002064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e015      	b.n	8002090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e4      	bne.n	800203c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	223f      	movs	r2, #63	; 0x3f
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00c      	b.n	80020d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <HAL_DMA_IRQHandler+0x248>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_DMA_IRQHandler+0x24c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808f 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e079      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02c      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
 8002322:	bf00      	nop
 8002324:	2000021c 	.word	0x2000021c
 8002328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e01e      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0210 	bic.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d032      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2205      	movs	r2, #5
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f2      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x2cc>
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e8:	bf00      	nop
    }
  }
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002440:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d108      	bne.n	8002464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002462:	e007      	b.n	8002474 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b10      	subs	r3, #16
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <DMA_CalcBaseAndBitshift+0x68>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d909      	bls.n	80024c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
 80024c0:	e007      	b.n	80024d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	aaaaaaab 	.word	0xaaaaaaab
 80024e8:	0800808c 	.word	0x0800808c

080024ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11f      	bne.n	8002546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d856      	bhi.n	80025ba <DMA_CheckFifoParam+0xce>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <DMA_CheckFifoParam+0x28>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002537 	.word	0x08002537
 800251c:	08002525 	.word	0x08002525
 8002520:	080025bb 	.word	0x080025bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d046      	beq.n	80025be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e043      	b.n	80025be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800253e:	d140      	bne.n	80025c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e03d      	b.n	80025c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	d121      	bne.n	8002594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d837      	bhi.n	80025c6 <DMA_CheckFifoParam+0xda>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <DMA_CheckFifoParam+0x70>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002573 	.word	0x08002573
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002585 	.word	0x08002585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e030      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d025      	beq.n	80025ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e022      	b.n	80025ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002592:	e01c      	b.n	80025ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d903      	bls.n	80025a2 <DMA_CheckFifoParam+0xb6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025a0:	e018      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      break;
 80025a6:	e015      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e00b      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025ba:	bf00      	nop
 80025bc:	e00a      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e008      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e006      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e004      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
    }
  } 
  
  return status; 
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e159      	b.n	80028b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8148 	bne.w	80028ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a2 	beq.w	80028ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b57      	ldr	r3, [pc, #348]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a56      	ldr	r2, [pc, #344]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x202>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x1fe>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a47      	ldr	r2, [pc, #284]	; (80028dc <HAL_GPIO_Init+0x2f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x1f6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x300>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x1f2>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x304>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_GPIO_Init+0x304>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_GPIO_Init+0x304>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f aea2 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12b      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fc1a 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002984:	f003 f8ac 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a81      	ldr	r2, [pc, #516]	; (8002b94 <HAL_I2C_Init+0x274>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d807      	bhi.n	80029a4 <HAL_I2C_Init+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_I2C_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e006      	b.n	80029b2 <HAL_I2C_Init+0x92>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a7d      	ldr	r2, [pc, #500]	; (8002b9c <HAL_I2C_Init+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a78      	ldr	r2, [pc, #480]	; (8002ba0 <HAL_I2C_Init+0x280>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	; (8002b94 <HAL_I2C_Init+0x274>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <HAL_I2C_Init+0xd4>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e009      	b.n	8002a08 <HAL_I2C_Init+0xe8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_I2C_Init+0x284>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	495c      	ldr	r1, [pc, #368]	; (8002b94 <HAL_I2C_Init+0x274>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d819      	bhi.n	8002a5c <HAL_I2C_Init+0x13c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e59      	subs	r1, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_I2C_Init+0x138>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	e051      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e04f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <HAL_I2C_Init+0x168>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e012      	b.n	8002aae <HAL_I2C_Init+0x18e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x196>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e022      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_I2C_Init+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e58      	subs	r0, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6809      	ldr	r1, [r1, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000186a0 	.word	0x000186a0
 8002b98:	001e847f 	.word	0x001e847f
 8002b9c:	003d08ff 	.word	0x003d08ff
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7fe ffd8 	bl	8001b70 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 80e0 	bne.w	8002d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4970      	ldr	r1, [pc, #448]	; (8002d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f002 f8e6 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0d3      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x50>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d007      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f001 fea8 	bl	80049bc <I2C_MasterRequestWrite>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08d      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c8c:	e066      	b.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f002 f960 	bl	8004f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f002 f950 	bl	8004fda <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01a      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d194      	bne.n	8002c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	4613      	mov	r3, r2
 8002db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7fe feda 	bl	8001b70 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 820b 	bne.w	80031e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	497c      	ldr	r1, [pc, #496]	; (8002fc8 <HAL_I2C_Master_Receive+0x224>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 ffe8 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	e1fe      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x50>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e1f7      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d007      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	; 0x22
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2210      	movs	r2, #16
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <HAL_I2C_Master_Receive+0x228>)
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f001 fe2c 	bl	8004ac0 <I2C_MasterRequestRead>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1b8      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e18c      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e16c      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	e14c      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f48:	e138      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80f1 	bhi.w	8003136 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d123      	bne.n	8002fa4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f002 f8ad 	bl	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e139      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa2:	e10b      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14e      	bne.n	800304a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4906      	ldr	r1, [pc, #24]	; (8002fd0 <HAL_I2C_Master_Receive+0x22c>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f001 fef8 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e10e      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003048:	e0b8      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	4966      	ldr	r1, [pc, #408]	; (80031ec <HAL_I2C_Master_Receive+0x448>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f001 fea9 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0bf      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	494f      	ldr	r1, [pc, #316]	; (80031ec <HAL_I2C_Master_Receive+0x448>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 fe7b 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e091      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003134:	e042      	b.n	80031bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 ffc0 	bl	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e04c      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d118      	bne.n	80031bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f47f aec2 	bne.w	8002f4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e000      	b.n	80031e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	00010004 	.word	0x00010004

080031f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003210:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b10      	cmp	r3, #16
 800321e:	d003      	beq.n	8003228 <HAL_I2C_EV_IRQHandler+0x38>
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	f040 80c1 	bne.w	80033aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_I2C_EV_IRQHandler+0x6e>
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003248:	d003      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x62>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003250:	d101      	bne.n	8003256 <HAL_I2C_EV_IRQHandler+0x66>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_I2C_EV_IRQHandler+0x68>
 8003256:	2300      	movs	r3, #0
 8003258:	2b01      	cmp	r3, #1
 800325a:	f000 8132 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x92>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	0a5b      	lsrs	r3, r3, #9
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f001 ffa8 	bl	80051ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fd83 	bl	8003d86 <I2C_Master_SB>
 8003280:	e092      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	0a5b      	lsrs	r3, r3, #9
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fdf9 	bl	8003e92 <I2C_Master_ADD10>
 80032a0:	e082      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	0a5b      	lsrs	r3, r3, #9
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fe13 	bl	8003ee6 <I2C_Master_ADDR>
 80032c0:	e072      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03b      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032dc:	f000 80f3 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	09db      	lsrs	r3, r3, #7
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00f      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x11c>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x11c>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f9f3 	bl	80036f0 <I2C_MasterTransmit_TXE>
 800330a:	e04d      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80d6 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	0a5b      	lsrs	r3, r3, #9
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80cf 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003328:	7bbb      	ldrb	r3, [r7, #14]
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d103      	bne.n	8003336 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa7a 	bl	8003828 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003334:	e0c7      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	f040 80c4 	bne.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fae8 	bl	8003914 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003344:	e0bf      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	f000 80b7 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00f      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x194>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x194>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fb5d 	bl	8003a3c <I2C_MasterReceive_RXNE>
 8003382:	e011      	b.n	80033a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 809a 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	0a5b      	lsrs	r3, r3, #9
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8093 	beq.w	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fc06 	bl	8003bb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a6:	e08e      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033a8:	e08d      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e007      	b.n	80033cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x20e>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 ffc4 	bl	8004384 <I2C_Slave_ADDR>
 80033fc:	e066      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x22e>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0a5b      	lsrs	r3, r3, #9
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fffe 	bl	8004418 <I2C_Slave_STOPF>
 800341c:	e056      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	2b21      	cmp	r3, #33	; 0x21
 8003422:	d002      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x23a>
 8003424:	7bbb      	ldrb	r3, [r7, #14]
 8003426:	2b29      	cmp	r3, #41	; 0x29
 8003428:	d125      	bne.n	8003476 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	09db      	lsrs	r3, r3, #7
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00f      	beq.n	8003456 <HAL_I2C_EV_IRQHandler+0x266>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	0a9b      	lsrs	r3, r3, #10
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_I2C_EV_IRQHandler+0x266>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 feda 	bl	8004208 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003454:	e039      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d033      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2da>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02d      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 ff07 	bl	8004282 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003474:	e029      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00f      	beq.n	80034a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	0a9b      	lsrs	r3, r3, #10
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 ff12 	bl	80042c4 <I2C_SlaveReceive_RXNE>
 80034a0:	e014      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	0a5b      	lsrs	r3, r3, #9
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 ff40 	bl	8004340 <I2C_SlaveReceive_BTF>
 80034c0:	e004      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	; 0x28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_I2C_ER_IRQHandler+0x4e>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	0a5b      	lsrs	r3, r3, #9
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x78>
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003548:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	0a9b      	lsrs	r3, r3, #10
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03f      	beq.n	80035d6 <HAL_I2C_ER_IRQHandler+0x104>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d039      	beq.n	80035d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003562:	7efb      	ldrb	r3, [r7, #27]
 8003564:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800357c:	7ebb      	ldrb	r3, [r7, #26]
 800357e:	2b20      	cmp	r3, #32
 8003580:	d112      	bne.n	80035a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10f      	bne.n	80035a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	2b21      	cmp	r3, #33	; 0x21
 800358c:	d008      	beq.n	80035a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b29      	cmp	r3, #41	; 0x29
 8003592:	d005      	beq.n	80035a0 <HAL_I2C_ER_IRQHandler+0xce>
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b28      	cmp	r3, #40	; 0x28
 8003598:	d106      	bne.n	80035a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b21      	cmp	r3, #33	; 0x21
 800359e:	d103      	bne.n	80035a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f869 	bl	8004678 <I2C_Slave_AF>
 80035a6:	e016      	b.n	80035d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d002      	beq.n	80035c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80035c0:	7efb      	ldrb	r3, [r7, #27]
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d107      	bne.n	80035d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	0adb      	lsrs	r3, r3, #11
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x12e>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80035fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 f8a0 	bl	8004758 <I2C_ITError>
  }
}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
 800367c:	4613      	mov	r3, r2
 800367e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003706:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	d150      	bne.n	80037b8 <I2C_MasterTransmit_TXE+0xc8>
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b21      	cmp	r3, #33	; 0x21
 800371a:	d14d      	bne.n	80037b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d01d      	beq.n	800375e <I2C_MasterTransmit_TXE+0x6e>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b20      	cmp	r3, #32
 8003726:	d01a      	beq.n	800375e <I2C_MasterTransmit_TXE+0x6e>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372e:	d016      	beq.n	800375e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800373e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2211      	movs	r2, #17
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff62 	bl	8003620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800375c:	e060      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800376c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d107      	bne.n	80037a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff7d 	bl	80036a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a6:	e03b      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff35 	bl	8003620 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b6:	e033      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b21      	cmp	r3, #33	; 0x21
 80037bc:	d005      	beq.n	80037ca <I2C_MasterTransmit_TXE+0xda>
 80037be:	7bbb      	ldrb	r3, [r7, #14]
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d12d      	bne.n	8003820 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b22      	cmp	r3, #34	; 0x22
 80037c8:	d12a      	bne.n	8003820 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037e4:	e01c      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d103      	bne.n	80037fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f88e 	bl	8003914 <I2C_MemoryTransmit_TXE_BTF>
}
 80037f8:	e012      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800381e:	e7ff      	b.n	8003820 <I2C_MasterTransmit_TXE+0x130>
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b21      	cmp	r3, #33	; 0x21
 8003840:	d164      	bne.n	800390c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003870:	e04c      	b.n	800390c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d01d      	beq.n	80038b4 <I2C_MasterTransmit_BTF+0x8c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b20      	cmp	r3, #32
 800387c:	d01a      	beq.n	80038b4 <I2C_MasterTransmit_BTF+0x8c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003884:	d016      	beq.n	80038b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003894:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2211      	movs	r2, #17
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff feb7 	bl	8003620 <HAL_I2C_MasterTxCpltCallback>
}
 80038b2:	e02b      	b.n	800390c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d107      	bne.n	80038fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fed2 	bl	80036a0 <HAL_I2C_MemTxCpltCallback>
}
 80038fc:	e006      	b.n	800390c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fe8a 	bl	8003620 <HAL_I2C_MasterTxCpltCallback>
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11d      	bne.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10b      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	b2da      	uxtb	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800394a:	e073      	b.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	b29b      	uxth	r3, r3
 8003952:	121b      	asrs	r3, r3, #8
 8003954:	b2da      	uxtb	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003966:	e065      	b.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10b      	bne.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003986:	e055      	b.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	2b02      	cmp	r3, #2
 800398e:	d151      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	d10d      	bne.n	80039b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039b0:	e040      	b.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b21      	cmp	r3, #33	; 0x21
 80039c0:	d112      	bne.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039e6:	e025      	b.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d120      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b21      	cmp	r3, #33	; 0x21
 80039f6:	d11d      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fe36 	bl	80036a0 <HAL_I2C_MemTxCpltCallback>
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b22      	cmp	r3, #34	; 0x22
 8003a4e:	f040 80ac 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d921      	bls.n	8003aa4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	f040 808c 	bne.w	8003baa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003aa2:	e082      	b.n	8003baa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d075      	beq.n	8003b98 <I2C_MasterReceive_RXNE+0x15c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d002      	beq.n	8003ab8 <I2C_MasterReceive_RXNE+0x7c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d16f      	bne.n	8003b98 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f001 facf 	bl	800505c <I2C_WaitOnSTOPRequestThroughIT>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d142      	bne.n	8003b4a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d10a      	bne.n	8003b34 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fdc1 	bl	80036b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b32:	e03a      	b.n	8003baa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2212      	movs	r2, #18
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fd76 	bl	8003634 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b48:	e02f      	b.n	8003baa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fd99 	bl	80036c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b96:	e008      	b.n	8003baa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	605a      	str	r2, [r3, #4]
}
 8003ba8:	e7ff      	b.n	8003baa <I2C_MasterReceive_RXNE+0x16e>
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d11b      	bne.n	8003c02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c00:	e0bd      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d129      	bne.n	8003c60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00a      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d007      	beq.n	8003c38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c5e:	e08e      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d176      	bne.n	8003d58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <I2C_MasterReceive_BTF+0xc4>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d108      	bne.n	8003c88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e019      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d002      	beq.n	8003c94 <I2C_MasterReceive_BTF+0xe2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d108      	bne.n	8003ca6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e00a      	b.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d007      	beq.n	8003cbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d10a      	bne.n	8003d42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fcba 	bl	80036b4 <HAL_I2C_MemRxCpltCallback>
}
 8003d40:	e01d      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2212      	movs	r2, #18
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fc6f 	bl	8003634 <HAL_I2C_MasterRxCpltCallback>
}
 8003d56:	e012      	b.n	8003d7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d117      	bne.n	8003dca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003db4:	e067      	b.n	8003e86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
}
 8003dc8:	e05d      	b.n	8003e86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d133      	bne.n	8003e3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b21      	cmp	r3, #33	; 0x21
 8003dde:	d109      	bne.n	8003df4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	e008      	b.n	8003e06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <I2C_Master_SB+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d032      	beq.n	8003e86 <I2C_Master_SB+0x100>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02d      	beq.n	8003e86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
}
 8003e3a:	e024      	b.n	8003e86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10e      	bne.n	8003e62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	11db      	asrs	r3, r3, #7
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0306 	and.w	r3, r3, #6
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f063 030f 	orn	r3, r3, #15
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]
}
 8003e60:	e011      	b.n	8003e86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10d      	bne.n	8003e86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	11db      	asrs	r3, r3, #7
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0306 	and.w	r3, r3, #6
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f063 030e 	orn	r3, r3, #14
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	611a      	str	r2, [r3, #16]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <I2C_Master_ADD10+0x26>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d108      	bne.n	8003eca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <I2C_Master_ADD10+0x48>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed8:	605a      	str	r2, [r3, #4]
  }
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b091      	sub	sp, #68	; 0x44
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b22      	cmp	r3, #34	; 0x22
 8003f0e:	f040 8169 	bne.w	80041e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <I2C_Master_ADDR+0x54>
 8003f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d10b      	bne.n	8003f3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	e160      	b.n	80041fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <I2C_Master_ADDR+0x98>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f4a:	d118      	bne.n	8003f7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f7c:	e13e      	b.n	80041fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d113      	bne.n	8003fb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e115      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 808a 	bne.w	80040d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fc2:	d137      	bne.n	8004034 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe2:	d113      	bne.n	800400c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	e0e7      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400c:	2300      	movs	r3, #0
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e0d3      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	2b08      	cmp	r3, #8
 8004038:	d02e      	beq.n	8004098 <I2C_Master_ADDR+0x1b2>
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b20      	cmp	r3, #32
 800403e:	d02b      	beq.n	8004098 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	2b12      	cmp	r3, #18
 8004044:	d102      	bne.n	800404c <I2C_Master_ADDR+0x166>
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b01      	cmp	r3, #1
 800404a:	d125      	bne.n	8004098 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	2b04      	cmp	r3, #4
 8004050:	d00e      	beq.n	8004070 <I2C_Master_ADDR+0x18a>
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	2b02      	cmp	r3, #2
 8004056:	d00b      	beq.n	8004070 <I2C_Master_ADDR+0x18a>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b10      	cmp	r3, #16
 800405c:	d008      	beq.n	8004070 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e007      	b.n	8004080 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	e0a1      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e085      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d14d      	bne.n	8004176 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d016      	beq.n	800410e <I2C_Master_ADDR+0x228>
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d013      	beq.n	800410e <I2C_Master_ADDR+0x228>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d010      	beq.n	800410e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e007      	b.n	800411e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800411c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412c:	d117      	bne.n	800415e <I2C_Master_ADDR+0x278>
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004134:	d00b      	beq.n	800414e <I2C_Master_ADDR+0x268>
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	2b01      	cmp	r3, #1
 800413a:	d008      	beq.n	800414e <I2C_Master_ADDR+0x268>
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	2b08      	cmp	r3, #8
 8004140:	d005      	beq.n	800414e <I2C_Master_ADDR+0x268>
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	2b10      	cmp	r3, #16
 8004146:	d002      	beq.n	800414e <I2C_Master_ADDR+0x268>
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b20      	cmp	r3, #32
 800414c:	d107      	bne.n	800415e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800415c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	e032      	b.n	80041dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004184:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004194:	d117      	bne.n	80041c6 <I2C_Master_ADDR+0x2e0>
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800419c:	d00b      	beq.n	80041b6 <I2C_Master_ADDR+0x2d0>
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d008      	beq.n	80041b6 <I2C_Master_ADDR+0x2d0>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d005      	beq.n	80041b6 <I2C_Master_ADDR+0x2d0>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d002      	beq.n	80041b6 <I2C_Master_ADDR+0x2d0>
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d107      	bne.n	80041c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041e2:	e00b      	b.n	80041fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
}
 80041fa:	e7ff      	b.n	80041fc <I2C_Master_ADDR+0x316>
 80041fc:	bf00      	nop
 80041fe:	3744      	adds	r7, #68	; 0x44
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02b      	beq.n	800427a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d114      	bne.n	800427a <I2C_SlaveTransmit_TXE+0x72>
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b29      	cmp	r3, #41	; 0x29
 8004254:	d111      	bne.n	800427a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2221      	movs	r2, #33	; 0x21
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2228      	movs	r2, #40	; 0x28
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff f9e7 	bl	8003648 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d011      	beq.n	80042b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02c      	beq.n	8004338 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <I2C_SlaveReceive_RXNE+0x74>
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b2a      	cmp	r3, #42	; 0x2a
 8004312:	d111      	bne.n	8004338 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004322:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2228      	movs	r2, #40	; 0x28
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff f992 	bl	800365c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800439e:	2b28      	cmp	r3, #40	; 0x28
 80043a0:	d127      	bne.n	80043f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	81bb      	strh	r3, [r7, #12]
 80043d4:	e002      	b.n	80043dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043e4:	89ba      	ldrh	r2, [r7, #12]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff f940 	bl	8003670 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043f0:	e00e      	b.n	8004410 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004436:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d172      	bne.n	800455c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	d002      	beq.n	8004482 <I2C_Slave_STOPF+0x6a>
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b2a      	cmp	r3, #42	; 0x2a
 8004480:	d135      	bne.n	80044ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd ff98 	bl	80023f0 <HAL_DMA_GetState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d049      	beq.n	800455a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4a69      	ldr	r2, [pc, #420]	; (8004670 <I2C_Slave_STOPF+0x258>)
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fde0 	bl	8002098 <HAL_DMA_Abort_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d03d      	beq.n	800455a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ec:	e035      	b.n	800455a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd ff62 	bl	80023f0 <HAL_DMA_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d014      	beq.n	800455c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4a4e      	ldr	r2, [pc, #312]	; (8004670 <I2C_Slave_STOPF+0x258>)
 8004538:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd fdaa 	bl	8002098 <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
 8004558:	e000      	b.n	800455c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03e      	beq.n	80045e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d112      	bne.n	800459a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d112      	bne.n	80045ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8b3 	bl	8004758 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045f2:	e039      	b.n	8004668 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b2a      	cmp	r3, #42	; 0x2a
 80045f8:	d109      	bne.n	800460e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2228      	movs	r2, #40	; 0x28
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff f827 	bl	800365c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b28      	cmp	r3, #40	; 0x28
 8004618:	d111      	bne.n	800463e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <I2C_Slave_STOPF+0x25c>)
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff f828 	bl	800368c <HAL_I2C_ListenCpltCallback>
}
 800463c:	e014      	b.n	8004668 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2b22      	cmp	r3, #34	; 0x22
 8004644:	d002      	beq.n	800464c <I2C_Slave_STOPF+0x234>
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b22      	cmp	r3, #34	; 0x22
 800464a:	d10d      	bne.n	8004668 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe fffa 	bl	800365c <HAL_I2C_SlaveRxCpltCallback>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08004c5d 	.word	0x08004c5d
 8004674:	ffff0000 	.word	0xffff0000

08004678 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d002      	beq.n	800469a <I2C_Slave_AF+0x22>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d129      	bne.n	80046ee <I2C_Slave_AF+0x76>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b28      	cmp	r3, #40	; 0x28
 800469e:	d126      	bne.n	80046ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <I2C_Slave_AF+0xdc>)
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe ffd0 	bl	800368c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046ec:	e02e      	b.n	800474c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b21      	cmp	r3, #33	; 0x21
 80046f2:	d126      	bne.n	8004742 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a17      	ldr	r2, [pc, #92]	; (8004754 <I2C_Slave_AF+0xdc>)
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2221      	movs	r2, #33	; 0x21
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004728:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe ff84 	bl	8003648 <HAL_I2C_SlaveTxCpltCallback>
}
 8004740:	e004      	b.n	800474c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800474a:	615a      	str	r2, [r3, #20]
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	ffff0000 	.word	0xffff0000

08004758 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d002      	beq.n	800477c <I2C_ITError+0x24>
 8004776:	7bbb      	ldrb	r3, [r7, #14]
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d10a      	bne.n	8004792 <I2C_ITError+0x3a>
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b22      	cmp	r3, #34	; 0x22
 8004780:	d107      	bne.n	8004792 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004790:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004798:	2b28      	cmp	r3, #40	; 0x28
 800479a:	d107      	bne.n	80047ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2228      	movs	r2, #40	; 0x28
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047aa:	e015      	b.n	80047d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ba:	d00a      	beq.n	80047d2 <I2C_ITError+0x7a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b60      	cmp	r3, #96	; 0x60
 80047c0:	d007      	beq.n	80047d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e6:	d162      	bne.n	80048ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d020      	beq.n	8004848 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	4a6a      	ldr	r2, [pc, #424]	; (80049b4 <I2C_ITError+0x25c>)
 800480c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd fc40 	bl	8002098 <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8089 	beq.w	8004932 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004842:	4610      	mov	r0, r2
 8004844:	4798      	blx	r3
 8004846:	e074      	b.n	8004932 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4a59      	ldr	r2, [pc, #356]	; (80049b4 <I2C_ITError+0x25c>)
 800484e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd fc1f 	bl	8002098 <HAL_DMA_Abort_IT>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d068      	beq.n	8004932 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d10b      	bne.n	8004886 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a8:	4610      	mov	r0, r2
 80048aa:	4798      	blx	r3
 80048ac:	e041      	b.n	8004932 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b60      	cmp	r3, #96	; 0x60
 80048b8:	d125      	bne.n	8004906 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d10b      	bne.n	80048ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe feec 	bl	80036dc <HAL_I2C_AbortCpltCallback>
 8004904:	e015      	b.n	8004932 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d10b      	bne.n	800492c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fe fecb 	bl	80036c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10e      	bne.n	8004960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b04      	cmp	r3, #4
 8004982:	d113      	bne.n	80049ac <I2C_ITError+0x254>
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b28      	cmp	r3, #40	; 0x28
 8004988:	d110      	bne.n	80049ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <I2C_ITError+0x260>)
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe fe70 	bl	800368c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	08004c5d 	.word	0x08004c5d
 80049b8:	ffff0000 	.word	0xffff0000

080049bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	460b      	mov	r3, r1
 80049ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d006      	beq.n	80049e6 <I2C_MasterRequestWrite+0x2a>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d003      	beq.n	80049e6 <I2C_MasterRequestWrite+0x2a>
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e4:	d108      	bne.n	80049f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e00b      	b.n	8004a10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	2b12      	cmp	r3, #18
 80049fe:	d107      	bne.n	8004a10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f9c5 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d103      	bne.n	8004a40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e035      	b.n	8004ab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4c:	d108      	bne.n	8004a60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a4e:	897b      	ldrh	r3, [r7, #10]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a5c:	611a      	str	r2, [r3, #16]
 8004a5e:	e01b      	b.n	8004a98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a60:	897b      	ldrh	r3, [r7, #10]
 8004a62:	11db      	asrs	r3, r3, #7
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f003 0306 	and.w	r3, r3, #6
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f063 030f 	orn	r3, r3, #15
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	490e      	ldr	r1, [pc, #56]	; (8004ab8 <I2C_MasterRequestWrite+0xfc>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f9eb 	bl	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e010      	b.n	8004ab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4907      	ldr	r1, [pc, #28]	; (8004abc <I2C_MasterRequestWrite+0x100>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f9db 	bl	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00010008 	.word	0x00010008
 8004abc:	00010002 	.word	0x00010002

08004ac0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	460b      	mov	r3, r1
 8004ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d006      	beq.n	8004afa <I2C_MasterRequestRead+0x3a>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d003      	beq.n	8004afa <I2C_MasterRequestRead+0x3a>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af8:	d108      	bne.n	8004b0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e00b      	b.n	8004b24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	2b11      	cmp	r3, #17
 8004b12:	d107      	bne.n	8004b24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f93b 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d103      	bne.n	8004b54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e079      	b.n	8004c4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b60:	d108      	bne.n	8004b74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b62:	897b      	ldrh	r3, [r7, #10]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]
 8004b72:	e05f      	b.n	8004c34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b74:	897b      	ldrh	r3, [r7, #10]
 8004b76:	11db      	asrs	r3, r3, #7
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0306 	and.w	r3, r3, #6
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f063 030f 	orn	r3, r3, #15
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4930      	ldr	r1, [pc, #192]	; (8004c54 <I2C_MasterRequestRead+0x194>)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f961 	bl	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e054      	b.n	8004c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ba2:	897b      	ldrh	r3, [r7, #10]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4929      	ldr	r1, [pc, #164]	; (8004c58 <I2C_MasterRequestRead+0x198>)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f951 	bl	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e044      	b.n	8004c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f8d9 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00d      	beq.n	8004c1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	d103      	bne.n	8004c18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e017      	b.n	8004c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	11db      	asrs	r3, r3, #7
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 0306 	and.w	r3, r3, #6
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f063 030e 	orn	r3, r3, #14
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4907      	ldr	r1, [pc, #28]	; (8004c58 <I2C_MasterRequestRead+0x198>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f90d 	bl	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	00010008 	.word	0x00010008
 8004c58:	00010002 	.word	0x00010002

08004c5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c76:	4b4b      	ldr	r3, [pc, #300]	; (8004da4 <I2C_DMAAbort+0x148>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	4a4a      	ldr	r2, [pc, #296]	; (8004da8 <I2C_DMAAbort+0x14c>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0a1a      	lsrs	r2, r3, #8
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ca2:	e00a      	b.n	8004cba <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d0ea      	beq.n	8004c90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d10e      	bne.n	8004d4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f7fe fcca 	bl	80036dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d48:	e027      	b.n	8004d9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d4a:	7cfb      	ldrb	r3, [r7, #19]
 8004d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d50:	2b28      	cmp	r3, #40	; 0x28
 8004d52:	d117      	bne.n	8004d84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2228      	movs	r2, #40	; 0x28
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d82:	e007      	b.n	8004d94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d94:	6978      	ldr	r0, [r7, #20]
 8004d96:	f7fe fc97 	bl	80036c8 <HAL_I2C_ErrorCallback>
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000021c 	.word	0x2000021c
 8004da8:	14f8b589 	.word	0x14f8b589

08004dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dbc:	e025      	b.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d021      	beq.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fc fed3 	bl	8001b70 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e023      	b.n	8004e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10d      	bne.n	8004e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	e00c      	b.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	43da      	mvns	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d0b6      	beq.n	8004dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e68:	e051      	b.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d123      	bne.n	8004ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f043 0204 	orr.w	r2, r3, #4
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e046      	b.n	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d021      	beq.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fc fe51 	bl	8001b70 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d116      	bne.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e020      	b.n	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10c      	bne.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e00b      	b.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d18d      	bne.n	8004e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f64:	e02d      	b.n	8004fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f900 	bl	800516c <I2C_IsAcknowledgeFailed>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e02d      	b.n	8004fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d021      	beq.n	8004fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fc fdf7 	bl	8001b70 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e007      	b.n	8004fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d1ca      	bne.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe6:	e02d      	b.n	8005044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f8bf 	bl	800516c <I2C_IsAcknowledgeFailed>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e02d      	b.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d021      	beq.n	8005044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005000:	f7fc fdb6 	bl	8001b70 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e007      	b.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b04      	cmp	r3, #4
 8005050:	d1ca      	bne.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	0a1a      	lsrs	r2, r3, #8
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b01      	subs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e008      	b.n	80050ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d0e9      	beq.n	800507e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	2000021c 	.word	0x2000021c
 80050bc:	14f8b589 	.word	0x14f8b589

080050c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050cc:	e042      	b.n	8005154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d119      	bne.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e029      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fc fd2e 	bl	8001b70 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d116      	bne.n	8005154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d1b5      	bne.n	80050ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d11b      	bne.n	80051bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f043 0204 	orr.w	r2, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051da:	d103      	bne.n	80051e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051e2:	e007      	b.n	80051f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051ec:	d102      	bne.n	80051f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2208      	movs	r2, #8
 80051f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e267      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d075      	beq.n	800530a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521e:	4b88      	ldr	r3, [pc, #544]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b04      	cmp	r3, #4
 8005228:	d00c      	beq.n	8005244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522a:	4b85      	ldr	r3, [pc, #532]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005232:	2b08      	cmp	r3, #8
 8005234:	d112      	bne.n	800525c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005236:	4b82      	ldr	r3, [pc, #520]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005242:	d10b      	bne.n	800525c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	4b7e      	ldr	r3, [pc, #504]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d05b      	beq.n	8005308 <HAL_RCC_OscConfig+0x108>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d157      	bne.n	8005308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e242      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d106      	bne.n	8005274 <HAL_RCC_OscConfig+0x74>
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e01d      	b.n	80052b0 <HAL_RCC_OscConfig+0xb0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x98>
 800527e:	4b70      	ldr	r3, [pc, #448]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6f      	ldr	r2, [pc, #444]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b6d      	ldr	r3, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6c      	ldr	r2, [pc, #432]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0xb0>
 8005298:	4b69      	ldr	r3, [pc, #420]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a68      	ldr	r2, [pc, #416]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b66      	ldr	r3, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d013      	beq.n	80052e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fc fc5a 	bl	8001b70 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fc fc56 	bl	8001b70 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e207      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b5b      	ldr	r3, [pc, #364]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0xc0>
 80052de:	e014      	b.n	800530a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fc fc46 	bl	8001b70 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e8:	f7fc fc42 	bl	8001b70 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1f3      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	4b51      	ldr	r3, [pc, #324]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0xe8>
 8005306:	e000      	b.n	800530a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d063      	beq.n	80053de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005322:	4b47      	ldr	r3, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532a:	2b08      	cmp	r3, #8
 800532c:	d11c      	bne.n	8005368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532e:	4b44      	ldr	r3, [pc, #272]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_RCC_OscConfig+0x152>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e1c7      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005352:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4937      	ldr	r1, [pc, #220]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005366:	e03a      	b.n	80053de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d020      	beq.n	80053b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005370:	4b34      	ldr	r3, [pc, #208]	; (8005444 <HAL_RCC_OscConfig+0x244>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fc fbfb 	bl	8001b70 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537e:	f7fc fbf7 	bl	8001b70 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e1a8      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539c:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4925      	ldr	r1, [pc, #148]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
 80053b0:	e015      	b.n	80053de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_RCC_OscConfig+0x244>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fc fbda 	bl	8001b70 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c0:	f7fc fbd6 	bl	8001b70 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e187      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d036      	beq.n	8005458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <HAL_RCC_OscConfig+0x248>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fc fbba 	bl	8001b70 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005400:	f7fc fbb6 	bl	8001b70 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e167      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x200>
 800541e:	e01b      	b.n	8005458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_OscConfig+0x248>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005426:	f7fc fba3 	bl	8001b70 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	e00e      	b.n	800544c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542e:	f7fc fb9f 	bl	8001b70 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d907      	bls.n	800544c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e150      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
 8005440:	40023800 	.word	0x40023800
 8005444:	42470000 	.word	0x42470000
 8005448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ea      	bne.n	800542e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8097 	beq.w	8005594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546a:	4b81      	ldr	r3, [pc, #516]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	4b7d      	ldr	r3, [pc, #500]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
 8005486:	4b7a      	ldr	r3, [pc, #488]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005496:	4b77      	ldr	r3, [pc, #476]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d118      	bne.n	80054d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a2:	4b74      	ldr	r3, [pc, #464]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a73      	ldr	r2, [pc, #460]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ae:	f7fc fb5f 	bl	8001b70 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b6:	f7fc fb5b 	bl	8001b70 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e10c      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d106      	bne.n	80054ea <HAL_RCC_OscConfig+0x2ea>
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	4a63      	ldr	r2, [pc, #396]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6713      	str	r3, [r2, #112]	; 0x70
 80054e8:	e01c      	b.n	8005524 <HAL_RCC_OscConfig+0x324>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x30c>
 80054f2:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	4a5b      	ldr	r2, [pc, #364]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6713      	str	r3, [r2, #112]	; 0x70
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0x324>
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	4a57      	ldr	r2, [pc, #348]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	6713      	str	r3, [r2, #112]	; 0x70
 8005518:	4b55      	ldr	r3, [pc, #340]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a54      	ldr	r2, [pc, #336]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 0304 	bic.w	r3, r3, #4
 8005522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fc fb20 	bl	8001b70 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	e00a      	b.n	800554a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fc fb1c 	bl	8001b70 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e0cb      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	4b49      	ldr	r3, [pc, #292]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ee      	beq.n	8005534 <HAL_RCC_OscConfig+0x334>
 8005556:	e014      	b.n	8005582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fc fb0a 	bl	8001b70 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fc fb06 	bl	8001b70 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0b5      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ee      	bne.n	8005560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005582:	7dfb      	ldrb	r3, [r7, #23]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d105      	bne.n	8005594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005588:	4b39      	ldr	r3, [pc, #228]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	4a38      	ldr	r2, [pc, #224]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80a1 	beq.w	80056e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800559e:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d05c      	beq.n	8005664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d141      	bne.n	8005636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b2:	4b31      	ldr	r3, [pc, #196]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7fc fada 	bl	8001b70 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fc fad6 	bl	8001b70 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e087      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	4b27      	ldr	r3, [pc, #156]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	019b      	lsls	r3, r3, #6
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	3b01      	subs	r3, #1
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	491b      	ldr	r1, [pc, #108]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560e:	f7fc faaf 	bl	8001b70 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005616:	f7fc faab 	bl	8001b70 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e05c      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCC_OscConfig+0x416>
 8005634:	e054      	b.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fc fa98 	bl	8001b70 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005644:	f7fc fa94 	bl	8001b70 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e045      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x444>
 8005662:	e03d      	b.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e038      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
 8005670:	40023800 	.word	0x40023800
 8005674:	40007000 	.word	0x40007000
 8005678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_RCC_OscConfig+0x4ec>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d028      	beq.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d121      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d11a      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800

080056f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0cc      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d90c      	bls.n	800572c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d001      	beq.n	800572c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0b8      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d020      	beq.n	800577a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4a58      	ldr	r2, [pc, #352]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800574e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800575c:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a52      	ldr	r2, [pc, #328]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	494d      	ldr	r1, [pc, #308]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d044      	beq.n	8005810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d107      	bne.n	800579e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d119      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e07f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d003      	beq.n	80057ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d107      	bne.n	80057be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ae:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e06f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e067      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 0203 	bic.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4934      	ldr	r1, [pc, #208]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e0:	f7fc f9c6 	bl	8001b70 <HAL_GetTick>
 80057e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e8:	f7fc f9c2 	bl	8001b70 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e04f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 020c 	and.w	r2, r3, #12
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	429a      	cmp	r2, r3
 800580e:	d1eb      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d20c      	bcs.n	8005838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e032      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4916      	ldr	r1, [pc, #88]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005876:	f000 f821 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800587a:	4602      	mov	r2, r0
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	490a      	ldr	r1, [pc, #40]	; (80058b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	5ccb      	ldrb	r3, [r1, r3]
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fc f926 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023c00 	.word	0x40023c00
 80058ac:	40023800 	.word	0x40023800
 80058b0:	08008074 	.word	0x08008074
 80058b4:	2000021c 	.word	0x2000021c
 80058b8:	20000220 	.word	0x20000220

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c0:	b094      	sub	sp, #80	; 0x50
 80058c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
 80058c8:	2300      	movs	r3, #0
 80058ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058cc:	2300      	movs	r3, #0
 80058ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d4:	4b79      	ldr	r3, [pc, #484]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d00d      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x40>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	f200 80e1 	bhi.w	8005aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x34>
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d003      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ee:	e0db      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f0:	4b73      	ldr	r3, [pc, #460]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058f4:	e0db      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058f6:	4b73      	ldr	r3, [pc, #460]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058fa:	e0d8      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058fc:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005906:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d063      	beq.n	80059da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005912:	4b6a      	ldr	r3, [pc, #424]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	2200      	movs	r2, #0
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 800591c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
 8005926:	2300      	movs	r3, #0
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	0159      	lsls	r1, r3, #5
 800593c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005940:	0150      	lsls	r0, r2, #5
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4621      	mov	r1, r4
 8005948:	1a51      	subs	r1, r2, r1
 800594a:	6139      	str	r1, [r7, #16]
 800594c:	4629      	mov	r1, r5
 800594e:	eb63 0301 	sbc.w	r3, r3, r1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005960:	4659      	mov	r1, fp
 8005962:	018b      	lsls	r3, r1, #6
 8005964:	4651      	mov	r1, sl
 8005966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800596a:	4651      	mov	r1, sl
 800596c:	018a      	lsls	r2, r1, #6
 800596e:	4651      	mov	r1, sl
 8005970:	ebb2 0801 	subs.w	r8, r2, r1
 8005974:	4659      	mov	r1, fp
 8005976:	eb63 0901 	sbc.w	r9, r3, r1
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800598a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598e:	4690      	mov	r8, r2
 8005990:	4699      	mov	r9, r3
 8005992:	4623      	mov	r3, r4
 8005994:	eb18 0303 	adds.w	r3, r8, r3
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	462b      	mov	r3, r5
 800599c:	eb49 0303 	adc.w	r3, r9, r3
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059ae:	4629      	mov	r1, r5
 80059b0:	024b      	lsls	r3, r1, #9
 80059b2:	4621      	mov	r1, r4
 80059b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059b8:	4621      	mov	r1, r4
 80059ba:	024a      	lsls	r2, r1, #9
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c2:	2200      	movs	r2, #0
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059cc:	f7fa fc04 	bl	80001d8 <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4613      	mov	r3, r2
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d8:	e058      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b38      	ldr	r3, [pc, #224]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	2200      	movs	r2, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	4611      	mov	r1, r2
 80059e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	2300      	movs	r3, #0
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	f04f 0000 	mov.w	r0, #0
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	0159      	lsls	r1, r3, #5
 8005a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a06:	0150      	lsls	r0, r2, #5
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a12:	4649      	mov	r1, r9
 8005a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a30:	eb63 050b 	sbc.w	r5, r3, fp
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	00eb      	lsls	r3, r5, #3
 8005a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a42:	00e2      	lsls	r2, r4, #3
 8005a44:	4614      	mov	r4, r2
 8005a46:	461d      	mov	r5, r3
 8005a48:	4643      	mov	r3, r8
 8005a4a:	18e3      	adds	r3, r4, r3
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	464b      	mov	r3, r9
 8005a50:	eb45 0303 	adc.w	r3, r5, r3
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a62:	4629      	mov	r1, r5
 8005a64:	028b      	lsls	r3, r1, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	028a      	lsls	r2, r1, #10
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	2200      	movs	r2, #0
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	61fa      	str	r2, [r7, #28]
 8005a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a80:	f7fa fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	3301      	adds	r3, #1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aa6:	e002      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3750      	adds	r7, #80	; 0x50
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	007a1200 	.word	0x007a1200

08005ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	2000021c 	.word	0x2000021c

08005ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae4:	f7ff fff0 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0a9b      	lsrs	r3, r3, #10
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4903      	ldr	r1, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	08008084 	.word	0x08008084

08005b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b0c:	f7ff ffdc 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	0b5b      	lsrs	r3, r3, #13
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	4903      	ldr	r1, [pc, #12]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	08008084 	.word	0x08008084

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04c      	b.n	8005bdc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d111      	bne.n	8005b72 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 ff40 	bl	80069dc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <HAL_TIM_Base_Init+0xb4>)
 8005b68:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f000 fcf7 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	080017d9 	.word	0x080017d9

08005be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d001      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e044      	b.n	8005c8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x6c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d013      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x6c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <HAL_TIM_Base_Start_IT+0xb4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x6c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x6c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x6c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d111      	bne.n	8005c78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d010      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c76:	e007      	b.n	8005c88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40014000 	.word	0x40014000

08005cac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e04c      	b.n	8005d58 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d111      	bne.n	8005cee <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fe82 	bl	80069dc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <HAL_TIM_OC_Init+0xb4>)
 8005ce4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f000 fc39 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	08005d65 	.word	0x08005d65

08005d64 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04c      	b.n	8005e26 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d111      	bne.n	8005dbc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fe1b 	bl	80069dc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <HAL_TIM_OnePulse_Init+0xb8>)
 8005db2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 fbd2 	bl	8006578 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0208 	bic.w	r2, r2, #8
 8005de2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	08005e35 	.word	0x08005e35

08005e34 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e70:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d108      	bne.n	8005e8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d105      	bne.n	8005e8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e84:	7b3b      	ldrb	r3, [r7, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e03b      	b.n	8005f06 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0202 	orr.w	r2, r2, #2
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0204 	orr.w	r2, r2, #4
 8005ecc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fd5a 	bl	8006990 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fd53 	bl	8006990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000

08005f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d128      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d121      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0202 	mvn.w	r2, #2
 8005f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
 8005f60:	e009      	b.n	8005f76 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d128      	bne.n	8005fdc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d121      	bne.n	8005fdc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0204 	mvn.w	r2, #4
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
 8005fc0:	e009      	b.n	8005fd6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d128      	bne.n	800603c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d121      	bne.n	800603c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0208 	mvn.w	r2, #8
 8006000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2204      	movs	r2, #4
 8006006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	e009      	b.n	8006036 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d128      	bne.n	800609c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b10      	cmp	r3, #16
 8006056:	d121      	bne.n	800609c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0210 	mvn.w	r2, #16
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2208      	movs	r2, #8
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
 8006080:	e009      	b.n	8006096 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d110      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d109      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0201 	mvn.w	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d110      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d109      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d110      	bne.n	800612c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d109      	bne.n	800612c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d110      	bne.n	800615c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b20      	cmp	r3, #32
 8006146:	d109      	bne.n	800615c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0220 	mvn.w	r2, #32
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_OC_ConfigChannel+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e048      	b.n	8006214 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d839      	bhi.n	8006204 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006190:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061cd 	.word	0x080061cd
 800619c:	08006205 	.word	0x08006205
 80061a0:	08006205 	.word	0x08006205
 80061a4:	08006205 	.word	0x08006205
 80061a8:	080061db 	.word	0x080061db
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006205 	.word	0x08006205
 80061b4:	08006205 	.word	0x08006205
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	08006205 	.word	0x08006205
 80061c0:	08006205 	.word	0x08006205
 80061c4:	08006205 	.word	0x08006205
 80061c8:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa50 	bl	8006678 <TIM_OC1_SetConfig>
      break;
 80061d8:	e017      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 faaf 	bl	8006744 <TIM_OC2_SetConfig>
      break;
 80061e6:	e010      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb14 	bl	800681c <TIM_OC3_SetConfig>
      break;
 80061f4:	e009      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fb77 	bl	80068f0 <TIM_OC4_SetConfig>
      break;
 8006202:	e002      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	460b      	mov	r3, r1
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e135      	b.n	800656c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_TIM_RegisterCallback+0x2a>
 800630a:	2302      	movs	r3, #2
 800630c:	e12e      	b.n	800656c <HAL_TIM_RegisterCallback+0x288>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	f040 80ba 	bne.w	8006498 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	2b1a      	cmp	r3, #26
 8006328:	f200 80b3 	bhi.w	8006492 <HAL_TIM_RegisterCallback+0x1ae>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <HAL_TIM_RegisterCallback+0x50>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	080063a1 	.word	0x080063a1
 8006338:	080063a9 	.word	0x080063a9
 800633c:	080063b1 	.word	0x080063b1
 8006340:	080063b9 	.word	0x080063b9
 8006344:	080063c1 	.word	0x080063c1
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063d9 	.word	0x080063d9
 8006354:	080063e1 	.word	0x080063e1
 8006358:	080063e9 	.word	0x080063e9
 800635c:	080063f1 	.word	0x080063f1
 8006360:	080063f9 	.word	0x080063f9
 8006364:	08006401 	.word	0x08006401
 8006368:	08006409 	.word	0x08006409
 800636c:	08006411 	.word	0x08006411
 8006370:	0800641b 	.word	0x0800641b
 8006374:	08006425 	.word	0x08006425
 8006378:	0800642f 	.word	0x0800642f
 800637c:	08006439 	.word	0x08006439
 8006380:	08006443 	.word	0x08006443
 8006384:	0800644d 	.word	0x0800644d
 8006388:	08006457 	.word	0x08006457
 800638c:	08006461 	.word	0x08006461
 8006390:	0800646b 	.word	0x0800646b
 8006394:	08006475 	.word	0x08006475
 8006398:	0800647f 	.word	0x0800647f
 800639c:	08006489 	.word	0x08006489
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80063a6:	e0dc      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80063ae:	e0d8      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80063b6:	e0d4      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80063be:	e0d0      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80063c6:	e0cc      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80063ce:	e0c8      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80063d6:	e0c4      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80063de:	e0c0      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80063e6:	e0bc      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80063ee:	e0b8      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80063f6:	e0b4      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80063fe:	e0b0      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006406:	e0ac      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800640e:	e0a8      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006418:	e0a3      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006422:	e09e      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800642c:	e099      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006436:	e094      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006440:	e08f      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800644a:	e08a      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006454:	e085      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800645e:	e080      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006468:	e07b      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006472:	e076      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800647c:	e071      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006486:	e06c      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006490:	e067      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
        break;
 8006496:	e064      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d15c      	bne.n	800655e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80064a4:	7afb      	ldrb	r3, [r7, #11]
 80064a6:	2b0d      	cmp	r3, #13
 80064a8:	d856      	bhi.n	8006558 <HAL_TIM_RegisterCallback+0x274>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <HAL_TIM_RegisterCallback+0x1cc>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064f1 	.word	0x080064f1
 80064b8:	080064f9 	.word	0x080064f9
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006509 	.word	0x08006509
 80064c4:	08006511 	.word	0x08006511
 80064c8:	08006519 	.word	0x08006519
 80064cc:	08006521 	.word	0x08006521
 80064d0:	08006529 	.word	0x08006529
 80064d4:	08006531 	.word	0x08006531
 80064d8:	08006539 	.word	0x08006539
 80064dc:	08006541 	.word	0x08006541
 80064e0:	08006549 	.word	0x08006549
 80064e4:	08006551 	.word	0x08006551
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80064ee:	e038      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80064f6:	e034      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80064fe:	e030      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006506:	e02c      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800650e:	e028      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006516:	e024      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800651e:	e020      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006526:	e01c      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800652e:	e018      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006536:	e014      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800653e:	e010      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006546:	e00c      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800654e:	e008      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006556:	e004      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
        break;
 800655c:	e001      	b.n	8006562 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
}
 800656c:	4618      	mov	r0, r3
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a34      	ldr	r2, [pc, #208]	; (800665c <TIM_Base_SetConfig+0xe4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00f      	beq.n	80065b0 <TIM_Base_SetConfig+0x38>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006596:	d00b      	beq.n	80065b0 <TIM_Base_SetConfig+0x38>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a31      	ldr	r2, [pc, #196]	; (8006660 <TIM_Base_SetConfig+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_Base_SetConfig+0x38>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a30      	ldr	r2, [pc, #192]	; (8006664 <TIM_Base_SetConfig+0xec>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_Base_SetConfig+0x38>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <TIM_Base_SetConfig+0xf0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d108      	bne.n	80065c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a25      	ldr	r2, [pc, #148]	; (800665c <TIM_Base_SetConfig+0xe4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01b      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d017      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <TIM_Base_SetConfig+0xe8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a21      	ldr	r2, [pc, #132]	; (8006664 <TIM_Base_SetConfig+0xec>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <TIM_Base_SetConfig+0xf0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00b      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <TIM_Base_SetConfig+0xf4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <TIM_Base_SetConfig+0xf8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_Base_SetConfig+0x8a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <TIM_Base_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d108      	bne.n	8006614 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a08      	ldr	r2, [pc, #32]	; (800665c <TIM_Base_SetConfig+0xe4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d103      	bne.n	8006648 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	615a      	str	r2, [r3, #20]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010000 	.word	0x40010000
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800

08006678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0302 	bic.w	r3, r3, #2
 80066c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <TIM_OC1_SetConfig+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d10c      	bne.n	80066ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0308 	bic.w	r3, r3, #8
 80066da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a13      	ldr	r2, [pc, #76]	; (8006740 <TIM_OC1_SetConfig+0xc8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40010000 	.word	0x40010000

08006744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f023 0210 	bic.w	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <TIM_OC2_SetConfig+0xd4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10d      	bne.n	80067c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <TIM_OC2_SetConfig+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d113      	bne.n	80067f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000

0800681c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <TIM_OC3_SetConfig+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10d      	bne.n	8006896 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <TIM_OC3_SetConfig+0xd0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d113      	bne.n	80068c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	621a      	str	r2, [r3, #32]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	40010000 	.word	0x40010000

080068f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	031b      	lsls	r3, r3, #12
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a10      	ldr	r2, [pc, #64]	; (800698c <TIM_OC4_SetConfig+0x9c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	019b      	lsls	r3, r3, #6
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000

08006990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <TIM_ResetCallback+0x7c>)
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <TIM_ResetCallback+0x80>)
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <TIM_ResetCallback+0x84>)
 80069f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <TIM_ResetCallback+0x88>)
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <TIM_ResetCallback+0x8c>)
 8006a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a17      	ldr	r2, [pc, #92]	; (8006a6c <TIM_ResetCallback+0x90>)
 8006a10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <TIM_ResetCallback+0x94>)
 8006a18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <TIM_ResetCallback+0x98>)
 8006a20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <TIM_ResetCallback+0x9c>)
 8006a28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <TIM_ResetCallback+0xa0>)
 8006a30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <TIM_ResetCallback+0xa4>)
 8006a38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <TIM_ResetCallback+0xa8>)
 8006a40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a10      	ldr	r2, [pc, #64]	; (8006a88 <TIM_ResetCallback+0xac>)
 8006a48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	0800621d 	.word	0x0800621d
 8006a5c:	08006231 	.word	0x08006231
 8006a60:	080062a9 	.word	0x080062a9
 8006a64:	080062bd 	.word	0x080062bd
 8006a68:	08006259 	.word	0x08006259
 8006a6c:	0800626d 	.word	0x0800626d
 8006a70:	08006245 	.word	0x08006245
 8006a74:	08006281 	.word	0x08006281
 8006a78:	08006295 	.word	0x08006295
 8006a7c:	080062d1 	.word	0x080062d1
 8006a80:	08006a8d 	.word	0x08006a8d
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	08006ab5 	.word	0x08006ab5

08006a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e04a      	b.n	8006b70 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d111      	bne.n	8006b0a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd22 	bl	8007538 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <HAL_UART_Init+0xb0>)
 8006b00:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2224      	movs	r2, #36	; 0x24
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 ffec 	bl	8007b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	080018d5 	.word	0x080018d5

08006b7c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	460b      	mov	r3, r1
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e08c      	b.n	8006cbe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_RegisterCallback+0x36>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e085      	b.n	8006cbe <HAL_UART_RegisterCallback+0x142>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d151      	bne.n	8006c6a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	2b0c      	cmp	r3, #12
 8006bca:	d845      	bhi.n	8006c58 <HAL_UART_RegisterCallback+0xdc>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_UART_RegisterCallback+0x58>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c09 	.word	0x08006c09
 8006bd8:	08006c11 	.word	0x08006c11
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006c21 	.word	0x08006c21
 8006be4:	08006c29 	.word	0x08006c29
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c59 	.word	0x08006c59
 8006bf8:	08006c59 	.word	0x08006c59
 8006bfc:	08006c59 	.word	0x08006c59
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c51 	.word	0x08006c51
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006c0e:	e051      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006c16:	e04d      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006c1e:	e049      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006c26:	e045      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006c2e:	e041      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006c36:	e03d      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006c3e:	e039      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006c46:	e035      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c4e:	e031      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c56:	e02d      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]
        break;
 8006c68:	e024      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d116      	bne.n	8006ca4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	2b0b      	cmp	r3, #11
 8006c7a:	d002      	beq.n	8006c82 <HAL_UART_RegisterCallback+0x106>
 8006c7c:	2b0c      	cmp	r3, #12
 8006c7e:	d004      	beq.n	8006c8a <HAL_UART_RegisterCallback+0x10e>
 8006c80:	e007      	b.n	8006c92 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c88:	e014      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c90:	e010      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
        break;
 8006ca2:	e007      	b.n	8006cb4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f043 0220 	orr.w	r2, r3, #32
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d11d      	bne.n	8006d22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_UART_Receive_IT+0x26>
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e016      	b.n	8006d24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_UART_Receive_IT+0x38>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e00f      	b.n	8006d24 <HAL_UART_Receive_IT+0x58>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fced 	bl	80076f8 <UART_Start_Receive_IT>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	e000      	b.n	8006d24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d22:	2302      	movs	r3, #2
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d165      	bne.n	8006e12 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_UART_Transmit_DMA+0x26>
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e05e      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_UART_Transmit_DMA+0x38>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e057      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xe8>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	88fa      	ldrh	r2, [r7, #6]
 8006d76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2221      	movs	r2, #33	; 0x21
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	4a22      	ldr	r2, [pc, #136]	; (8006e1c <HAL_UART_Transmit_DMA+0xf0>)
 8006d92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_UART_Transmit_DMA+0xf4>)
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <HAL_UART_Transmit_DMA+0xf8>)
 8006da2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	2200      	movs	r2, #0
 8006daa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006dac:	f107 0308 	add.w	r3, r7, #8
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	6819      	ldr	r1, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	f7fb f8a0 	bl	8001f08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3314      	adds	r3, #20
 8006de0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006dfc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6a39      	ldr	r1, [r7, #32]
 8006e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3730      	adds	r7, #48	; 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	080075a9 	.word	0x080075a9
 8006e20:	08007645 	.word	0x08007645
 8006e24:	08007663 	.word	0x08007663

08006e28 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b09a      	sub	sp, #104	; 0x68
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e46:	667b      	str	r3, [r7, #100]	; 0x64
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e50:	657a      	str	r2, [r7, #84]	; 0x54
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e5      	bne.n	8006e30 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e84:	643a      	str	r2, [r7, #64]	; 0x40
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d119      	bne.n	8006ed4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f023 0310 	bic.w	r3, r3, #16
 8006eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e5      	bne.n	8006ea0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d136      	bne.n	8006f50 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3314      	adds	r3, #20
 8006ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3314      	adds	r3, #20
 8006f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f02:	61ba      	str	r2, [r7, #24]
 8006f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e5      	bne.n	8006ee2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	2200      	movs	r2, #0
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fb f844 	bl	8001fb8 <HAL_DMA_Abort>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00c      	beq.n	8006f50 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fb fa66 	bl	800240c <HAL_DMA_GetError>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d104      	bne.n	8006f50 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2210      	movs	r2, #16
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e00a      	b.n	8006f66 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3768      	adds	r7, #104	; 0x68
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b0ba      	sub	sp, #232	; 0xe8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10f      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x66>
 8006fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fcd9 	bl	8007986 <UART_Receive_IT>
      return;
 8006fd4:	e25b      	b.n	800748e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80e1 	beq.w	80071a2 <HAL_UART_IRQHandler+0x232>
 8006fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80d4 	beq.w	80071a2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <HAL_UART_IRQHandler+0xae>
 8007006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_UART_IRQHandler+0xd2>
 800702a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f043 0202 	orr.w	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_UART_IRQHandler+0xf6>
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f043 0204 	orr.w	r2, r3, #4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d011      	beq.n	8007096 <HAL_UART_IRQHandler+0x126>
 8007072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800707e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f043 0208 	orr.w	r2, r3, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 81f2 	beq.w	8007484 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_UART_IRQHandler+0x14e>
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fc64 	bl	8007986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	bf0c      	ite	eq
 80070cc:	2301      	moveq	r3, #1
 80070ce:	2300      	movne	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <HAL_UART_IRQHandler+0x17a>
 80070e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d051      	beq.n	800718e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb6a 	bl	80077c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d142      	bne.n	8007184 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3314      	adds	r3, #20
 8007104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3314      	adds	r3, #20
 8007126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800712a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800712e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1d9      	bne.n	80070fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	2b00      	cmp	r3, #0
 8007150:	d013      	beq.n	800717a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	4a7f      	ldr	r2, [pc, #508]	; (8007354 <HAL_UART_IRQHandler+0x3e4>)
 8007158:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	4618      	mov	r0, r3
 8007160:	f7fa ff9a 	bl	8002098 <HAL_DMA_Abort_IT>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e011      	b.n	800719e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007182:	e00c      	b.n	800719e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	e007      	b.n	800719e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800719c:	e172      	b.n	8007484 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719e:	bf00      	nop
    return;
 80071a0:	e170      	b.n	8007484 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f040 814c 	bne.w	8007444 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8145 	beq.w	8007444 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 813e 	beq.w	8007444 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c8:	2300      	movs	r3, #0
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	f040 80b5 	bne.w	8007358 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8142 	beq.w	8007488 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800720c:	429a      	cmp	r2, r3
 800720e:	f080 813b 	bcs.w	8007488 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007224:	f000 8088 	beq.w	8007338 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800723e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007254:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800726c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1d9      	bne.n	8007228 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007298:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800729c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e1      	bne.n	8007274 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3314      	adds	r3, #20
 80072d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e3      	bne.n	80072b0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007308:	f023 0310 	bic.w	r3, r3, #16
 800730c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800731a:	65ba      	str	r2, [r7, #88]	; 0x58
 800731c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e3      	bne.n	80072f6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	4618      	mov	r0, r3
 8007334:	f7fa fe40 	bl	8001fb8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007344:	b292      	uxth	r2, r2
 8007346:	1a8a      	subs	r2, r1, r2
 8007348:	b292      	uxth	r2, r2
 800734a:	4611      	mov	r1, r2
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007350:	e09a      	b.n	8007488 <HAL_UART_IRQHandler+0x518>
 8007352:	bf00      	nop
 8007354:	0800788b 	.word	0x0800788b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 808c 	beq.w	800748c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8087 	beq.w	800748c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073a2:	647a      	str	r2, [r7, #68]	; 0x44
 80073a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e3      	bne.n	800737e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	623b      	str	r3, [r7, #32]
   return(result);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073da:	633a      	str	r2, [r7, #48]	; 0x30
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e3      	bne.n	80073b6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60fb      	str	r3, [r7, #12]
   return(result);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007420:	61fa      	str	r2, [r7, #28]
 8007422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	69b9      	ldr	r1, [r7, #24]
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	617b      	str	r3, [r7, #20]
   return(result);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e3      	bne.n	80073fc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007438:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800743c:	4611      	mov	r1, r2
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007442:	e023      	b.n	800748c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <HAL_UART_IRQHandler+0x4f4>
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa29 	bl	80078b4 <UART_Transmit_IT>
    return;
 8007462:	e014      	b.n	800748e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <HAL_UART_IRQHandler+0x51e>
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa69 	bl	8007954 <UART_EndTransmit_IT>
    return;
 8007482:	e004      	b.n	800748e <HAL_UART_IRQHandler+0x51e>
    return;
 8007484:	bf00      	nop
 8007486:	e002      	b.n	800748e <HAL_UART_IRQHandler+0x51e>
      return;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <HAL_UART_IRQHandler+0x51e>
      return;
 800748c:	bf00      	nop
  }
}
 800748e:	37e8      	adds	r7, #232	; 0xe8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a10      	ldr	r2, [pc, #64]	; (8007584 <UART_InitCallbacksToDefault+0x4c>)
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <UART_InitCallbacksToDefault+0x50>)
 800754a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a0f      	ldr	r2, [pc, #60]	; (800758c <UART_InitCallbacksToDefault+0x54>)
 8007550:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a0e      	ldr	r2, [pc, #56]	; (8007590 <UART_InitCallbacksToDefault+0x58>)
 8007556:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a0e      	ldr	r2, [pc, #56]	; (8007594 <UART_InitCallbacksToDefault+0x5c>)
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a0d      	ldr	r2, [pc, #52]	; (8007598 <UART_InitCallbacksToDefault+0x60>)
 8007562:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a0d      	ldr	r2, [pc, #52]	; (800759c <UART_InitCallbacksToDefault+0x64>)
 8007568:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <UART_InitCallbacksToDefault+0x68>)
 800756e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <UART_InitCallbacksToDefault+0x6c>)
 8007574:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	080074a9 	.word	0x080074a9
 8007588:	08007495 	.word	0x08007495
 800758c:	080074bd 	.word	0x080074bd
 8007590:	080014e5 	.word	0x080014e5
 8007594:	080074d1 	.word	0x080074d1
 8007598:	080074e5 	.word	0x080074e5
 800759c:	080074f9 	.word	0x080074f9
 80075a0:	0800750d 	.word	0x0800750d
 80075a4:	08007521 	.word	0x08007521

080075a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b090      	sub	sp, #64	; 0x40
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d137      	bne.n	8007634 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80075c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c6:	2200      	movs	r2, #0
 80075c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3314      	adds	r3, #20
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	623b      	str	r3, [r7, #32]
   return(result);
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ea:	633a      	str	r2, [r7, #48]	; 0x30
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	60fb      	str	r3, [r7, #12]
   return(result);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800761e:	61fa      	str	r2, [r7, #28]
 8007620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	69b9      	ldr	r1, [r7, #24]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	617b      	str	r3, [r7, #20]
   return(result);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007632:	e003      	b.n	800763c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007638:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800763a:	4798      	blx	r3
}
 800763c:	bf00      	nop
 800763e:	3740      	adds	r7, #64	; 0x40
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b21      	cmp	r3, #33	; 0x21
 8007694:	d108      	bne.n	80076a8 <UART_DMAError+0x46>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076a2:	68b8      	ldr	r0, [r7, #8]
 80076a4:	f000 f866 	bl	8007774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b22      	cmp	r3, #34	; 0x22
 80076c8:	d108      	bne.n	80076dc <UART_DMAError+0x7a>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076d6:	68b8      	ldr	r0, [r7, #8]
 80076d8:	f000 f874 	bl	80077c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	f043 0210 	orr.w	r2, r3, #16
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	68b8      	ldr	r0, [r7, #8]
 80076ee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2222      	movs	r2, #34	; 0x22
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007744:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0220 	orr.w	r2, r2, #32
 8007764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b089      	sub	sp, #36	; 0x24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	60bb      	str	r3, [r7, #8]
   return(result);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	61ba      	str	r2, [r7, #24]
 800779e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6979      	ldr	r1, [r7, #20]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80077b8:	bf00      	nop
 80077ba:	3724      	adds	r7, #36	; 0x24
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b095      	sub	sp, #84	; 0x54
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	330c      	adds	r3, #12
 80077ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077ec:	643a      	str	r2, [r7, #64]	; 0x40
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3314      	adds	r3, #20
 8007806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f023 0301 	bic.w	r3, r3, #1
 8007816:	64bb      	str	r3, [r7, #72]	; 0x48
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3314      	adds	r3, #20
 800781e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e5      	bne.n	8007800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	2b01      	cmp	r3, #1
 800783a:	d119      	bne.n	8007870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60bb      	str	r3, [r7, #8]
   return(result);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	330c      	adds	r3, #12
 800785a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800785c:	61ba      	str	r2, [r7, #24]
 800785e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e5      	bne.n	800783c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800787e:	bf00      	nop
 8007880:	3754      	adds	r7, #84	; 0x54
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b21      	cmp	r3, #33	; 0x21
 80078c6:	d13e      	bne.n	8007946 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d114      	bne.n	80078fc <UART_Transmit_IT+0x48>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d110      	bne.n	80078fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	1c9a      	adds	r2, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]
 80078fa:	e008      	b.n	800790e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	1c59      	adds	r1, r3, #1
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6211      	str	r1, [r2, #32]
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4619      	mov	r1, r3
 800791c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10f      	bne.n	8007942 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007930:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007940:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e000      	b.n	8007948 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08c      	sub	sp, #48	; 0x30
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b22      	cmp	r3, #34	; 0x22
 8007998:	f040 80ad 	bne.w	8007af6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d117      	bne.n	80079d6 <UART_Receive_IT+0x50>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
 80079d4:	e026      	b.n	8007a24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d007      	beq.n	80079fa <UART_Receive_IT+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <UART_Receive_IT+0x82>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e008      	b.n	8007a1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4619      	mov	r1, r3
 8007a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d15c      	bne.n	8007af2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0220 	bic.w	r2, r2, #32
 8007a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d136      	bne.n	8007ae6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 0310 	bic.w	r3, r3, #16
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	623a      	str	r2, [r7, #32]
 8007aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69f9      	ldr	r1, [r7, #28]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007ade:	4611      	mov	r1, r2
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e003      	b.n	8007aee <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e002      	b.n	8007af8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3730      	adds	r7, #48	; 0x30
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b04:	b0c0      	sub	sp, #256	; 0x100
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	68d9      	ldr	r1, [r3, #12]
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	ea40 0301 	orr.w	r3, r0, r1
 8007b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b58:	f021 010c 	bic.w	r1, r1, #12
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b66:	430b      	orrs	r3, r1
 8007b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	6999      	ldr	r1, [r3, #24]
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	ea40 0301 	orr.w	r3, r0, r1
 8007b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b8f      	ldr	r3, [pc, #572]	; (8007dcc <UART_SetConfig+0x2cc>)
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d005      	beq.n	8007ba0 <UART_SetConfig+0xa0>
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b8d      	ldr	r3, [pc, #564]	; (8007dd0 <UART_SetConfig+0x2d0>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d104      	bne.n	8007baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ba0:	f7fd ffb2 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8007ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ba8:	e003      	b.n	8007bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007baa:	f7fd ff99 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007bae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbc:	f040 810c 	bne.w	8007dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	1891      	adds	r1, r2, r2
 8007bd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bda:	415b      	adcs	r3, r3
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007be2:	4621      	mov	r1, r4
 8007be4:	eb12 0801 	adds.w	r8, r2, r1
 8007be8:	4629      	mov	r1, r5
 8007bea:	eb43 0901 	adc.w	r9, r3, r1
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c02:	4690      	mov	r8, r2
 8007c04:	4699      	mov	r9, r3
 8007c06:	4623      	mov	r3, r4
 8007c08:	eb18 0303 	adds.w	r3, r8, r3
 8007c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c10:	462b      	mov	r3, r5
 8007c12:	eb49 0303 	adc.w	r3, r9, r3
 8007c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c2e:	460b      	mov	r3, r1
 8007c30:	18db      	adds	r3, r3, r3
 8007c32:	653b      	str	r3, [r7, #80]	; 0x50
 8007c34:	4613      	mov	r3, r2
 8007c36:	eb42 0303 	adc.w	r3, r2, r3
 8007c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c44:	f7f8 fac8 	bl	80001d8 <__aeabi_uldivmod>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4b61      	ldr	r3, [pc, #388]	; (8007dd4 <UART_SetConfig+0x2d4>)
 8007c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	011c      	lsls	r4, r3, #4
 8007c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c68:	4642      	mov	r2, r8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	1891      	adds	r1, r2, r2
 8007c6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c70:	415b      	adcs	r3, r3
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c78:	4641      	mov	r1, r8
 8007c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8007c7e:	4649      	mov	r1, r9
 8007c80:	eb43 0b01 	adc.w	fp, r3, r1
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c98:	4692      	mov	sl, r2
 8007c9a:	469b      	mov	fp, r3
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8007ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	18db      	adds	r3, r3, r3
 8007cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cca:	4613      	mov	r3, r2
 8007ccc:	eb42 0303 	adc.w	r3, r2, r3
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cda:	f7f8 fa7d 	bl	80001d8 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <UART_SetConfig+0x2d4>)
 8007ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2264      	movs	r2, #100	; 0x64
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	1acb      	subs	r3, r1, r3
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <UART_SetConfig+0x2d4>)
 8007cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d08:	441c      	add	r4, r3
 8007d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	1891      	adds	r1, r2, r2
 8007d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d24:	415b      	adcs	r3, r3
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	1851      	adds	r1, r2, r1
 8007d30:	6339      	str	r1, [r7, #48]	; 0x30
 8007d32:	4649      	mov	r1, r9
 8007d34:	414b      	adcs	r3, r1
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d44:	4659      	mov	r1, fp
 8007d46:	00cb      	lsls	r3, r1, #3
 8007d48:	4651      	mov	r1, sl
 8007d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4e:	4651      	mov	r1, sl
 8007d50:	00ca      	lsls	r2, r1, #3
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	4642      	mov	r2, r8
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d60:	464b      	mov	r3, r9
 8007d62:	460a      	mov	r2, r1
 8007d64:	eb42 0303 	adc.w	r3, r2, r3
 8007d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d80:	460b      	mov	r3, r1
 8007d82:	18db      	adds	r3, r3, r3
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d86:	4613      	mov	r3, r2
 8007d88:	eb42 0303 	adc.w	r3, r2, r3
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d96:	f7f8 fa1f 	bl	80001d8 <__aeabi_uldivmod>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <UART_SetConfig+0x2d4>)
 8007da0:	fba3 1302 	umull	r1, r3, r3, r2
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	2164      	movs	r1, #100	; 0x64
 8007da8:	fb01 f303 	mul.w	r3, r1, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	3332      	adds	r3, #50	; 0x32
 8007db2:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <UART_SetConfig+0x2d4>)
 8007db4:	fba2 2303 	umull	r2, r3, r2, r3
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f003 0207 	and.w	r2, r3, #7
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4422      	add	r2, r4
 8007dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dc8:	e105      	b.n	8007fd6 <UART_SetConfig+0x4d6>
 8007dca:	bf00      	nop
 8007dcc:	40011000 	.word	0x40011000
 8007dd0:	40011400 	.word	0x40011400
 8007dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007de2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dea:	4642      	mov	r2, r8
 8007dec:	464b      	mov	r3, r9
 8007dee:	1891      	adds	r1, r2, r2
 8007df0:	6239      	str	r1, [r7, #32]
 8007df2:	415b      	adcs	r3, r3
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
 8007df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	1854      	adds	r4, r2, r1
 8007dfe:	4649      	mov	r1, r9
 8007e00:	eb43 0501 	adc.w	r5, r3, r1
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	00eb      	lsls	r3, r5, #3
 8007e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e12:	00e2      	lsls	r2, r4, #3
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	4643      	mov	r3, r8
 8007e1a:	18e3      	adds	r3, r4, r3
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e20:	464b      	mov	r3, r9
 8007e22:	eb45 0303 	adc.w	r3, r5, r3
 8007e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e46:	4629      	mov	r1, r5
 8007e48:	008b      	lsls	r3, r1, #2
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e50:	4621      	mov	r1, r4
 8007e52:	008a      	lsls	r2, r1, #2
 8007e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e58:	f7f8 f9be 	bl	80001d8 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4b60      	ldr	r3, [pc, #384]	; (8007fe4 <UART_SetConfig+0x4e4>)
 8007e62:	fba3 2302 	umull	r2, r3, r3, r2
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	011c      	lsls	r4, r3, #4
 8007e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	1891      	adds	r1, r2, r2
 8007e82:	61b9      	str	r1, [r7, #24]
 8007e84:	415b      	adcs	r3, r3
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	1851      	adds	r1, r2, r1
 8007e90:	6139      	str	r1, [r7, #16]
 8007e92:	4649      	mov	r1, r9
 8007e94:	414b      	adcs	r3, r1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	00cb      	lsls	r3, r1, #3
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eae:	4651      	mov	r1, sl
 8007eb0:	00ca      	lsls	r2, r1, #3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4642      	mov	r2, r8
 8007eba:	189b      	adds	r3, r3, r2
 8007ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	460a      	mov	r2, r1
 8007ec4:	eb42 0303 	adc.w	r3, r2, r3
 8007ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ed6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	008b      	lsls	r3, r1, #2
 8007ee8:	4641      	mov	r1, r8
 8007eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eee:	4641      	mov	r1, r8
 8007ef0:	008a      	lsls	r2, r1, #2
 8007ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ef6:	f7f8 f96f 	bl	80001d8 <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4b39      	ldr	r3, [pc, #228]	; (8007fe4 <UART_SetConfig+0x4e4>)
 8007f00:	fba3 1302 	umull	r1, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	2164      	movs	r1, #100	; 0x64
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	3332      	adds	r3, #50	; 0x32
 8007f12:	4a34      	ldr	r2, [pc, #208]	; (8007fe4 <UART_SetConfig+0x4e4>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1e:	441c      	add	r4, r3
 8007f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f24:	2200      	movs	r2, #0
 8007f26:	673b      	str	r3, [r7, #112]	; 0x70
 8007f28:	677a      	str	r2, [r7, #116]	; 0x74
 8007f2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f2e:	4642      	mov	r2, r8
 8007f30:	464b      	mov	r3, r9
 8007f32:	1891      	adds	r1, r2, r2
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	415b      	adcs	r3, r3
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3e:	4641      	mov	r1, r8
 8007f40:	1851      	adds	r1, r2, r1
 8007f42:	6039      	str	r1, [r7, #0]
 8007f44:	4649      	mov	r1, r9
 8007f46:	414b      	adcs	r3, r1
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f56:	4659      	mov	r1, fp
 8007f58:	00cb      	lsls	r3, r1, #3
 8007f5a:	4651      	mov	r1, sl
 8007f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f60:	4651      	mov	r1, sl
 8007f62:	00ca      	lsls	r2, r1, #3
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4642      	mov	r2, r8
 8007f6c:	189b      	adds	r3, r3, r2
 8007f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f70:	464b      	mov	r3, r9
 8007f72:	460a      	mov	r2, r1
 8007f74:	eb42 0303 	adc.w	r3, r2, r3
 8007f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	663b      	str	r3, [r7, #96]	; 0x60
 8007f84:	667a      	str	r2, [r7, #100]	; 0x64
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f92:	4649      	mov	r1, r9
 8007f94:	008b      	lsls	r3, r1, #2
 8007f96:	4641      	mov	r1, r8
 8007f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	008a      	lsls	r2, r1, #2
 8007fa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fa4:	f7f8 f918 	bl	80001d8 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <UART_SetConfig+0x4e4>)
 8007fae:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	2164      	movs	r1, #100	; 0x64
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	3332      	adds	r3, #50	; 0x32
 8007fc0:	4a08      	ldr	r2, [pc, #32]	; (8007fe4 <UART_SetConfig+0x4e4>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	095b      	lsrs	r3, r3, #5
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4422      	add	r2, r4
 8007fd4:	609a      	str	r2, [r3, #8]
}
 8007fd6:	bf00      	nop
 8007fd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe2:	bf00      	nop
 8007fe4:	51eb851f 	.word	0x51eb851f

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4d0d      	ldr	r5, [pc, #52]	; (8008020 <__libc_init_array+0x38>)
 8007fec:	4c0d      	ldr	r4, [pc, #52]	; (8008024 <__libc_init_array+0x3c>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	4d0b      	ldr	r5, [pc, #44]	; (8008028 <__libc_init_array+0x40>)
 8007ffa:	4c0c      	ldr	r4, [pc, #48]	; (800802c <__libc_init_array+0x44>)
 8007ffc:	f000 f82e 	bl	800805c <_init>
 8008000:	1b64      	subs	r4, r4, r5
 8008002:	10a4      	asrs	r4, r4, #2
 8008004:	2600      	movs	r6, #0
 8008006:	42a6      	cmp	r6, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008010:	4798      	blx	r3
 8008012:	3601      	adds	r6, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f855 3b04 	ldr.w	r3, [r5], #4
 800801a:	4798      	blx	r3
 800801c:	3601      	adds	r6, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	0800809c 	.word	0x0800809c
 8008024:	0800809c 	.word	0x0800809c
 8008028:	0800809c 	.word	0x0800809c
 800802c:	080080a0 	.word	0x080080a0

08008030 <memcpy>:
 8008030:	440a      	add	r2, r1
 8008032:	4291      	cmp	r1, r2
 8008034:	f100 33ff 	add.w	r3, r0, #4294967295
 8008038:	d100      	bne.n	800803c <memcpy+0xc>
 800803a:	4770      	bx	lr
 800803c:	b510      	push	{r4, lr}
 800803e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008046:	4291      	cmp	r1, r2
 8008048:	d1f9      	bne.n	800803e <memcpy+0xe>
 800804a:	bd10      	pop	{r4, pc}

0800804c <memset>:
 800804c:	4402      	add	r2, r0
 800804e:	4603      	mov	r3, r0
 8008050:	4293      	cmp	r3, r2
 8008052:	d100      	bne.n	8008056 <memset+0xa>
 8008054:	4770      	bx	lr
 8008056:	f803 1b01 	strb.w	r1, [r3], #1
 800805a:	e7f9      	b.n	8008050 <memset+0x4>

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
