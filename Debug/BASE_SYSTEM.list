
BASE_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080081c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  20000228  080083ec  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  080083ec  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156aa  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c99  00000000  00000000  00035902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a9  00000000  00000000  0003a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dba  00000000  00000000  00051f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009127d  00000000  00000000  00067d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8fd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  000f9020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000228 	.word	0x20000228
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800817c 	.word	0x0800817c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000022c 	.word	0x2000022c
 80001d4:	0800817c 	.word	0x0800817c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ENDEFF_SOFT_RESET>:
#include "ModBusRTU.h"

#define SLAVE_ADDR (0x15<<1) //End Effector Address
uint32_t timestamp;
int complete;
void ENDEFF_SOFT_RESET(I2C_HandleTypeDef *hi2c) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0x00, 0xFF, 0x55, 0xAA };
	if (HAL_GetTick() - timestamp >= 10) {
 80004e4:	f001 fbd4 	bl	8001c90 <HAL_GetTick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	d911      	bls.n	8000518 <ENDEFF_SOFT_RESET+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2304      	movs	r3, #4
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <ENDEFF_SOFT_RESET+0x48>)
 80004fe:	212a      	movs	r1, #42	; 0x2a
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f002 fbe1 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000506:	f001 fbc3 	bl	8001c90 <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 800050e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <ENDEFF_SOFT_RESET+0x4c>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
		return;
 8000516:	bf00      	nop
	}
}
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000244 	.word	0x20000244
 8000524:	20000000 	.word	0x20000000
 8000528:	20000248 	.word	0x20000248

0800052c <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000534:	f001 fbac 	bl	8001c90 <HAL_GetTick>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	2b09      	cmp	r3, #9
 8000542:	d911      	bls.n	8000568 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2302      	movs	r3, #2
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <ENDEFF_TEST_MODE+0x48>)
 800054e:	212a      	movs	r1, #42	; 0x2a
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f002 fbb9 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000556:	f001 fb9b 	bl	8001c90 <HAL_GetTick>
 800055a:	4603      	mov	r3, r0
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800055e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <ENDEFF_TEST_MODE+0x4c>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		return;
 8000566:	bf00      	nop
	}
}
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000244 	.word	0x20000244
 8000574:	20000004 	.word	0x20000004
 8000578:	20000248 	.word	0x20000248

0800057c <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000584:	f001 fb84 	bl	8001c90 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2b09      	cmp	r3, #9
 8000592:	d911      	bls.n	80005b8 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800059e:	212a      	movs	r1, #42	; 0x2a
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fb91 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005a6:	f001 fb73 	bl	8001c90 <HAL_GetTick>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 80005ae:	6013      	str	r3, [r2, #0]
		complete = 1;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
		return;
 80005b6:	bf00      	nop
	}
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000244 	.word	0x20000244
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000248 	.word	0x20000248

080005cc <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80005d4:	f001 fb5c 	bl	8001c90 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	d911      	bls.n	8000608 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80005ee:	212a      	movs	r1, #42	; 0x2a
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f002 fb69 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005f6:	f001 fb4b 	bl	8001c90 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
		return;
 8000606:	bf00      	nop
	}
}
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000244 	.word	0x20000244
 8000614:	2000000c 	.word	0x2000000c
 8000618:	20000248 	.word	0x20000248

0800061c <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8000624:	f001 fb34 	bl	8001c90 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b09      	cmp	r3, #9
 8000632:	d911      	bls.n	8000658 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <ENDEFF_GRIPPER_IDLE+0x48>)
 800063e:	212a      	movs	r1, #42	; 0x2a
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f002 fb41 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000646:	f001 fb23 	bl	8001c90 <HAL_GetTick>
 800064a:	4603      	mov	r3, r0
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800064e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ENDEFF_GRIPPER_IDLE+0x4c>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
		return;
 8000656:	bf00      	nop
	}
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000244 	.word	0x20000244
 8000664:	20000010 	.word	0x20000010
 8000668:	20000248 	.word	0x20000248

0800066c <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8000674:	f001 fb0c 	bl	8001c90 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000684:	d311      	bcc.n	80006aa <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ENDEFF_GRIPPER_PICK+0x48>)
 8000690:	212a      	movs	r1, #42	; 0x2a
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f002 fb18 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000698:	f001 fafa 	bl	8001c90 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 80006a0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <ENDEFF_GRIPPER_PICK+0x4c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
		return;
 80006a8:	bf00      	nop
	}
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000244 	.word	0x20000244
 80006b4:	20000014 	.word	0x20000014
 80006b8:	20000248 	.word	0x20000248

080006bc <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80006c4:	f001 fae4 	bl	8001c90 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006d4:	d311      	bcc.n	80006fa <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <ENDEFF_GRIPPER_PLACE+0x48>)
 80006e0:	212a      	movs	r1, #42	; 0x2a
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 faf0 	bl	8002cc8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80006e8:	f001 fad2 	bl	8001c90 <HAL_GetTick>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006f0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
		return;
 80006f8:	bf00      	nop
	}
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000244 	.word	0x20000244
 8000704:	20000018 	.word	0x20000018
 8000708:	20000248 	.word	0x20000248

0800070c <I2C_TO_BASESYSTEM>:


void I2C_TO_BASESYSTEM(uint16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 8000716:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	f200 810d 	bhi.w	800093a <I2C_TO_BASESYSTEM+0x22e>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <I2C_TO_BASESYSTEM+0x1c>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007eb 	.word	0x080007eb
 8000734:	080008a9 	.word	0x080008a9
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00e      	beq.n	8000762 <I2C_TO_BASESYSTEM+0x56>
			ENDEFF_TEST_MODE(hi2c);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff fef1 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800074a:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80ec 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = TEST;
 8000754:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8000760:	e0e4      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 80de 	beq.w	800092c <I2C_TO_BASESYSTEM+0x220>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8000770:	6838      	ldr	r0, [r7, #0]
 8000772:	f7ff ff2b 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 80d6 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = RUNMODE;
 8000780:	4b70      	ldr	r3, [pc, #448]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000786:	4b70      	ldr	r3, [pc, #448]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e0ce      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10e      	bne.n	80007b8 <I2C_TO_BASESYSTEM+0xac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800079a:	6838      	ldr	r0, [r7, #0]
 800079c:	f7ff feee 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 80c3 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = INIT;
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 80007b6:	e0bb      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 80b5 	beq.w	8000930 <I2C_TO_BASESYSTEM+0x224>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f7ff fed8 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f7ff fefd 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 80aa 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = RUNMODE;
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007de:	2202      	movs	r2, #2
 80007e0:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007e2:	4b59      	ldr	r3, [pc, #356]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		break;
 80007e8:	e0a2      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10e      	bne.n	8000814 <I2C_TO_BASESYSTEM+0x108>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80007f6:	6838      	ldr	r0, [r7, #0]
 80007f8:	f7ff ff10 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f040 8097 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = INIT;
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800080c:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8000812:	e08f      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0001) == 1) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00e      	beq.n	800083e <I2C_TO_BASESYSTEM+0x132>
			ENDEFF_TEST_MODE(hi2c);
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f7ff fe83 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 8082 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = TEST;
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
		break;
 800083c:	e07a      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	2b00      	cmp	r3, #0
 8000848:	d013      	beq.n	8000872 <I2C_TO_BASESYSTEM+0x166>
			ENDEFF_GRIPPER_PICK(hi2c);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff ff0e 	bl	800066c <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8000850:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d16d      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				*DataFrame = 0b0010;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
				picked = 1;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
		break;
 8000870:	e060      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d05a      	beq.n	8000934 <I2C_TO_BASESYSTEM+0x228>
			if (picked == 1) {
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d156      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ff18 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d14f      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
					*DataFrame = 0b0010;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2202      	movs	r2, #2
 8000898:	801a      	strh	r2, [r3, #0]
					complete = 0;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
					picked = 0;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e045      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10d      	bne.n	80008d0 <I2C_TO_BASESYSTEM+0x1c4>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80008b4:	6838      	ldr	r0, [r7, #0]
 80008b6:	f7ff feb1 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d13a      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = INIT;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80008ce:	e033      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b0001) == 1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00d      	beq.n	80008f8 <I2C_TO_BASESYSTEM+0x1ec>
			ENDEFF_TEST_MODE(hi2c);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f7ff fe25 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d126      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = TEST;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e01f      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d019      	beq.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
			ENDEFF_GRIPPER_PLACE(hi2c);
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f7ff fed9 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d112      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				*DataFrame = 0b0010;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2202      	movs	r2, #2
 8000916:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
				picked = 0;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		break;
 800092a:	e005      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		break;
 800092c:	bf00      	nop
 800092e:	e004      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000930:	bf00      	nop
 8000932:	e002      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000934:	bf00      	nop
 8000936:	e000      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000938:	bf00      	nop
	}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000024c 	.word	0x2000024c
 8000948:	20000248 	.word	0x20000248
 800094c:	20000250 	.word	0x20000250

08000950 <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <UARTInterruptConfig+0x14>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <UARTInterruptConfig+0x18>)
 800095a:	f006 fa47 	bl	8006dec <HAL_UART_Receive_IT>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000254 	.word	0x20000254
 8000968:	20000a0c 	.word	0x20000a0c

0800096c <Joystick_Received>:
	LastPos_x = *Position_x;
	LastPos_y = *Position_y;

}

void Joystick_Received(int *receivedByte) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <Joystick_Received+0x140>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <Joystick_Received+0x16>
 800097c:	2b01      	cmp	r3, #1
 800097e:	d009      	beq.n	8000994 <Joystick_Received+0x28>
 8000980:	e08b      	b.n	8000a9a <Joystick_Received+0x12e>
	case (START):
		if (RxBuffer[0] == 69) {
 8000982:	4b4b      	ldr	r3, [pc, #300]	; (8000ab0 <Joystick_Received+0x144>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b45      	cmp	r3, #69	; 0x45
 8000988:	f040 8086 	bne.w	8000a98 <Joystick_Received+0x12c>
			Joy_State = COUNT;
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <Joystick_Received+0x140>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000992:	e081      	b.n	8000a98 <Joystick_Received+0x12c>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8000994:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <Joystick_Received+0x144>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b45      	cmp	r3, #69	; 0x45
 800099a:	d111      	bne.n	80009c0 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e007      	b.n	80009b2 <Joystick_Received+0x46>
				tempData[i] = 0;
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <Joystick_Received+0x148>)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	d9f4      	bls.n	80009a2 <Joystick_Received+0x36>
			}
			count = 0;
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <Joystick_Received+0x14c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
			// All data received
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 80009be:	e06c      	b.n	8000a9a <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <Joystick_Received+0x144>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b47      	cmp	r3, #71	; 0x47
 80009c6:	d115      	bne.n	80009f4 <Joystick_Received+0x88>
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <Joystick_Received+0x14c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d811      	bhi.n	80009f4 <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e007      	b.n	80009e6 <Joystick_Received+0x7a>
				tempData[i] = 0;
 80009d6:	4a37      	ldr	r2, [pc, #220]	; (8000ab4 <Joystick_Received+0x148>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d9f4      	bls.n	80009d6 <Joystick_Received+0x6a>
			count = 0;
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <Joystick_Received+0x14c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e050      	b.n	8000a96 <Joystick_Received+0x12a>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <Joystick_Received+0x144>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b47      	cmp	r3, #71	; 0x47
 80009fa:	d140      	bne.n	8000a7e <Joystick_Received+0x112>
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <Joystick_Received+0x14c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d13c      	bne.n	8000a7e <Joystick_Received+0x112>
			count = 0;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <Joystick_Received+0x14c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <Joystick_Received+0x148>)
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <Joystick_Received+0x148>)
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <Joystick_Received+0x148>)
 8000a1c:	78db      	ldrb	r3, [r3, #3]
 8000a1e:	021a      	lsls	r2, r3, #8
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <Joystick_Received+0x148>)
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	4619      	mov	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <Joystick_Received+0x148>)
 8000a30:	791a      	ldrb	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3308      	adds	r3, #8
 8000a36:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <Joystick_Received+0x148>)
 8000a3a:	795a      	ldrb	r2, [r3, #5]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	330c      	adds	r3, #12
 8000a40:	601a      	str	r2, [r3, #0]
			if(receivedByte[0] > UINT16_MAX/2) receivedByte[0] -= UINT16_MAX + 1;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a4a:	db06      	blt.n	8000a5a <Joystick_Received+0xee>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e00d      	b.n	8000a76 <Joystick_Received+0x10a>
			else if(receivedByte[1] > UINT16_MAX/2) receivedByte[1] -= UINT16_MAX + 1;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a64:	db07      	blt.n	8000a76 <Joystick_Received+0x10a>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000a74:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <Joystick_Received+0x140>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e00b      	b.n	8000a96 <Joystick_Received+0x12a>
			tempData[count] = RxBuffer[0];
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <Joystick_Received+0x14c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <Joystick_Received+0x144>)
 8000a84:	7811      	ldrb	r1, [r2, #0]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <Joystick_Received+0x148>)
 8000a88:	54d1      	strb	r1, [r2, r3]
			count++;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <Joystick_Received+0x14c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <Joystick_Received+0x14c>)
 8000a92:	6013      	str	r3, [r2, #0]
		break;
 8000a94:	e001      	b.n	8000a9a <Joystick_Received+0x12e>
 8000a96:	e000      	b.n	8000a9a <Joystick_Received+0x12e>
		break;
 8000a98:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <Joystick_Received+0x144>)
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <Joystick_Received+0x150>)
 8000aa0:	f006 f9a4 	bl	8006dec <HAL_UART_Receive_IT>
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000255 	.word	0x20000255
 8000ab0:	20000254 	.word	0x20000254
 8000ab4:	20000258 	.word	0x20000258
 8000ab8:	20000260 	.word	0x20000260
 8000abc:	20000a0c 	.word	0x20000a0c

08000ac0 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <modbus_1t5_Timeout+0x1c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2201      	movs	r2, #1
 8000ace:	751a      	strb	r2, [r3, #20]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000264 	.word	0x20000264

08000ae0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <modbus_3t5_Timeout+0x1c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2201      	movs	r2, #1
 8000aee:	755a      	strb	r2, [r3, #21]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000264 	.word	0x20000264

08000b00 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000b1a:	1c59      	adds	r1, r3, #1
 8000b1c:	b289      	uxth	r1, r1
 8000b1e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000b22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b26:	d210      	bcs.n	8000b4a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68d8      	ldr	r0, [r3, #12]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000b3a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000b3e:	4413      	add	r3, r2
 8000b40:	3302      	adds	r3, #2
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	f006 f951 	bl	8006dec <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <modbus_UART_Recived+0x60>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000264 	.word	0x20000264

08000b64 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <Modbus_init+0x9c>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <Modbus_init+0x9c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <Modbus_init+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <Modbus_init+0xa0>)
 8000b84:	2114      	movs	r1, #20
 8000b86:	4618      	mov	r0, r3
 8000b88:	f005 fc3c 	bl	8006404 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <Modbus_init+0x9c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <Modbus_init+0xa4>)
 8000b94:	210e      	movs	r1, #14
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fc34 	bl	8006404 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <Modbus_init+0x9c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <Modbus_init+0xa8>)
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 f878 	bl	8006c9c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <Modbus_init+0x9c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68d8      	ldr	r0, [r3, #12]
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <Modbus_init+0x9c>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <Modbus_init+0x9c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000bbe:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f006 f90f 	bl	8006dec <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <Modbus_init+0x9c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d10c      	bne.n	8000bf8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <Modbus_init+0x9c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 f88f 	bl	8005d08 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <Modbus_init+0x9c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 f9b8 	bl	8005f68 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000264 	.word	0x20000264
 8000c04:	08000ac1 	.word	0x08000ac1
 8000c08:	08000ae1 	.word	0x08000ae1
 8000c0c:	08000b01 	.word	0x08000b01

08000c10 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000c1c:	23ff      	movs	r3, #255	; 0xff
 8000c1e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000c20:	23ff      	movs	r3, #255	; 0xff
 8000c22:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000c24:	e013      	b.n	8000c4e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	4053      	eors	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <CRC16+0x64>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	4053      	eors	r3, r2
 8000c42:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <CRC16+0x68>)
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	803a      	strh	r2, [r7, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e6      	bne.n	8000c26 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29b      	uxth	r3, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	2000011c 	.word	0x2000011c
 8000c78:	2000001c 	.word	0x2000001c

08000c7c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000c82:	4b81      	ldr	r3, [pc, #516]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	7e1b      	ldrb	r3, [r3, #24]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80a      	bhi.n	8000ca4 <Modbus_Protocal_Worker+0x28>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <Modbus_Protocal_Worker+0x18>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000caf 	.word	0x08000caf
 8000c98:	08000e4f 	.word	0x08000e4f
 8000c9c:	08000d3b 	.word	0x08000d3b
 8000ca0:	08000d61 	.word	0x08000d61
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000ca4:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	761a      	strb	r2, [r3, #24]
		break;
 8000cac:	e0e8      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000cae:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000cba:	f000 f9dd 	bl	8001078 <Modbus_Emission>
 8000cbe:	e01c      	b.n	8000cfa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000cc0:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d017      	beq.n	8000cfa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000cca:	4b6f      	ldr	r3, [pc, #444]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000cda:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0201 	orr.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b20      	cmp	r3, #32
 8000d08:	f040 80b3 	bne.w	8000e72 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000d0c:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68d8      	ldr	r0, [r3, #12]
 8000d1c:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b59      	ldr	r3, [pc, #356]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000d28:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	f006 f85a 	bl	8006dec <HAL_UART_Receive_IT>
		}
		break;
 8000d38:	e09b      	b.n	8000e72 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	7d1b      	ldrb	r3, [r3, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8098 	beq.w	8000e76 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000d46:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000d4e:	4b4e      	ldr	r3, [pc, #312]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	22fe      	movs	r2, #254	; 0xfe
 8000d54:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000d5e:	e08a      	b.n	8000e76 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	7d9b      	ldrb	r3, [r3, #22]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d009      	beq.n	8000d7e <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000d86:	f113 0f02 	cmn.w	r3, #2
 8000d8a:	d150      	bne.n	8000e2e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000d94:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f203 2272 	addw	r2, r3, #626	; 0x272
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f7ff ff31 	bl	8000c10 <CRC16>
 8000dae:	4603      	mov	r3, r0
 8000db0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000db2:	793a      	ldrb	r2, [r7, #4]
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000dc0:	3b02      	subs	r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d10c      	bne.n	8000de6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000dcc:	797a      	ldrb	r2, [r7, #5]
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	440b      	add	r3, r1
 8000dde:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d004      	beq.n	8000df0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	75da      	strb	r2, [r3, #23]
				break;
 8000dee:	e047      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d113      	bne.n	8000e2a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000e12:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000e1c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f007 f996 	bl	8008150 <memcpy>

			//execute command
			Modbus_frame_response();
 8000e24:	f000 f910 	bl	8001048 <Modbus_frame_response>
 8000e28:	e001      	b.n	8000e2e <Modbus_Protocal_Worker+0x1b2>
				break;
 8000e2a:	bf00      	nop
					}
		break;


	}
}
 8000e2c:	e028      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	7d5b      	ldrb	r3, [r3, #21]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d020      	beq.n	8000e7a <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 f87e 	bl	8006f48 <HAL_UART_AbortReceive>
		break;
 8000e4c:	e015      	b.n	8000e7a <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	d10f      	bne.n	8000e7e <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <Modbus_Protocal_Worker+0x20c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	761a      	strb	r2, [r3, #24]
		break;
 8000e70:	e005      	b.n	8000e7e <Modbus_Protocal_Worker+0x202>
		break;
 8000e72:	bf00      	nop
 8000e74:	e004      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
		break;
 8000e76:	bf00      	nop
 8000e78:	e002      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
		break;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <Modbus_Protocal_Worker+0x204>
		break;
 8000e7e:	bf00      	nop
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000264 	.word	0x20000264

08000e8c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <modbusWrite1Register+0x80>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7e9b      	ldrb	r3, [r3, #26]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	021b      	lsls	r3, r3, #8
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	7edb      	ldrb	r3, [r3, #27]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <modbusWrite1Register+0x80>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d903      	bls.n	8000ebe <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f000 f8a4 	bl	8001004 <ModbusErrorReply>
			 return;
 8000ebc:	e023      	b.n	8000f06 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	440b      	add	r3, r1
 8000ece:	7f12      	ldrb	r2, [r2, #28]
 8000ed0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	440b      	add	r3, r1
 8000ee2:	7f52      	ldrb	r2, [r2, #29]
 8000ee4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <modbusWrite1Register+0x80>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f007 f92a 	bl	8008150 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <modbusWrite1Register+0x80>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000264 	.word	0x20000264

08000f10 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000f16:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <modbusRead1Register+0xf0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <modbusRead1Register+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7f5b      	ldrb	r3, [r3, #29]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <modbusRead1Register+0xf0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	7e9b      	ldrb	r3, [r3, #26]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <modbusRead1Register+0xf0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	7edb      	ldrb	r3, [r3, #27]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <modbusRead1Register+0x42>
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	2b7d      	cmp	r3, #125	; 0x7d
 8000f50:	d903      	bls.n	8000f5a <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f856 	bl	8001004 <ModbusErrorReply>
		 return;
 8000f58:	e04e      	b.n	8000ff8 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000f5a:	88ba      	ldrh	r2, [r7, #4]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <modbusRead1Register+0xf0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d808      	bhi.n	8000f78 <modbusRead1Register+0x68>
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <modbusRead1Register+0xf0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d903      	bls.n	8000f80 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 f843 	bl	8001004 <ModbusErrorReply>
		 return;
 8000f7e:	e03b      	b.n	8000ff8 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <modbusRead1Register+0xf0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <modbusRead1Register+0xf0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0052      	lsls	r2, r2, #1
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	e020      	b.n	8000fe0 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <modbusRead1Register+0xf0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	4423      	add	r3, r4
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	18d1      	adds	r1, r2, r3
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <modbusRead1Register+0xf0>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	1c63      	adds	r3, r4, #1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	7849      	ldrb	r1, [r1, #1]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	460a      	mov	r2, r1
 8000fba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <modbusRead1Register+0xf0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	4423      	add	r3, r4
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	18d1      	adds	r1, r2, r3
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <modbusRead1Register+0xf0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	0063      	lsls	r3, r4, #1
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	7809      	ldrb	r1, [r1, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	460a      	mov	r2, r1
 8000fda:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000fde:	3401      	adds	r4, #1
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	dbdb      	blt.n	8000f9e <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <modbusRead1Register+0xf0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000264 	.word	0x20000264

08001004 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <ModbusErrorReply+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	7e5a      	ldrb	r2, [r3, #25]
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <ModbusErrorReply+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <ModbusErrorReply+0x40>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <ModbusErrorReply+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000264 	.word	0x20000264

08001048 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <Modbus_frame_response+0x2c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	7e5b      	ldrb	r3, [r3, #25]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d004      	beq.n	8001060 <Modbus_frame_response+0x18>
 8001056:	2b06      	cmp	r3, #6
 8001058:	d105      	bne.n	8001066 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800105a:	f7ff ff17 	bl	8000e8c <modbusWrite1Register>
		break;
 800105e:	e006      	b.n	800106e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001060:	f7ff ff56 	bl	8000f10 <modbusRead1Register>
		break;
 8001064:	e003      	b.n	800106e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff ffcc 	bl	8001004 <ModbusErrorReply>
		break;
 800106c:	bf00      	nop

	}
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000264 	.word	0x20000264

08001078 <Modbus_Emission>:

void Modbus_Emission()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <Modbus_Emission+0xfc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b20      	cmp	r3, #32
 800108c:	d15e      	bne.n	800114c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <Modbus_Emission+0xfc>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <Modbus_Emission+0xfc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <Modbus_Emission+0xfc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80010a4:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <Modbus_Emission+0xfc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <Modbus_Emission+0xfc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80010b6:	461a      	mov	r2, r3
 80010b8:	f007 f84a 	bl	8008150 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <Modbus_Emission+0xfc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <Modbus_Emission+0xfc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3203      	adds	r2, #3
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <Modbus_Emission+0xfc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <Modbus_Emission+0xfc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80010e2:	3b02      	subs	r3, #2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f7ff fd92 	bl	8000c10 <CRC16>
 80010ec:	4603      	mov	r3, r0
 80010ee:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <Modbus_Emission+0xfc>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <Modbus_Emission+0xfc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80010fc:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80010fe:	7939      	ldrb	r1, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	460a      	mov	r2, r1
 8001104:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <Modbus_Emission+0xfc>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <Modbus_Emission+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001114:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001116:	7979      	ldrb	r1, [r7, #5]
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <Modbus_Emission+0xfc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b20      	cmp	r3, #32
 800112e:	d10d      	bne.n	800114c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <Modbus_Emission+0xfc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <Modbus_Emission+0xfc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <Modbus_Emission+0xfc>)
 8001140:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001142:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001146:	461a      	mov	r2, r3
 8001148:	f005 fe80 	bl	8006e4c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <Modbus_Emission+0xfc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <Modbus_Emission+0xfc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <Modbus_Emission+0xfc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <Modbus_Emission+0xfc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000264 	.word	0x20000264

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_DMA_Init+0x68>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <MX_DMA_Init+0x68>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_DMA_Init+0x68>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_DMA_Init+0x68>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <MX_DMA_Init+0x68>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_DMA_Init+0x68>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2011      	movs	r0, #17
 80011bc:	f000 fe4f 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011c0:	2011      	movs	r0, #17
 80011c2:	f000 fe68 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2046      	movs	r0, #70	; 0x46
 80011cc:	f000 fe47 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011d0:	2046      	movs	r0, #70	; 0x46
 80011d2:	f000 fe60 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <MX_GPIO_Init+0xd0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001270:	f001 fbcc 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_GPIO_Init+0xd8>)
 800128c:	f001 fa3a 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_GPIO_Init+0xd4>)
 80012a8:	f001 fa2c 	bl	8002704 <HAL_GPIO_Init>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020800 	.word	0x40020800

080012c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 fb9f 	bl	8002a40 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 f9c0 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000268 	.word	0x20000268
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_I2C_MspInit+0xa4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d13b      	bne.n	80013b6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136a:	2304      	movs	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <HAL_I2C_MspInit+0xac>)
 8001376:	f001 f9c5 	bl	8002704 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_I2C_MspInit+0xa8>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201f      	movs	r0, #31
 800139c:	f000 fd5f 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013a0:	201f      	movs	r0, #31
 80013a2:	f000 fd78 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2020      	movs	r0, #32
 80013ac:	f000 fd57 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 fd70 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fbf7 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f8dd 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f7ff ff03 	bl	80011e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013de:	f7ff fecb 	bl	8001178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013e2:	f000 faa9 	bl	8001938 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80013e6:	f000 fa01 	bl	80017ec <MX_TIM11_Init>
  MX_I2C1_Init();
 80013ea:	f7ff ff69 	bl	80012c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013ee:	f000 fa79 	bl	80018e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <main+0x18c>)
 80013f4:	4a59      	ldr	r2, [pc, #356]	; (800155c <main+0x190>)
 80013f6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <main+0x18c>)
 80013fa:	4a59      	ldr	r2, [pc, #356]	; (8001560 <main+0x194>)
 80013fc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80013fe:	4b56      	ldr	r3, [pc, #344]	; (8001558 <main+0x18c>)
 8001400:	2215      	movs	r2, #21
 8001402:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <main+0x18c>)
 8001406:	22c8      	movs	r2, #200	; 0xc8
 8001408:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800140a:	4956      	ldr	r1, [pc, #344]	; (8001564 <main+0x198>)
 800140c:	4852      	ldr	r0, [pc, #328]	; (8001558 <main+0x18c>)
 800140e:	f7ff fba9 	bl	8000b64 <Modbus_init>
  UARTInterruptConfig();
 8001412:	f7ff fa9d 	bl	8000950 <UARTInterruptConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001416:	f7ff fc31 	bl	8000c7c <Modbus_Protocal_Worker>
	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() >= timestamp){
 800141a:	f000 fc39 	bl	8001c90 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <main+0x19c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d309      	bcc.n	800143c <main+0x70>
	  	timestamp = HAL_GetTick() + 200;
 8001428:	f000 fc32 	bl	8001c90 <HAL_GetTick>
 800142c:	4603      	mov	r3, r0
 800142e:	33c8      	adds	r3, #200	; 0xc8
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <main+0x19c>)
 8001432:	6013      	str	r3, [r2, #0]
	  	registerFrame[00].U16 = 22881;
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <main+0x198>)
 8001436:	f645 1261 	movw	r2, #22881	; 0x5961
 800143a:	801a      	strh	r2, [r3, #0]
//		HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//	  decimalToBinary(registerFrame[2].U16,Data);
//	  	Transmit_To_Basesystem(&registerFrame[2].U16,&hi2c1);
	  }
	  I2C_TO_BASESYSTEM(&registerFrame[2].U16,&hi2c1);
 800143c:	494b      	ldr	r1, [pc, #300]	; (800156c <main+0x1a0>)
 800143e:	484c      	ldr	r0, [pc, #304]	; (8001570 <main+0x1a4>)
 8001440:	f7ff f964 	bl	800070c <I2C_TO_BASESYSTEM>
//		  }
//		  registerFrame[2].U16 = Result;
//		  flag = 0;
//	  }

 	  if(reset == 1)
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <main+0x1a8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d114      	bne.n	8001476 <main+0xaa>
	  {
		  ENDEFF_SOFT_RESET(&hi2c1);
 800144c:	4847      	ldr	r0, [pc, #284]	; (800156c <main+0x1a0>)
 800144e:	f7ff f845 	bl	80004dc <ENDEFF_SOFT_RESET>
		  reset = 0;
 8001452:	4b48      	ldr	r3, [pc, #288]	; (8001574 <main+0x1a8>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
		  start = 0;
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <main+0x1ac>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
		  test = 0;
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <main+0x1b0>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
		  pick = 0;
 8001464:	4b46      	ldr	r3, [pc, #280]	; (8001580 <main+0x1b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
		  place = 0;
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <main+0x1b8>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
		  stoptest = 0;
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <main+0x1bc>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
//		  flag = 1;
	  }
	  if(test == 1)
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <main+0x1b0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10f      	bne.n	800149e <main+0xd2>
	  {
		  ENDEFF_TEST_MODE(&hi2c1);
 800147e:	483b      	ldr	r0, [pc, #236]	; (800156c <main+0x1a0>)
 8001480:	f7ff f854 	bl	800052c <ENDEFF_TEST_MODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	4a3f      	ldr	r2, [pc, #252]	; (800158c <main+0x1c0>)
 800148e:	212a      	movs	r1, #42	; 0x2a
 8001490:	4836      	ldr	r0, [pc, #216]	; (800156c <main+0x1a0>)
 8001492:	f001 fd17 	bl	8002ec4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  test = 0;
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <main+0x1b0>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e7bb      	b.n	8001416 <main+0x4a>
//		  flag = 1;
	  }
	  else if(stoptest == 1)
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <main+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d10f      	bne.n	80014c6 <main+0xfa>
	  {
		  ENDEFF_TEST_MODE_QUIT(&hi2c1);
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <main+0x1a0>)
 80014a8:	f7ff f868 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	4a35      	ldr	r2, [pc, #212]	; (800158c <main+0x1c0>)
 80014b6:	212a      	movs	r1, #42	; 0x2a
 80014b8:	482c      	ldr	r0, [pc, #176]	; (800156c <main+0x1a0>)
 80014ba:	f001 fd03 	bl	8002ec4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stoptest = 0;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <main+0x1bc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e7a7      	b.n	8001416 <main+0x4a>
//		  flag = 1;
	  }
	  else if(start == 1)
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <main+0x1ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10f      	bne.n	80014ee <main+0x122>
	  {
		  ENDEFF_GRIPPER_RUNMODE(&hi2c1);
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <main+0x1a0>)
 80014d0:	f7ff f87c 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <main+0x1c0>)
 80014de:	212a      	movs	r1, #42	; 0x2a
 80014e0:	4822      	ldr	r0, [pc, #136]	; (800156c <main+0x1a0>)
 80014e2:	f001 fcef 	bl	8002ec4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  start = 0;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <main+0x1ac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e793      	b.n	8001416 <main+0x4a>
//		  flag = 1;
	  }
	  else if(pick == 1)
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <main+0x1b4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10f      	bne.n	8001516 <main+0x14a>
	  {
		  ENDEFF_GRIPPER_PICK(&hi2c1);
 80014f6:	481d      	ldr	r0, [pc, #116]	; (800156c <main+0x1a0>)
 80014f8:	f7ff f8b8 	bl	800066c <ENDEFF_GRIPPER_PICK>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <main+0x1c0>)
 8001506:	212a      	movs	r1, #42	; 0x2a
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <main+0x1a0>)
 800150a:	f001 fcdb 	bl	8002ec4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  pick = 0;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <main+0x1b4>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e77f      	b.n	8001416 <main+0x4a>
//		  flag = 1;
	  }
	  else if(place == 1)
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <main+0x1b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d106      	bne.n	800152c <main+0x160>
	  {
		  ENDEFF_GRIPPER_PLACE(&hi2c1);
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <main+0x1a0>)
 8001520:	f7ff f8cc 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
		  place = 0;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0x1b8>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e774      	b.n	8001416 <main+0x4a>
//		  flag = 1;
	  }
	  else if(stop == 1)
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <main+0x1c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	f47f af70 	bne.w	8001416 <main+0x4a>
	  {
		  ENDEFF_GRIPPER_IDLE(&hi2c1);
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <main+0x1a0>)
 8001538:	f7ff f870 	bl	800061c <ENDEFF_GRIPPER_IDLE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <main+0x1c0>)
 8001546:	212a      	movs	r1, #42	; 0x2a
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <main+0x1a0>)
 800154a:	f001 fcbb 	bl	8002ec4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stop = 0;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <main+0x1c4>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  {
 8001554:	e75f      	b.n	8001416 <main+0x4a>
 8001556:	bf00      	nop
 8001558:	200002bc 	.word	0x200002bc
 800155c:	20000a80 	.word	0x20000a80
 8001560:	20000958 	.word	0x20000958
 8001564:	20000794 	.word	0x20000794
 8001568:	20000954 	.word	0x20000954
 800156c:	20000268 	.word	0x20000268
 8001570:	20000798 	.word	0x20000798
 8001574:	20000924 	.word	0x20000924
 8001578:	20000928 	.word	0x20000928
 800157c:	20000938 	.word	0x20000938
 8001580:	2000092c 	.word	0x2000092c
 8001584:	20000930 	.word	0x20000930
 8001588:	2000093c 	.word	0x2000093c
 800158c:	20000940 	.word	0x20000940
 8001590:	20000934 	.word	0x20000934

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 fde2 	bl	800816c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <SystemClock_Config+0xc8>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <SystemClock_Config+0xc8>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <SystemClock_Config+0xc8>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <SystemClock_Config+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <SystemClock_Config+0xcc>)
 80015de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <SystemClock_Config+0xcc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001604:	2304      	movs	r3, #4
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fe81 	bl	8005320 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001624:	f000 f832 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2103      	movs	r1, #3
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f8e3 	bl	8005810 <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001650:	f000 f81c 	bl	800168c <Error_Handler>
  }
}
 8001654:	bf00      	nop
 8001656:	3750      	adds	r7, #80	; 0x50
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000

08001664 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_UART_RxCpltCallback+0x20>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d102      	bne.n	800167a <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received(&receivedByte);
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <HAL_UART_RxCpltCallback+0x24>)
 8001676:	f7ff f979 	bl	800096c <Joystick_Received>
	}
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000a0c 	.word	0x20000a0c
 8001688:	20000944 	.word	0x20000944

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016d6:	2007      	movs	r0, #7
 80016d8:	f000 fbb6 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 fa98 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Stream6_IRQHandler+0x10>)
 8001742:	f000 fd5b 	bl	80021fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000b54 	.word	0x20000b54

08001750 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001756:	f004 fc6d 	bl	8006034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000958 	.word	0x20000958

08001764 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <I2C1_EV_IRQHandler+0x10>)
 800176a:	f001 fdd1 	bl	8003310 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000268 	.word	0x20000268

08001778 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <I2C1_ER_IRQHandler+0x10>)
 800177e:	f001 ff38 	bl	80035f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000268 	.word	0x20000268

0800178c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART1_IRQHandler+0x10>)
 8001792:	f005 fc7d 	bl	8007090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a0c 	.word	0x20000a0c

080017a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <USART2_IRQHandler+0x10>)
 80017a6:	f005 fc73 	bl	8007090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000a80 	.word	0x20000a80

080017b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA2_Stream7_IRQHandler+0x10>)
 80017ba:	f000 fd1f 	bl	80021fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000af4 	.word	0x20000af4

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_TIM11_Init+0xa0>)
 8001806:	4a22      	ldr	r2, [pc, #136]	; (8001890 <MX_TIM11_Init+0xa4>)
 8001808:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_TIM11_Init+0xa0>)
 800180c:	2263      	movs	r2, #99	; 0x63
 800180e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_TIM11_Init+0xa0>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM11_Init+0xa0>)
 8001818:	f240 72d5 	movw	r2, #2005	; 0x7d5
 800181c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM11_Init+0xa0>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM11_Init+0xa0>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM11_Init+0xa0>)
 800182c:	f004 fa10 	bl	8005c50 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001836:	f7ff ff29 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800183a:	4814      	ldr	r0, [pc, #80]	; (800188c <MX_TIM11_Init+0xa0>)
 800183c:	f004 fac6 	bl	8005dcc <HAL_TIM_OC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001846:	f7ff ff21 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800184a:	2108      	movs	r1, #8
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <MX_TIM11_Init+0xa0>)
 800184e:	f004 fb23 	bl	8005e98 <HAL_TIM_OnePulse_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001858:	f7ff ff18 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800185c:	2310      	movs	r3, #16
 800185e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001860:	f240 5399 	movw	r3, #1433	; 0x599
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM11_Init+0xa0>)
 8001876:	f004 fd05 	bl	8006284 <HAL_TIM_OC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001880:	f7ff ff04 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000958 	.word	0x20000958
 8001890:	40014800 	.word	0x40014800

08001894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_TIM_Base_MspInit+0x48>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d115      	bne.n	80018d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_TIM_Base_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_TIM_Base_MspInit+0x4c>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_TIM_Base_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	201a      	movs	r0, #26
 80018c8:	f000 fac9 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018cc:	201a      	movs	r0, #26
 80018ce:	f000 fae2 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40014800 	.word	0x40014800
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART1_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x4c>)
 800191c:	f005 f964 	bl	8006be8 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001926:	f7ff feb1 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000a0c 	.word	0x20000a0c
 8001934:	40011000 	.word	0x40011000

08001938 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_USART2_UART_Init+0x50>)
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <MX_USART2_UART_Init+0x54>)
 8001940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART2_UART_Init+0x50>)
 8001944:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART2_UART_Init+0x50>)
 800194c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001950:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_USART2_UART_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART2_UART_Init+0x50>)
 800195a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART2_UART_Init+0x50>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART2_UART_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART2_UART_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART2_UART_Init+0x50>)
 8001974:	f005 f938 	bl	8006be8 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800197e:	f7ff fe85 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000a80 	.word	0x20000a80
 800198c:	40004400 	.word	0x40004400

08001990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <HAL_UART_MspInit+0x1c0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d163      	bne.n	8001a7a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a5f      	ldr	r2, [pc, #380]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4854      	ldr	r0, [pc, #336]	; (8001b58 <HAL_UART_MspInit+0x1c8>)
 8001a08:	f000 fe7c 	bl	8002704 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a0e:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_UART_MspInit+0x1d0>)
 8001a10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a12:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1a:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a20:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a3a:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a40:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a46:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a4c:	4843      	ldr	r0, [pc, #268]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a4e:	f000 fa3d 	bl	8001ecc <HAL_DMA_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a58:	f7ff fe18 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
 8001a62:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2025      	movs	r0, #37	; 0x25
 8001a6e:	f000 f9f6 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a72:	2025      	movs	r0, #37	; 0x25
 8001a74:	f000 fa0f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a78:	e066      	b.n	8001b48 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a39      	ldr	r2, [pc, #228]	; (8001b64 <HAL_UART_MspInit+0x1d4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d161      	bne.n	8001b48 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_UART_MspInit+0x1c4>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001abc:	230c      	movs	r3, #12
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001acc:	2307      	movs	r3, #7
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4820      	ldr	r0, [pc, #128]	; (8001b58 <HAL_UART_MspInit+0x1c8>)
 8001ad8:	f000 fe14 	bl	8002704 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_UART_MspInit+0x1dc>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001aec:	2240      	movs	r2, #64	; 0x40
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b1c:	4812      	ldr	r0, [pc, #72]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b1e:	f000 f9d5 	bl	8001ecc <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001b28:	f7ff fdb0 	bl	800168c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2026      	movs	r0, #38	; 0x26
 8001b3e:	f000 f98e 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b42:	2026      	movs	r0, #38	; 0x26
 8001b44:	f000 f9a7 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	20000af4 	.word	0x20000af4
 8001b60:	400264b8 	.word	0x400264b8
 8001b64:	40004400 	.word	0x40004400
 8001b68:	20000b54 	.word	0x20000b54
 8001b6c:	400260a0 	.word	0x400260a0

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b8c:	4c0b      	ldr	r4, [pc, #44]	; (8001bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b9a:	f7ff fe15 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f006 fab3 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7ff fc13 	bl	80013cc <main>
  bx  lr    
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001bb4:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 8001bb8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001bbc:	20000bb8 	.word	0x20000bb8

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_Init+0x40>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_Init+0x40>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x40>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 f92b 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fd4e 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f943 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f90b 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	20000224 	.word	0x20000224
 8001c64:	20000220 	.word	0x20000220

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000224 	.word	0x20000224
 8001c8c:	20000bb4 	.word	0x20000bb4

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000bb4 	.word	0x20000bb4

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff feda 	bl	8001c90 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e099      	b.n	800201c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f08:	e00f      	b.n	8001f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0a:	f7ff fec1 	bl	8001c90 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d908      	bls.n	8001f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e078      	b.n	800201c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1e8      	bne.n	8001f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_DMA_Init+0x158>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d107      	bne.n	8001f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0307 	bic.w	r3, r3, #7
 8001faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d117      	bne.n	8001fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fb1b 	bl	800260c <DMA_CheckFifoParam>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fea:	2301      	movs	r3, #1
 8001fec:	e016      	b.n	800201c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fad2 	bl	80025a0 <DMA_CalcBaseAndBitshift>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	223f      	movs	r2, #63	; 0x3f
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	f010803f 	.word	0xf010803f

08002028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_DMA_Start_IT+0x26>
 800204a:	2302      	movs	r3, #2
 800204c:	e040      	b.n	80020d0 <HAL_DMA_Start_IT+0xa8>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d12f      	bne.n	80020c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2202      	movs	r2, #2
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa64 	bl	8002544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	409a      	lsls	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0216 	orr.w	r2, r2, #22
 8002096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0208 	orr.w	r2, r2, #8
 80020ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e005      	b.n	80020ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
 80020cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020e6:	f7ff fdd3 	bl	8001c90 <HAL_GetTick>
 80020ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e052      	b.n	80021b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0216 	bic.w	r2, r2, #22
 8002118:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002128:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_DMA_Abort+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0208 	bic.w	r2, r2, #8
 8002148:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215a:	e013      	b.n	8002184 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215c:	f7ff fd98 	bl	8001c90 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b05      	cmp	r3, #5
 8002168:	d90c      	bls.n	8002184 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e015      	b.n	80021b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e4      	bne.n	800215c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	223f      	movs	r2, #63	; 0x3f
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00c      	b.n	80021f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2205      	movs	r2, #5
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002208:	4b8e      	ldr	r3, [pc, #568]	; (8002444 <HAL_DMA_IRQHandler+0x248>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8e      	ldr	r2, [pc, #568]	; (8002448 <HAL_DMA_IRQHandler+0x24c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2208      	movs	r2, #8
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2208      	movs	r2, #8
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2201      	movs	r2, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2201      	movs	r2, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f043 0202 	orr.w	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	2204      	movs	r2, #4
 80022a4:	409a      	lsls	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2204      	movs	r2, #4
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2210      	movs	r2, #16
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d043      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03c      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2210      	movs	r2, #16
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d018      	beq.n	800233e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d024      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e01f      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01b      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e016      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2220      	movs	r2, #32
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 808f 	beq.w	800249c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8087 	beq.w	800249c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2220      	movs	r2, #32
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d136      	bne.n	8002414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0216 	bic.w	r2, r2, #22
 80023b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x1da>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0208 	bic.w	r2, r2, #8
 80023e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	223f      	movs	r2, #63	; 0x3f
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07e      	beq.n	8002508 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
        }
        return;
 8002412:	e079      	b.n	8002508 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01d      	beq.n	800245e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10d      	bne.n	800244c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	2b00      	cmp	r3, #0
 8002436:	d031      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e02c      	b.n	800249c <HAL_DMA_IRQHandler+0x2a0>
 8002442:	bf00      	nop
 8002444:	2000021c 	.word	0x2000021c
 8002448:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e01e      	b.n	800249c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10f      	bne.n	800248c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0210 	bic.w	r2, r2, #16
 800247a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d032      	beq.n	800250a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2205      	movs	r2, #5
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d307      	bcc.n	80024e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f2      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x2cc>
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e000      	b.n	800250a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002508:	bf00      	nop
    }
  }
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251e:	b2db      	uxtb	r3, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d108      	bne.n	8002584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002582:	e007      	b.n	8002594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	60da      	str	r2, [r3, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3b10      	subs	r3, #16
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <DMA_CalcBaseAndBitshift+0x64>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <DMA_CalcBaseAndBitshift+0x68>)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d909      	bls.n	80025e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	1d1a      	adds	r2, r3, #4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	659a      	str	r2, [r3, #88]	; 0x58
 80025e0:	e007      	b.n	80025f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	aaaaaaab 	.word	0xaaaaaaab
 8002608:	080081ac 	.word	0x080081ac

0800260c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d11f      	bne.n	8002666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d856      	bhi.n	80026da <DMA_CheckFifoParam+0xce>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <DMA_CheckFifoParam+0x28>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	08002657 	.word	0x08002657
 800263c:	08002645 	.word	0x08002645
 8002640:	080026db 	.word	0x080026db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d046      	beq.n	80026de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002654:	e043      	b.n	80026de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800265e:	d140      	bne.n	80026e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002664:	e03d      	b.n	80026e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	d121      	bne.n	80026b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d837      	bhi.n	80026e6 <DMA_CheckFifoParam+0xda>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <DMA_CheckFifoParam+0x70>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	0800268d 	.word	0x0800268d
 8002680:	08002693 	.word	0x08002693
 8002684:	0800268d 	.word	0x0800268d
 8002688:	080026a5 	.word	0x080026a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e030      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d025      	beq.n	80026ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a2:	e022      	b.n	80026ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ac:	d11f      	bne.n	80026ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026b2:	e01c      	b.n	80026ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d903      	bls.n	80026c2 <DMA_CheckFifoParam+0xb6>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d003      	beq.n	80026c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026c0:	e018      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
      break;
 80026c6:	e015      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e00b      	b.n	80026f2 <DMA_CheckFifoParam+0xe6>
      break;
 80026da:	bf00      	nop
 80026dc:	e00a      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e008      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e006      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
 80026e8:	e004      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
 80026ec:	e002      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ee:	bf00      	nop
 80026f0:	e000      	b.n	80026f4 <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
    }
  } 
  
  return status; 
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e159      	b.n	80029d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002720:	2201      	movs	r2, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	f040 8148 	bne.w	80029ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d005      	beq.n	8002756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002752:	2b02      	cmp	r3, #2
 8002754:	d130      	bne.n	80027b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0201 	and.w	r2, r3, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d017      	beq.n	80027f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d123      	bne.n	8002848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	08da      	lsrs	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3208      	adds	r2, #8
 8002808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	220f      	movs	r2, #15
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80a2 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002898:	6453      	str	r3, [r2, #68]	; 0x44
 800289a:	4b54      	ldr	r3, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a6:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x202>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <HAL_GPIO_Init+0x2f4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x1fe>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a47      	ldr	r2, [pc, #284]	; (80029fc <HAL_GPIO_Init+0x2f8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a46      	ldr	r2, [pc, #280]	; (8002a00 <HAL_GPIO_Init+0x2fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x1f6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <HAL_GPIO_Init+0x300>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x1f2>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x204>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x204>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x204>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x204>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x204>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_GPIO_Init+0x304>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <HAL_GPIO_Init+0x304>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_GPIO_Init+0x304>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_GPIO_Init+0x304>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_GPIO_Init+0x304>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f aea2 	bls.w	8002720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40013c00 	.word	0x40013c00

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e12b      	b.n	8002caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe fc58 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	; 0x24
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f003 f8ac 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a81      	ldr	r2, [pc, #516]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d807      	bhi.n	8002ac4 <HAL_I2C_Init+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a80      	ldr	r2, [pc, #512]	; (8002cb8 <HAL_I2C_Init+0x278>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e006      	b.n	8002ad2 <HAL_I2C_Init+0x92>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a7d      	ldr	r2, [pc, #500]	; (8002cbc <HAL_I2C_Init+0x27c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0e7      	b.n	8002caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_I2C_Init+0x280>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a6a      	ldr	r2, [pc, #424]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <HAL_I2C_Init+0xd4>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e009      	b.n	8002b28 <HAL_I2C_Init+0xe8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_I2C_Init+0x284>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3301      	adds	r3, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	495c      	ldr	r1, [pc, #368]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d819      	bhi.n	8002b7c <HAL_I2C_Init+0x13c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e59      	subs	r1, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_I2C_Init+0x138>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e59      	subs	r1, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	e051      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e04f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_I2C_Init+0x168>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e012      	b.n	8002bce <HAL_I2C_Init+0x18e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Init+0x196>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e022      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <HAL_I2C_Init+0x1bc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e58      	subs	r0, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	440b      	add	r3, r1
 8002bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	0099      	lsls	r1, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6911      	ldr	r1, [r2, #16]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	000186a0 	.word	0x000186a0
 8002cb8:	001e847f 	.word	0x001e847f
 8002cbc:	003d08ff 	.word	0x003d08ff
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	10624dd3 	.word	0x10624dd3

08002cc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7fe ffd8 	bl	8001c90 <HAL_GetTick>
 8002ce0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	f040 80e0 	bne.w	8002eb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2319      	movs	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4970      	ldr	r1, [pc, #448]	; (8002ebc <HAL_I2C_Master_Transmit+0x1f4>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f002 f8e6 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	e0d3      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2C_Master_Transmit+0x50>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0cc      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d007      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2221      	movs	r2, #33	; 0x21
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	893a      	ldrh	r2, [r7, #8]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a50      	ldr	r2, [pc, #320]	; (8002ec0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d80:	8979      	ldrh	r1, [r7, #10]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f001 fea8 	bl	8004adc <I2C_MasterRequestWrite>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e08d      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dac:	e066      	b.n	8002e7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f002 f960 	bl	8005078 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x188>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d017      	beq.n	8002e50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	6a39      	ldr	r1, [r7, #32]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f002 f950 	bl	80050fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d107      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e01a      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d194      	bne.n	8002dae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	00100002 	.word	0x00100002
 8002ec0:	ffff0000 	.word	0xffff0000

08002ec4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7fe feda 	bl	8001c90 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f040 820b 	bne.w	8003302 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2319      	movs	r3, #25
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	497c      	ldr	r1, [pc, #496]	; (80030e8 <HAL_I2C_Master_Receive+0x224>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f001 ffe8 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	e1fe      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_I2C_Master_Receive+0x50>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e1f7      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d007      	beq.n	8002f3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2222      	movs	r2, #34	; 0x22
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2210      	movs	r2, #16
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	893a      	ldrh	r2, [r7, #8]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a5c      	ldr	r2, [pc, #368]	; (80030ec <HAL_I2C_Master_Receive+0x228>)
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f001 fe2c 	bl	8004be0 <I2C_MasterRequestRead>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1b8      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d113      	bne.n	8002fc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	623b      	str	r3, [r7, #32]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e18c      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d11b      	bne.n	8003002 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e16c      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b02      	cmp	r3, #2
 8003008:	d11b      	bne.n	8003042 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	e14c      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003068:	e138      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b03      	cmp	r3, #3
 8003070:	f200 80f1 	bhi.w	8003256 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b01      	cmp	r3, #1
 800307a:	d123      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f002 f8ad 	bl	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e139      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030c2:	e10b      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d14e      	bne.n	800316a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	2200      	movs	r2, #0
 80030d4:	4906      	ldr	r1, [pc, #24]	; (80030f0 <HAL_I2C_Master_Receive+0x22c>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 fef8 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e10e      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
 80030e6:	bf00      	nop
 80030e8:	00100002 	.word	0x00100002
 80030ec:	ffff0000 	.word	0xffff0000
 80030f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003168:	e0b8      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	4966      	ldr	r1, [pc, #408]	; (800330c <HAL_I2C_Master_Receive+0x448>)
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f001 fea9 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0bf      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2200      	movs	r2, #0
 80031ce:	494f      	ldr	r1, [pc, #316]	; (800330c <HAL_I2C_Master_Receive+0x448>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f001 fe7b 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e091      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003254:	e042      	b.n	80032dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f001 ffc0 	bl	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e04c      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d118      	bne.n	80032dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f47f aec2 	bne.w	800306a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010004 	.word	0x00010004

08003310 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003330:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b10      	cmp	r3, #16
 800333e:	d003      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x38>
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	f040 80c1 	bne.w	80034ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_I2C_EV_IRQHandler+0x6e>
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003368:	d003      	beq.n	8003372 <HAL_I2C_EV_IRQHandler+0x62>
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003370:	d101      	bne.n	8003376 <HAL_I2C_EV_IRQHandler+0x66>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_I2C_EV_IRQHandler+0x68>
 8003376:	2300      	movs	r3, #0
 8003378:	2b01      	cmp	r3, #1
 800337a:	f000 8132 	beq.w	80035e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x92>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0a5b      	lsrs	r3, r3, #9
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 ffa8 	bl	80052ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fd83 	bl	8003ea6 <I2C_Master_SB>
 80033a0:	e092      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0a5b      	lsrs	r3, r3, #9
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fdf9 	bl	8003fb2 <I2C_Master_ADD10>
 80033c0:	e082      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fe13 	bl	8004006 <I2C_Master_ADDR>
 80033e0:	e072      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03b      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fc:	f000 80f3 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	09db      	lsrs	r3, r3, #7
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00f      	beq.n	800342c <HAL_I2C_EV_IRQHandler+0x11c>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_I2C_EV_IRQHandler+0x11c>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9f3 	bl	8003810 <I2C_MasterTransmit_TXE>
 800342a:	e04d      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80d6 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	0a5b      	lsrs	r3, r3, #9
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80cf 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003448:	7bbb      	ldrb	r3, [r7, #14]
 800344a:	2b21      	cmp	r3, #33	; 0x21
 800344c:	d103      	bne.n	8003456 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa7a 	bl	8003948 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003454:	e0c7      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	f040 80c4 	bne.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fae8 	bl	8003a34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003464:	e0bf      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	f000 80b7 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	0a9b      	lsrs	r3, r3, #10
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb5d 	bl	8003b5c <I2C_MasterReceive_RXNE>
 80034a2:	e011      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809a 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8093 	beq.w	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fc06 	bl	8003cd2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c6:	e08e      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034c8:	e08d      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e007      	b.n	80034ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x20e>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	0a5b      	lsrs	r3, r3, #9
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ffc4 	bl	80044a4 <I2C_Slave_ADDR>
 800351c:	e066      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x22e>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fffe 	bl	8004538 <I2C_Slave_STOPF>
 800353c:	e056      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	2b21      	cmp	r3, #33	; 0x21
 8003542:	d002      	beq.n	800354a <HAL_I2C_EV_IRQHandler+0x23a>
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	2b29      	cmp	r3, #41	; 0x29
 8003548:	d125      	bne.n	8003596 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	09db      	lsrs	r3, r3, #7
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00f      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0x266>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	0a9b      	lsrs	r3, r3, #10
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0x266>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 feda 	bl	8004328 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003574:	e039      	b.n	80035ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d033      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x2da>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	0a5b      	lsrs	r3, r3, #9
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02d      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 ff07 	bl	80043a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003594:	e029      	b.n	80035ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00f      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	0a9b      	lsrs	r3, r3, #10
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 ff12 	bl	80043e4 <I2C_SlaveReceive_RXNE>
 80035c0:	e014      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00e      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	0a5b      	lsrs	r3, r3, #9
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 ff40 	bl	8004460 <I2C_SlaveReceive_BTF>
 80035e0:	e004      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08a      	sub	sp, #40	; 0x28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003614:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x4e>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800363e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	0a5b      	lsrs	r3, r3, #9
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <HAL_I2C_ER_IRQHandler+0x78>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003668:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	0a9b      	lsrs	r3, r3, #10
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03f      	beq.n	80036f6 <HAL_I2C_ER_IRQHandler+0x104>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d039      	beq.n	80036f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003682:	7efb      	ldrb	r3, [r7, #27]
 8003684:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800369c:	7ebb      	ldrb	r3, [r7, #26]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d112      	bne.n	80036c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d008      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b29      	cmp	r3, #41	; 0x29
 80036b2:	d005      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0xce>
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	2b28      	cmp	r3, #40	; 0x28
 80036b8:	d106      	bne.n	80036c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b21      	cmp	r3, #33	; 0x21
 80036be:	d103      	bne.n	80036c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 f869 	bl	8004798 <I2C_Slave_AF>
 80036c6:	e016      	b.n	80036f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036da:	7efb      	ldrb	r3, [r7, #27]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d002      	beq.n	80036e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80036e0:	7efb      	ldrb	r3, [r7, #27]
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d107      	bne.n	80036f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	0adb      	lsrs	r3, r3, #11
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <HAL_I2C_ER_IRQHandler+0x12e>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800371e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f001 f8a0 	bl	8004878 <I2C_ITError>
  }
}
 8003738:	bf00      	nop
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	4613      	mov	r3, r2
 800379e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003826:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d150      	bne.n	80038d8 <I2C_MasterTransmit_TXE+0xc8>
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b21      	cmp	r3, #33	; 0x21
 800383a:	d14d      	bne.n	80038d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d01d      	beq.n	800387e <I2C_MasterTransmit_TXE+0x6e>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b20      	cmp	r3, #32
 8003846:	d01a      	beq.n	800387e <I2C_MasterTransmit_TXE+0x6e>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800384e:	d016      	beq.n	800387e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800385e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2211      	movs	r2, #17
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff62 	bl	8003740 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800387c:	e060      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800388c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d107      	bne.n	80038c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff7d 	bl	80037c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c6:	e03b      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff35 	bl	8003740 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038d6:	e033      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d005      	beq.n	80038ea <I2C_MasterTransmit_TXE+0xda>
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d12d      	bne.n	8003940 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b22      	cmp	r3, #34	; 0x22
 80038e8:	d12a      	bne.n	8003940 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003902:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003904:	e01c      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d103      	bne.n	800391a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f88e 	bl	8003a34 <I2C_MemoryTransmit_TXE_BTF>
}
 8003918:	e012      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800393e:	e7ff      	b.n	8003940 <I2C_MasterTransmit_TXE+0x130>
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b21      	cmp	r3, #33	; 0x21
 8003960:	d164      	bne.n	8003a2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003990:	e04c      	b.n	8003a2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d01d      	beq.n	80039d4 <I2C_MasterTransmit_BTF+0x8c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b20      	cmp	r3, #32
 800399c:	d01a      	beq.n	80039d4 <I2C_MasterTransmit_BTF+0x8c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a4:	d016      	beq.n	80039d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2211      	movs	r2, #17
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff feb7 	bl	8003740 <HAL_I2C_MasterTxCpltCallback>
}
 80039d2:	e02b      	b.n	8003a2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d107      	bne.n	8003a1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fed2 	bl	80037c0 <HAL_I2C_MemTxCpltCallback>
}
 8003a1c:	e006      	b.n	8003a2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fe8a 	bl	8003740 <HAL_I2C_MasterTxCpltCallback>
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11d      	bne.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10b      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a6a:	e073      	b.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	121b      	asrs	r3, r3, #8
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a86:	e065      	b.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10b      	bne.n	8003aa8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aa6:	e055      	b.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d151      	bne.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b22      	cmp	r3, #34	; 0x22
 8003ab4:	d10d      	bne.n	8003ad2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ad0:	e040      	b.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b21      	cmp	r3, #33	; 0x21
 8003ae0:	d112      	bne.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b06:	e025      	b.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d120      	bne.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b21      	cmp	r3, #33	; 0x21
 8003b16:	d11d      	bne.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fe36 	bl	80037c0 <HAL_I2C_MemTxCpltCallback>
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b22      	cmp	r3, #34	; 0x22
 8003b6e:	f040 80ac 	bne.w	8003cca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d921      	bls.n	8003bc4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	f040 808c 	bne.w	8003cca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bc2:	e082      	b.n	8003cca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d075      	beq.n	8003cb8 <I2C_MasterReceive_RXNE+0x15c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d002      	beq.n	8003bd8 <I2C_MasterReceive_RXNE+0x7c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d16f      	bne.n	8003cb8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f001 facf 	bl	800517c <I2C_WaitOnSTOPRequestThroughIT>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d142      	bne.n	8003c6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10a      	bne.n	8003c54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fdc1 	bl	80037d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c52:	e03a      	b.n	8003cca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2212      	movs	r2, #18
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fd76 	bl	8003754 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c68:	e02f      	b.n	8003cca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fd99 	bl	80037e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cb6:	e008      	b.n	8003cca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	605a      	str	r2, [r3, #4]
}
 8003cc8:	e7ff      	b.n	8003cca <I2C_MasterReceive_RXNE+0x16e>
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d11b      	bne.n	8003d22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d20:	e0bd      	b.n	8003e9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d129      	bne.n	8003d80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00a      	beq.n	8003d58 <I2C_MasterReceive_BTF+0x86>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d007      	beq.n	8003d58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d7e:	e08e      	b.n	8003e9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d176      	bne.n	8003e78 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d002      	beq.n	8003d96 <I2C_MasterReceive_BTF+0xc4>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e019      	b.n	8003ddc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d002      	beq.n	8003db4 <I2C_MasterReceive_BTF+0xe2>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d108      	bne.n	8003dc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e00a      	b.n	8003ddc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d007      	beq.n	8003ddc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10a      	bne.n	8003e62 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fcba 	bl	80037d4 <HAL_I2C_MemRxCpltCallback>
}
 8003e60:	e01d      	b.n	8003e9e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2212      	movs	r2, #18
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fc6f 	bl	8003754 <HAL_I2C_MasterRxCpltCallback>
}
 8003e76:	e012      	b.n	8003e9e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d117      	bne.n	8003eea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ed4:	e067      	b.n	8003fa6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
}
 8003ee8:	e05d      	b.n	8003fa6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef2:	d133      	bne.n	8003f5c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b21      	cmp	r3, #33	; 0x21
 8003efe:	d109      	bne.n	8003f14 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e008      	b.n	8003f26 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <I2C_Master_SB+0x92>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d032      	beq.n	8003fa6 <I2C_Master_SB+0x100>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d02d      	beq.n	8003fa6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f58:	605a      	str	r2, [r3, #4]
}
 8003f5a:	e024      	b.n	8003fa6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	11db      	asrs	r3, r3, #7
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0306 	and.w	r3, r3, #6
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f063 030f 	orn	r3, r3, #15
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
}
 8003f80:	e011      	b.n	8003fa6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10d      	bne.n	8003fa6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	11db      	asrs	r3, r3, #7
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 0306 	and.w	r3, r3, #6
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f063 030e 	orn	r3, r3, #14
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <I2C_Master_ADD10+0x26>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <I2C_Master_ADD10+0x48>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff8:	605a      	str	r2, [r3, #4]
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004006:	b480      	push	{r7}
 8004008:	b091      	sub	sp, #68	; 0x44
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004014:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b22      	cmp	r3, #34	; 0x22
 800402e:	f040 8169 	bne.w	8004304 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <I2C_Master_ADDR+0x54>
 800403a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d10b      	bne.n	800405a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	633b      	str	r3, [r7, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	e160      	b.n	800431c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <I2C_Master_ADDR+0x98>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406a:	d118      	bne.n	800409e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004090:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	651a      	str	r2, [r3, #80]	; 0x50
 800409c:	e13e      	b.n	800431c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a8:	2300      	movs	r3, #0
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e115      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 808a 	bne.w	80041f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e2:	d137      	bne.n	8004154 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004102:	d113      	bne.n	800412c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	e0e7      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e0d3      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	2b08      	cmp	r3, #8
 8004158:	d02e      	beq.n	80041b8 <I2C_Master_ADDR+0x1b2>
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2b20      	cmp	r3, #32
 800415e:	d02b      	beq.n	80041b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	2b12      	cmp	r3, #18
 8004164:	d102      	bne.n	800416c <I2C_Master_ADDR+0x166>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b01      	cmp	r3, #1
 800416a:	d125      	bne.n	80041b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00e      	beq.n	8004190 <I2C_Master_ADDR+0x18a>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b02      	cmp	r3, #2
 8004176:	d00b      	beq.n	8004190 <I2C_Master_ADDR+0x18a>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b10      	cmp	r3, #16
 800417c:	d008      	beq.n	8004190 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e007      	b.n	80041a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	e0a1      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e085      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d14d      	bne.n	8004296 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d016      	beq.n	800422e <I2C_Master_ADDR+0x228>
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b02      	cmp	r3, #2
 8004204:	d013      	beq.n	800422e <I2C_Master_ADDR+0x228>
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	2b10      	cmp	r3, #16
 800420a:	d010      	beq.n	800422e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e007      	b.n	800423e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800423c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424c:	d117      	bne.n	800427e <I2C_Master_ADDR+0x278>
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004254:	d00b      	beq.n	800426e <I2C_Master_ADDR+0x268>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b01      	cmp	r3, #1
 800425a:	d008      	beq.n	800426e <I2C_Master_ADDR+0x268>
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b08      	cmp	r3, #8
 8004260:	d005      	beq.n	800426e <I2C_Master_ADDR+0x268>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b10      	cmp	r3, #16
 8004266:	d002      	beq.n	800426e <I2C_Master_ADDR+0x268>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	2b20      	cmp	r3, #32
 800426c:	d107      	bne.n	800427e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800427c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	e032      	b.n	80042fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b4:	d117      	bne.n	80042e6 <I2C_Master_ADDR+0x2e0>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042bc:	d00b      	beq.n	80042d6 <I2C_Master_ADDR+0x2d0>
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d008      	beq.n	80042d6 <I2C_Master_ADDR+0x2d0>
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d005      	beq.n	80042d6 <I2C_Master_ADDR+0x2d0>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d002      	beq.n	80042d6 <I2C_Master_ADDR+0x2d0>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d107      	bne.n	80042e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004302:	e00b      	b.n	800431c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
}
 800431a:	e7ff      	b.n	800431c <I2C_Master_ADDR+0x316>
 800431c:	bf00      	nop
 800431e:	3744      	adds	r7, #68	; 0x44
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02b      	beq.n	800439a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d114      	bne.n	800439a <I2C_SlaveTransmit_TXE+0x72>
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b29      	cmp	r3, #41	; 0x29
 8004374:	d111      	bne.n	800439a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004384:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2221      	movs	r2, #33	; 0x21
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2228      	movs	r2, #40	; 0x28
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff f9e7 	bl	8003768 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02c      	beq.n	8004458 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d114      	bne.n	8004458 <I2C_SlaveReceive_RXNE+0x74>
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b2a      	cmp	r3, #42	; 0x2a
 8004432:	d111      	bne.n	8004458 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2222      	movs	r2, #34	; 0x22
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2228      	movs	r2, #40	; 0x28
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff f992 	bl	800377c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d012      	beq.n	8004498 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044be:	2b28      	cmp	r3, #40	; 0x28
 80044c0:	d127      	bne.n	8004512 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	09db      	lsrs	r3, r3, #7
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	81bb      	strh	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004504:	89ba      	ldrh	r2, [r7, #12]
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff f940 	bl	8003790 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004510:	e00e      	b.n	8004530 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004556:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d172      	bne.n	800467c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b22      	cmp	r3, #34	; 0x22
 800459a:	d002      	beq.n	80045a2 <I2C_Slave_STOPF+0x6a>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b2a      	cmp	r3, #42	; 0x2a
 80045a0:	d135      	bne.n	800460e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f043 0204 	orr.w	r2, r3, #4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd ff98 	bl	8002510 <HAL_DMA_GetState>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d049      	beq.n	800467a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	4a69      	ldr	r2, [pc, #420]	; (8004790 <I2C_Slave_STOPF+0x258>)
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fde0 	bl	80021b8 <HAL_DMA_Abort_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d03d      	beq.n	800467a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004608:	4610      	mov	r0, r2
 800460a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800460c:	e035      	b.n	800467a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0204 	orr.w	r2, r3, #4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004640:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd ff62 	bl	8002510 <HAL_DMA_GetState>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d014      	beq.n	800467c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <I2C_Slave_STOPF+0x258>)
 8004658:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd fdaa 	bl	80021b8 <HAL_DMA_Abort_IT>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004674:	4610      	mov	r0, r2
 8004676:	4798      	blx	r3
 8004678:	e000      	b.n	800467c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03e      	beq.n	8004704 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d112      	bne.n	80046ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d112      	bne.n	80046ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f043 0204 	orr.w	r2, r3, #4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8b3 	bl	8004878 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004712:	e039      	b.n	8004788 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b2a      	cmp	r3, #42	; 0x2a
 8004718:	d109      	bne.n	800472e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2228      	movs	r2, #40	; 0x28
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff f827 	bl	800377c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b28      	cmp	r3, #40	; 0x28
 8004738:	d111      	bne.n	800475e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <I2C_Slave_STOPF+0x25c>)
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff f828 	bl	80037ac <HAL_I2C_ListenCpltCallback>
}
 800475c:	e014      	b.n	8004788 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	2b22      	cmp	r3, #34	; 0x22
 8004764:	d002      	beq.n	800476c <I2C_Slave_STOPF+0x234>
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b22      	cmp	r3, #34	; 0x22
 800476a:	d10d      	bne.n	8004788 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fffa 	bl	800377c <HAL_I2C_SlaveRxCpltCallback>
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	08004d7d 	.word	0x08004d7d
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d002      	beq.n	80047ba <I2C_Slave_AF+0x22>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d129      	bne.n	800480e <I2C_Slave_AF+0x76>
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d126      	bne.n	800480e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <I2C_Slave_AF+0xdc>)
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fe ffd0 	bl	80037ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800480c:	e02e      	b.n	800486c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b21      	cmp	r3, #33	; 0x21
 8004812:	d126      	bne.n	8004862 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a17      	ldr	r2, [pc, #92]	; (8004874 <I2C_Slave_AF+0xdc>)
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2221      	movs	r2, #33	; 0x21
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800483e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004848:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fe ff84 	bl	8003768 <HAL_I2C_SlaveTxCpltCallback>
}
 8004860:	e004      	b.n	800486c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800486a:	615a      	str	r2, [r3, #20]
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	ffff0000 	.word	0xffff0000

08004878 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d002      	beq.n	800489c <I2C_ITError+0x24>
 8004896:	7bbb      	ldrb	r3, [r7, #14]
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d10a      	bne.n	80048b2 <I2C_ITError+0x3a>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b22      	cmp	r3, #34	; 0x22
 80048a0:	d107      	bne.n	80048b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b8:	2b28      	cmp	r3, #40	; 0x28
 80048ba:	d107      	bne.n	80048cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2228      	movs	r2, #40	; 0x28
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048ca:	e015      	b.n	80048f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048da:	d00a      	beq.n	80048f2 <I2C_ITError+0x7a>
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b60      	cmp	r3, #96	; 0x60
 80048e0:	d007      	beq.n	80048f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d162      	bne.n	80049ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004916:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d020      	beq.n	8004968 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	4a6a      	ldr	r2, [pc, #424]	; (8004ad4 <I2C_ITError+0x25c>)
 800492c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fc40 	bl	80021b8 <HAL_DMA_Abort_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8089 	beq.w	8004a52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004962:	4610      	mov	r0, r2
 8004964:	4798      	blx	r3
 8004966:	e074      	b.n	8004a52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	4a59      	ldr	r2, [pc, #356]	; (8004ad4 <I2C_ITError+0x25c>)
 800496e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	4618      	mov	r0, r3
 8004976:	f7fd fc1f 	bl	80021b8 <HAL_DMA_Abort_IT>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d068      	beq.n	8004a52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d10b      	bne.n	80049a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
 80049cc:	e041      	b.n	8004a52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b60      	cmp	r3, #96	; 0x60
 80049d8:	d125      	bne.n	8004a26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10b      	bne.n	8004a0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe feec 	bl	80037fc <HAL_I2C_AbortCpltCallback>
 8004a24:	e015      	b.n	8004a52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d10b      	bne.n	8004a4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fe fecb 	bl	80037e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10e      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d113      	bne.n	8004acc <I2C_ITError+0x254>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b28      	cmp	r3, #40	; 0x28
 8004aa8:	d110      	bne.n	8004acc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <I2C_ITError+0x260>)
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe fe70 	bl	80037ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08004d7d 	.word	0x08004d7d
 8004ad8:	ffff0000 	.word	0xffff0000

08004adc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d006      	beq.n	8004b06 <I2C_MasterRequestWrite+0x2a>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d003      	beq.n	8004b06 <I2C_MasterRequestWrite+0x2a>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b04:	d108      	bne.n	8004b18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e00b      	b.n	8004b30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	2b12      	cmp	r3, #18
 8004b1e:	d107      	bne.n	8004b30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f9c5 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d103      	bne.n	8004b60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e035      	b.n	8004bd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b6c:	d108      	bne.n	8004b80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b7c:	611a      	str	r2, [r3, #16]
 8004b7e:	e01b      	b.n	8004bb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b80:	897b      	ldrh	r3, [r7, #10]
 8004b82:	11db      	asrs	r3, r3, #7
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0306 	and.w	r3, r3, #6
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f063 030f 	orn	r3, r3, #15
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	490e      	ldr	r1, [pc, #56]	; (8004bd8 <I2C_MasterRequestWrite+0xfc>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f9eb 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e010      	b.n	8004bd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4907      	ldr	r1, [pc, #28]	; (8004bdc <I2C_MasterRequestWrite+0x100>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f9db 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	00010008 	.word	0x00010008
 8004bdc:	00010002 	.word	0x00010002

08004be0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	460b      	mov	r3, r1
 8004bee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d006      	beq.n	8004c1a <I2C_MasterRequestRead+0x3a>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d003      	beq.n	8004c1a <I2C_MasterRequestRead+0x3a>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c18:	d108      	bne.n	8004c2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e00b      	b.n	8004c44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b11      	cmp	r3, #17
 8004c32:	d107      	bne.n	8004c44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f93b 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	d103      	bne.n	8004c74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e079      	b.n	8004d6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c80:	d108      	bne.n	8004c94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	e05f      	b.n	8004d54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	11db      	asrs	r3, r3, #7
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 0306 	and.w	r3, r3, #6
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f063 030f 	orn	r3, r3, #15
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4930      	ldr	r1, [pc, #192]	; (8004d74 <I2C_MasterRequestRead+0x194>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f961 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e054      	b.n	8004d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4929      	ldr	r1, [pc, #164]	; (8004d78 <I2C_MasterRequestRead+0x198>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f951 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e044      	b.n	8004d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f8d9 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d103      	bne.n	8004d38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e017      	b.n	8004d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030e 	orn	r3, r3, #14
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4907      	ldr	r1, [pc, #28]	; (8004d78 <I2C_MasterRequestRead+0x198>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f90d 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	00010008 	.word	0x00010008
 8004d78:	00010002 	.word	0x00010002

08004d7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d96:	4b4b      	ldr	r3, [pc, #300]	; (8004ec4 <I2C_DMAAbort+0x148>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	08db      	lsrs	r3, r3, #3
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <I2C_DMAAbort+0x14c>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	0a1a      	lsrs	r2, r3, #8
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00da      	lsls	r2, r3, #3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004dc2:	e00a      	b.n	8004dda <I2C_DMAAbort+0x5e>
    }
    count--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d0ea      	beq.n	8004db0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	2200      	movs	r2, #0
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	2200      	movs	r2, #0
 8004df8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e08:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d10e      	bne.n	8004e6a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7fe fcca 	bl	80037fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e68:	e027      	b.n	8004eba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6a:	7cfb      	ldrb	r3, [r7, #19]
 8004e6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e70:	2b28      	cmp	r3, #40	; 0x28
 8004e72:	d117      	bne.n	8004ea4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2228      	movs	r2, #40	; 0x28
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ea2:	e007      	b.n	8004eb4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7fe fc97 	bl	80037e8 <HAL_I2C_ErrorCallback>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000021c 	.word	0x2000021c
 8004ec8:	14f8b589 	.word	0x14f8b589

08004ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	e025      	b.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d021      	beq.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fc fed3 	bl	8001c90 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e023      	b.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10d      	bne.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	e00c      	b.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d0b6      	beq.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f88:	e051      	b.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d123      	bne.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0204 	orr.w	r2, r3, #4
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e046      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d021      	beq.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fc fe51 	bl	8001c90 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e020      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10c      	bne.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e00b      	b.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d18d      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005084:	e02d      	b.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f900 	bl	800528c <I2C_IsAcknowledgeFailed>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e02d      	b.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d021      	beq.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fc fdf7 	bl	8001c90 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e007      	b.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d1ca      	bne.n	8005086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005106:	e02d      	b.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f8bf 	bl	800528c <I2C_IsAcknowledgeFailed>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02d      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d021      	beq.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005120:	f7fc fdb6 	bl	8001c90 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e007      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d1ca      	bne.n	8005108 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0a1a      	lsrs	r2, r3, #8
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e008      	b.n	80051cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d0e9      	beq.n	800519e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	2000021c 	.word	0x2000021c
 80051dc:	14f8b589 	.word	0x14f8b589

080051e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ec:	e042      	b.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d119      	bne.n	8005230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e029      	b.n	8005284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005230:	f7fc fd2e 	bl	8001c90 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d116      	bne.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e007      	b.n	8005284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d1b5      	bne.n	80051ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d11b      	bne.n	80052dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052fa:	d103      	bne.n	8005304 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005302:	e007      	b.n	8005314 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800530c:	d102      	bne.n	8005314 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2208      	movs	r2, #8
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e267      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d075      	beq.n	800542a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533e:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x108>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e242      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x74>
 8005386:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a75      	ldr	r2, [pc, #468]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x98>
 800539e:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6c      	ldr	r2, [pc, #432]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 80053b8:	4b69      	ldr	r3, [pc, #420]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fc fc5a 	bl	8001c90 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fc fc56 	bl	8001c90 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e207      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xc0>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fc fc46 	bl	8001c90 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fc fc42 	bl	8001c90 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1f3      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b51      	ldr	r3, [pc, #324]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0xe8>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d063      	beq.n	80054fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1c7      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fc fbfb 	bl	8001c90 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fc fbf7 	bl	8001c90 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1a8      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4925      	ldr	r1, [pc, #148]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fc fbda 	bl	8001c90 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fc fbd6 	bl	8001c90 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e187      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fc fbba 	bl	8001c90 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fc fbb6 	bl	8001c90 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e167      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x200>
 800553e:	e01b      	b.n	8005578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005546:	f7fc fba3 	bl	8001c90 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fc fb9f 	bl	8001c90 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e150      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005560:	40023800 	.word	0x40023800
 8005564:	42470000 	.word	0x42470000
 8005568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8097 	beq.w	80056b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a7c      	ldr	r2, [pc, #496]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b74      	ldr	r3, [pc, #464]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a73      	ldr	r2, [pc, #460]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fc fb5f 	bl	8001c90 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fc fb5b 	bl	8001c90 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e10c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x2ea>
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4a63      	ldr	r2, [pc, #396]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	; 0x70
 8005608:	e01c      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x30c>
 8005612:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	4a5e      	ldr	r2, [pc, #376]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	6713      	str	r3, [r2, #112]	; 0x70
 800561e:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a5b      	ldr	r2, [pc, #364]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800562c:	4b58      	ldr	r3, [pc, #352]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a54      	ldr	r2, [pc, #336]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 0304 	bic.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fc fb20 	bl	8001c90 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fc fb1c 	bl	8001c90 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0cb      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b49      	ldr	r3, [pc, #292]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <HAL_RCC_OscConfig+0x334>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005678:	f7fc fb0a 	bl	8001c90 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fc fb06 	bl	8001c90 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0b5      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80a1 	beq.w	8005800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d05c      	beq.n	8005784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d141      	bne.n	8005756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fc fada 	bl	8001c90 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fc fad6 	bl	8001c90 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e087      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fc faaf 	bl	8001c90 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fc faab 	bl	8001c90 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e05c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x416>
 8005754:	e054      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fc fa98 	bl	8001c90 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fc fa94 	bl	8001c90 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e045      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x444>
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e038      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005790:	40023800 	.word	0x40023800
 8005794:	40007000 	.word	0x40007000
 8005798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d028      	beq.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d121      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d11a      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cc      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d90c      	bls.n	800584c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d044      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e067      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4934      	ldr	r1, [pc, #208]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005900:	f7fc f9c6 	bl	8001c90 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fc f9c2 	bl	8001c90 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20c      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f821 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fc f926 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	08008194 	.word	0x08008194
 80059d4:	2000021c 	.word	0x2000021c
 80059d8:	20000220 	.word	0x20000220

080059dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b094      	sub	sp, #80	; 0x50
 80059e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	647b      	str	r3, [r7, #68]	; 0x44
 80059e8:	2300      	movs	r3, #0
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ec:	2300      	movs	r3, #0
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f4:	4b79      	ldr	r3, [pc, #484]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d00d      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x40>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	f200 80e1 	bhi.w	8005bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x34>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0e:	e0db      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a10:	4b73      	ldr	r3, [pc, #460]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a14:	e0db      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a16:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a1a:	e0d8      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a26:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d063      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	2200      	movs	r2, #0
 8005a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
 8005a46:	2300      	movs	r3, #0
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a4e:	4622      	mov	r2, r4
 8005a50:	462b      	mov	r3, r5
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	0159      	lsls	r1, r3, #5
 8005a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a60:	0150      	lsls	r0, r2, #5
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4621      	mov	r1, r4
 8005a68:	1a51      	subs	r1, r2, r1
 8005a6a:	6139      	str	r1, [r7, #16]
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a80:	4659      	mov	r1, fp
 8005a82:	018b      	lsls	r3, r1, #6
 8005a84:	4651      	mov	r1, sl
 8005a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	018a      	lsls	r2, r1, #6
 8005a8e:	4651      	mov	r1, sl
 8005a90:	ebb2 0801 	subs.w	r8, r2, r1
 8005a94:	4659      	mov	r1, fp
 8005a96:	eb63 0901 	sbc.w	r9, r3, r1
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aae:	4690      	mov	r8, r2
 8005ab0:	4699      	mov	r9, r3
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	eb18 0303 	adds.w	r3, r8, r3
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	462b      	mov	r3, r5
 8005abc:	eb49 0303 	adc.w	r3, r9, r3
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ace:	4629      	mov	r1, r5
 8005ad0:	024b      	lsls	r3, r1, #9
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ad8:	4621      	mov	r1, r4
 8005ada:	024a      	lsls	r2, r1, #9
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aec:	f7fa fb74 	bl	80001d8 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e058      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	2200      	movs	r2, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	4611      	mov	r1, r2
 8005b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	0159      	lsls	r1, r3, #5
 8005b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b26:	0150      	lsls	r0, r2, #5
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b32:	4649      	mov	r1, r9
 8005b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b50:	eb63 050b 	sbc.w	r5, r3, fp
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	00eb      	lsls	r3, r5, #3
 8005b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b62:	00e2      	lsls	r2, r4, #3
 8005b64:	4614      	mov	r4, r2
 8005b66:	461d      	mov	r5, r3
 8005b68:	4643      	mov	r3, r8
 8005b6a:	18e3      	adds	r3, r4, r3
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	464b      	mov	r3, r9
 8005b70:	eb45 0303 	adc.w	r3, r5, r3
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b82:	4629      	mov	r1, r5
 8005b84:	028b      	lsls	r3, r1, #10
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	028a      	lsls	r2, r1, #10
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b96:	2200      	movs	r2, #0
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	61fa      	str	r2, [r7, #28]
 8005b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba0:	f7fa fb1a 	bl	80001d8 <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4613      	mov	r3, r2
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc6:	e002      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3750      	adds	r7, #80	; 0x50
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	00f42400 	.word	0x00f42400
 8005be4:	007a1200 	.word	0x007a1200

08005be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000021c 	.word	0x2000021c

08005c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c04:	f7ff fff0 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0a9b      	lsrs	r3, r3, #10
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4903      	ldr	r1, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	080081a4 	.word	0x080081a4

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c2c:	f7ff ffdc 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	0b5b      	lsrs	r3, r3, #13
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4903      	ldr	r1, [pc, #12]	; (8005c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3e:	5ccb      	ldrb	r3, [r1, r3]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	080081a4 	.word	0x080081a4

08005c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e04c      	b.n	8005cfc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d111      	bne.n	8005c92 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ff40 	bl	8006afc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_Base_Init+0xb4>)
 8005c88:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 fcf7 	bl	8006698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	08001895 	.word	0x08001895

08005d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d001      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e044      	b.n	8005daa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x6c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x6c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIM_Base_Start_IT+0xb4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x6c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x6c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x6c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d111      	bne.n	8005d98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d010      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	e007      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40014000 	.word	0x40014000

08005dcc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e04c      	b.n	8005e78 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d111      	bne.n	8005e0e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fe82 	bl	8006afc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <HAL_TIM_OC_Init+0xb4>)
 8005e04:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f000 fc39 	bl	8006698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08005e85 	.word	0x08005e85

08005e84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e04c      	b.n	8005f46 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d111      	bne.n	8005edc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fe1b 	bl	8006afc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_TIM_OnePulse_Init+0xb8>)
 8005ed2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f000 fbd2 	bl	8006698 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0208 	bic.w	r2, r2, #8
 8005f02:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	08005f55 	.word	0x08005f55

08005f54 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f90:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d108      	bne.n	8005faa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d105      	bne.n	8005faa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f9e:	7b7b      	ldrb	r3, [r7, #13]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d102      	bne.n	8005faa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa4:	7b3b      	ldrb	r3, [r7, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e03b      	b.n	8006026 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0202 	orr.w	r2, r2, #2
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0204 	orr.w	r2, r2, #4
 8005fec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fd5a 	bl	8006ab0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	2104      	movs	r1, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd53 	bl	8006ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a08      	ldr	r2, [pc, #32]	; (8006030 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d107      	bne.n	8006024 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000

08006034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d128      	bne.n	800609c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d121      	bne.n	800609c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0202 	mvn.w	r2, #2
 8006060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
 8006080:	e009      	b.n	8006096 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d128      	bne.n	80060fc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d121      	bne.n	80060fc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0204 	mvn.w	r2, #4
 80060c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	e009      	b.n	80060f6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b08      	cmp	r3, #8
 8006108:	d128      	bne.n	800615c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d121      	bne.n	800615c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0208 	mvn.w	r2, #8
 8006120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e009      	b.n	8006156 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b10      	cmp	r3, #16
 8006168:	d128      	bne.n	80061bc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b10      	cmp	r3, #16
 8006176:	d121      	bne.n	80061bc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0210 	mvn.w	r2, #16
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2208      	movs	r2, #8
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	e009      	b.n	80061b6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d110      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d109      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0201 	mvn.w	r2, #1
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b80      	cmp	r3, #128	; 0x80
 80061f8:	d110      	bne.n	800621c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006204:	2b80      	cmp	r3, #128	; 0x80
 8006206:	d109      	bne.n	800621c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d110      	bne.n	800624c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d109      	bne.n	800624c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b20      	cmp	r3, #32
 8006258:	d110      	bne.n	800627c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b20      	cmp	r3, #32
 8006266:	d109      	bne.n	800627c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0220 	mvn.w	r2, #32
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800629e:	2302      	movs	r3, #2
 80062a0:	e048      	b.n	8006334 <HAL_TIM_OC_ConfigChannel+0xb0>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	d839      	bhi.n	8006324 <HAL_TIM_OC_ConfigChannel+0xa0>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062ed 	.word	0x080062ed
 80062bc:	08006325 	.word	0x08006325
 80062c0:	08006325 	.word	0x08006325
 80062c4:	08006325 	.word	0x08006325
 80062c8:	080062fb 	.word	0x080062fb
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006325 	.word	0x08006325
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006309 	.word	0x08006309
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006325 	.word	0x08006325
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006317 	.word	0x08006317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fa50 	bl	8006798 <TIM_OC1_SetConfig>
      break;
 80062f8:	e017      	b.n	800632a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 faaf 	bl	8006864 <TIM_OC2_SetConfig>
      break;
 8006306:	e010      	b.n	800632a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fb14 	bl	800693c <TIM_OC3_SetConfig>
      break;
 8006314:	e009      	b.n	800632a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fb77 	bl	8006a10 <TIM_OC4_SetConfig>
      break;
 8006322:	e002      	b.n	800632a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
      break;
 8006328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	460b      	mov	r3, r1
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e135      	b.n	800668c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_RegisterCallback+0x2a>
 800642a:	2302      	movs	r3, #2
 800642c:	e12e      	b.n	800668c <HAL_TIM_RegisterCallback+0x288>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 80ba 	bne.w	80065b8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	2b1a      	cmp	r3, #26
 8006448:	f200 80b3 	bhi.w	80065b2 <HAL_TIM_RegisterCallback+0x1ae>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <HAL_TIM_RegisterCallback+0x50>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	080064c1 	.word	0x080064c1
 8006458:	080064c9 	.word	0x080064c9
 800645c:	080064d1 	.word	0x080064d1
 8006460:	080064d9 	.word	0x080064d9
 8006464:	080064e1 	.word	0x080064e1
 8006468:	080064e9 	.word	0x080064e9
 800646c:	080064f1 	.word	0x080064f1
 8006470:	080064f9 	.word	0x080064f9
 8006474:	08006501 	.word	0x08006501
 8006478:	08006509 	.word	0x08006509
 800647c:	08006511 	.word	0x08006511
 8006480:	08006519 	.word	0x08006519
 8006484:	08006521 	.word	0x08006521
 8006488:	08006529 	.word	0x08006529
 800648c:	08006531 	.word	0x08006531
 8006490:	0800653b 	.word	0x0800653b
 8006494:	08006545 	.word	0x08006545
 8006498:	0800654f 	.word	0x0800654f
 800649c:	08006559 	.word	0x08006559
 80064a0:	08006563 	.word	0x08006563
 80064a4:	0800656d 	.word	0x0800656d
 80064a8:	08006577 	.word	0x08006577
 80064ac:	08006581 	.word	0x08006581
 80064b0:	0800658b 	.word	0x0800658b
 80064b4:	08006595 	.word	0x08006595
 80064b8:	0800659f 	.word	0x0800659f
 80064bc:	080065a9 	.word	0x080065a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80064c6:	e0dc      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80064ce:	e0d8      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80064d6:	e0d4      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80064de:	e0d0      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80064e6:	e0cc      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80064ee:	e0c8      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80064f6:	e0c4      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80064fe:	e0c0      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006506:	e0bc      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800650e:	e0b8      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006516:	e0b4      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800651e:	e0b0      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006526:	e0ac      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800652e:	e0a8      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006538:	e0a3      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006542:	e09e      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800654c:	e099      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006556:	e094      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006560:	e08f      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800656a:	e08a      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006574:	e085      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800657e:	e080      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006588:	e07b      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006592:	e076      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800659c:	e071      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80065a6:	e06c      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80065b0:	e067      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
        break;
 80065b6:	e064      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d15c      	bne.n	800667e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	2b0d      	cmp	r3, #13
 80065c8:	d856      	bhi.n	8006678 <HAL_TIM_RegisterCallback+0x274>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_RegisterCallback+0x1cc>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006609 	.word	0x08006609
 80065d4:	08006611 	.word	0x08006611
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006621 	.word	0x08006621
 80065e0:	08006629 	.word	0x08006629
 80065e4:	08006631 	.word	0x08006631
 80065e8:	08006639 	.word	0x08006639
 80065ec:	08006641 	.word	0x08006641
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006651 	.word	0x08006651
 80065f8:	08006659 	.word	0x08006659
 80065fc:	08006661 	.word	0x08006661
 8006600:	08006669 	.word	0x08006669
 8006604:	08006671 	.word	0x08006671
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800660e:	e038      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006616:	e034      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800661e:	e030      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006626:	e02c      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800662e:	e028      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006636:	e024      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800663e:	e020      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006646:	e01c      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800664e:	e018      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006656:	e014      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800665e:	e010      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006666:	e00c      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800666e:	e008      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006676:	e004      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
        break;
 800667c:	e001      	b.n	8006682 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a34      	ldr	r2, [pc, #208]	; (800677c <TIM_Base_SetConfig+0xe4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_Base_SetConfig+0x38>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x38>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a31      	ldr	r2, [pc, #196]	; (8006780 <TIM_Base_SetConfig+0xe8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x38>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a30      	ldr	r2, [pc, #192]	; (8006784 <TIM_Base_SetConfig+0xec>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x38>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a2f      	ldr	r2, [pc, #188]	; (8006788 <TIM_Base_SetConfig+0xf0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a25      	ldr	r2, [pc, #148]	; (800677c <TIM_Base_SetConfig+0xe4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01b      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d017      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a22      	ldr	r2, [pc, #136]	; (8006780 <TIM_Base_SetConfig+0xe8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a21      	ldr	r2, [pc, #132]	; (8006784 <TIM_Base_SetConfig+0xec>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a20      	ldr	r2, [pc, #128]	; (8006788 <TIM_Base_SetConfig+0xf0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1f      	ldr	r2, [pc, #124]	; (800678c <TIM_Base_SetConfig+0xf4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <TIM_Base_SetConfig+0xf8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_Base_SetConfig+0x8a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <TIM_Base_SetConfig+0xfc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d108      	bne.n	8006734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a08      	ldr	r2, [pc, #32]	; (800677c <TIM_Base_SetConfig+0xe4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d103      	bne.n	8006768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	615a      	str	r2, [r3, #20]
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800

08006798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f023 0201 	bic.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 0302 	bic.w	r3, r3, #2
 80067e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <TIM_OC1_SetConfig+0xc8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10c      	bne.n	800680e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0308 	bic.w	r3, r3, #8
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a13      	ldr	r2, [pc, #76]	; (8006860 <TIM_OC1_SetConfig+0xc8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d111      	bne.n	800683a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40010000 	.word	0x40010000

08006864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0210 	bic.w	r2, r3, #16
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 0320 	bic.w	r3, r3, #32
 80068ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_OC2_SetConfig+0xd4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10d      	bne.n	80068e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <TIM_OC2_SetConfig+0xd4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d113      	bne.n	8006910 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40010000 	.word	0x40010000

0800693c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC3_SetConfig+0xd0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10d      	bne.n	80069b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <TIM_OC3_SetConfig+0xd0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d113      	bne.n	80069e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	621a      	str	r2, [r3, #32]
}
 8006a00:	bf00      	nop
 8006a02:	371c      	adds	r7, #28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40010000 	.word	0x40010000

08006a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	031b      	lsls	r3, r3, #12
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <TIM_OC4_SetConfig+0x9c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d109      	bne.n	8006a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	019b      	lsls	r3, r3, #6
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000

08006ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1a      	ldr	r2, [r3, #32]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <TIM_ResetCallback+0x7c>)
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <TIM_ResetCallback+0x80>)
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <TIM_ResetCallback+0x84>)
 8006b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <TIM_ResetCallback+0x88>)
 8006b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <TIM_ResetCallback+0x8c>)
 8006b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <TIM_ResetCallback+0x90>)
 8006b30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <TIM_ResetCallback+0x94>)
 8006b38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <TIM_ResetCallback+0x98>)
 8006b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <TIM_ResetCallback+0x9c>)
 8006b48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <TIM_ResetCallback+0xa0>)
 8006b50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <TIM_ResetCallback+0xa4>)
 8006b58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <TIM_ResetCallback+0xa8>)
 8006b60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a10      	ldr	r2, [pc, #64]	; (8006ba8 <TIM_ResetCallback+0xac>)
 8006b68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	0800633d 	.word	0x0800633d
 8006b7c:	08006351 	.word	0x08006351
 8006b80:	080063c9 	.word	0x080063c9
 8006b84:	080063dd 	.word	0x080063dd
 8006b88:	08006379 	.word	0x08006379
 8006b8c:	0800638d 	.word	0x0800638d
 8006b90:	08006365 	.word	0x08006365
 8006b94:	080063a1 	.word	0x080063a1
 8006b98:	080063b5 	.word	0x080063b5
 8006b9c:	080063f1 	.word	0x080063f1
 8006ba0:	08006bad 	.word	0x08006bad
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	08006bd5 	.word	0x08006bd5

08006bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e04a      	b.n	8006c90 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d111      	bne.n	8006c2a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd22 	bl	8007658 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_UART_Init+0xb0>)
 8006c20:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	; 0x24
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 ffec 	bl	8007c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	08001991 	.word	0x08001991

08006c9c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e08c      	b.n	8006dde <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_RegisterCallback+0x36>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e085      	b.n	8006dde <HAL_UART_RegisterCallback+0x142>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d151      	bne.n	8006d8a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b0c      	cmp	r3, #12
 8006cea:	d845      	bhi.n	8006d78 <HAL_UART_RegisterCallback+0xdc>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <HAL_UART_RegisterCallback+0x58>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d31 	.word	0x08006d31
 8006cfc:	08006d39 	.word	0x08006d39
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d49 	.word	0x08006d49
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d59 	.word	0x08006d59
 8006d10:	08006d61 	.word	0x08006d61
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006d79 	.word	0x08006d79
 8006d1c:	08006d79 	.word	0x08006d79
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d71 	.word	0x08006d71
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006d2e:	e051      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006d36:	e04d      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006d3e:	e049      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006d46:	e045      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006d4e:	e041      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006d56:	e03d      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006d5e:	e039      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006d66:	e035      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006d6e:	e031      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006d76:	e02d      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
        break;
 8006d88:	e024      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d116      	bne.n	8006dc4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	2b0b      	cmp	r3, #11
 8006d9a:	d002      	beq.n	8006da2 <HAL_UART_RegisterCallback+0x106>
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d004      	beq.n	8006daa <HAL_UART_RegisterCallback+0x10e>
 8006da0:	e007      	b.n	8006db2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006da8:	e014      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006db0:	e010      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
        break;
 8006dc2:	e007      	b.n	8006dd4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop

08006dec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d11d      	bne.n	8006e42 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_UART_Receive_IT+0x26>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e016      	b.n	8006e44 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Receive_IT+0x38>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e00f      	b.n	8006e44 <HAL_UART_Receive_IT+0x58>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	461a      	mov	r2, r3
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fced 	bl	8007818 <UART_Start_Receive_IT>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	e000      	b.n	8006e44 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
  }
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d165      	bne.n	8006f32 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_UART_Transmit_DMA+0x26>
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e05e      	b.n	8006f34 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_UART_Transmit_DMA+0x38>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e057      	b.n	8006f34 <HAL_UART_Transmit_DMA+0xe8>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	88fa      	ldrh	r2, [r7, #6]
 8006e9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2221      	movs	r2, #33	; 0x21
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	4a22      	ldr	r2, [pc, #136]	; (8006f3c <HAL_UART_Transmit_DMA+0xf0>)
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <HAL_UART_Transmit_DMA+0xf4>)
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <HAL_UART_Transmit_DMA+0xf8>)
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	2200      	movs	r2, #0
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	6819      	ldr	r1, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	f7fb f8a0 	bl	8002028 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ef0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3314      	adds	r3, #20
 8006f00:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f1c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6a39      	ldr	r1, [r7, #32]
 8006f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3730      	adds	r7, #48	; 0x30
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	080076c9 	.word	0x080076c9
 8006f40:	08007765 	.word	0x08007765
 8006f44:	08007783 	.word	0x08007783

08006f48 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b09a      	sub	sp, #104	; 0x68
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f66:	667b      	str	r3, [r7, #100]	; 0x64
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f70:	657a      	str	r2, [r7, #84]	; 0x54
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3314      	adds	r3, #20
 8006fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d119      	bne.n	8006ff4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e5      	bne.n	8006fc0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d136      	bne.n	8007070 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	60bb      	str	r3, [r7, #8]
   return(result);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007018:	65bb      	str	r3, [r7, #88]	; 0x58
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007022:	61ba      	str	r2, [r7, #24]
 8007024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6979      	ldr	r1, [r7, #20]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	613b      	str	r3, [r7, #16]
   return(result);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	2200      	movs	r2, #0
 8007044:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	4618      	mov	r0, r3
 800704c:	f7fb f844 	bl	80020d8 <HAL_DMA_Abort>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	4618      	mov	r0, r3
 800705c:	f7fb fa66 	bl	800252c <HAL_DMA_GetError>
 8007060:	4603      	mov	r3, r0
 8007062:	2b20      	cmp	r3, #32
 8007064:	d104      	bne.n	8007070 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2210      	movs	r2, #16
 800706a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e00a      	b.n	8007086 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3768      	adds	r7, #104	; 0x68
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b0ba      	sub	sp, #232	; 0xe8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070bc:	2300      	movs	r3, #0
 80070be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_UART_IRQHandler+0x66>
 80070e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fcd9 	bl	8007aa6 <UART_Receive_IT>
      return;
 80070f4:	e25b      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80e1 	beq.w	80072c2 <HAL_UART_IRQHandler+0x232>
 8007100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80d4 	beq.w	80072c2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xae>
 8007126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0201 	orr.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_UART_IRQHandler+0xd2>
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f043 0202 	orr.w	r2, r3, #2
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <HAL_UART_IRQHandler+0xf6>
 800716e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0204 	orr.w	r2, r3, #4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d011      	beq.n	80071b6 <HAL_UART_IRQHandler+0x126>
 8007192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800719e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f043 0208 	orr.w	r2, r3, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81f2 	beq.w	80075a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_UART_IRQHandler+0x14e>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fc64 	bl	8007aa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	bf0c      	ite	eq
 80071ec:	2301      	moveq	r3, #1
 80071ee:	2300      	movne	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <HAL_UART_IRQHandler+0x17a>
 8007202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d051      	beq.n	80072ae <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fb6a 	bl	80078e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d142      	bne.n	80072a4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3314      	adds	r3, #20
 8007246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800724a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800724e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1d9      	bne.n	800721e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	2b00      	cmp	r3, #0
 8007270:	d013      	beq.n	800729a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	4a7f      	ldr	r2, [pc, #508]	; (8007474 <HAL_UART_IRQHandler+0x3e4>)
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	4618      	mov	r0, r3
 8007280:	f7fa ff9a 	bl	80021b8 <HAL_DMA_Abort_IT>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d019      	beq.n	80072be <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	e011      	b.n	80072be <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a2:	e00c      	b.n	80072be <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	e007      	b.n	80072be <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072bc:	e172      	b.n	80075a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072be:	bf00      	nop
    return;
 80072c0:	e170      	b.n	80075a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	f040 814c 	bne.w	8007564 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8145 	beq.w	8007564 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 813e 	beq.w	8007564 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072e8:	2300      	movs	r3, #0
 80072ea:	60bb      	str	r3, [r7, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	f040 80b5 	bne.w	8007478 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800731a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8142 	beq.w	80075a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800732c:	429a      	cmp	r2, r3
 800732e:	f080 813b 	bcs.w	80075a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007338:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007344:	f000 8088 	beq.w	8007458 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800735e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007366:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007374:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007380:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800738c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1d9      	bne.n	8007348 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e1      	bne.n	8007394 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3314      	adds	r3, #20
 80073f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e3      	bne.n	80073d0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800743a:	65ba      	str	r2, [r7, #88]	; 0x58
 800743c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	4618      	mov	r0, r3
 8007454:	f7fa fe40 	bl	80020d8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007464:	b292      	uxth	r2, r2
 8007466:	1a8a      	subs	r2, r1, r2
 8007468:	b292      	uxth	r2, r2
 800746a:	4611      	mov	r1, r2
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007470:	e09a      	b.n	80075a8 <HAL_UART_IRQHandler+0x518>
 8007472:	bf00      	nop
 8007474:	080079ab 	.word	0x080079ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007480:	b29b      	uxth	r3, r3
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 808c 	beq.w	80075ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 8087 	beq.w	80075ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	330c      	adds	r3, #12
 80074be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074c2:	647a      	str	r2, [r7, #68]	; 0x44
 80074c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e3      	bne.n	800749e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3314      	adds	r3, #20
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	623b      	str	r3, [r7, #32]
   return(result);
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3314      	adds	r3, #20
 80074f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074fa:	633a      	str	r2, [r7, #48]	; 0x30
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e3      	bne.n	80074d6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	330c      	adds	r3, #12
 8007522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60fb      	str	r3, [r7, #12]
   return(result);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007540:	61fa      	str	r2, [r7, #28]
 8007542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	617b      	str	r3, [r7, #20]
   return(result);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e3      	bne.n	800751c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007558:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800755c:	4611      	mov	r1, r2
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007562:	e023      	b.n	80075ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <HAL_UART_IRQHandler+0x4f4>
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa29 	bl	80079d4 <UART_Transmit_IT>
    return;
 8007582:	e014      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <HAL_UART_IRQHandler+0x51e>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa69 	bl	8007a74 <UART_EndTransmit_IT>
    return;
 80075a2:	e004      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
    return;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
      return;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_UART_IRQHandler+0x51e>
      return;
 80075ac:	bf00      	nop
  }
}
 80075ae:	37e8      	adds	r7, #232	; 0xe8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a10      	ldr	r2, [pc, #64]	; (80076a4 <UART_InitCallbacksToDefault+0x4c>)
 8007664:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a0f      	ldr	r2, [pc, #60]	; (80076a8 <UART_InitCallbacksToDefault+0x50>)
 800766a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a0f      	ldr	r2, [pc, #60]	; (80076ac <UART_InitCallbacksToDefault+0x54>)
 8007670:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a0e      	ldr	r2, [pc, #56]	; (80076b0 <UART_InitCallbacksToDefault+0x58>)
 8007676:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a0e      	ldr	r2, [pc, #56]	; (80076b4 <UART_InitCallbacksToDefault+0x5c>)
 800767c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a0d      	ldr	r2, [pc, #52]	; (80076b8 <UART_InitCallbacksToDefault+0x60>)
 8007682:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <UART_InitCallbacksToDefault+0x64>)
 8007688:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <UART_InitCallbacksToDefault+0x68>)
 800768e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <UART_InitCallbacksToDefault+0x6c>)
 8007694:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	080075c9 	.word	0x080075c9
 80076a8:	080075b5 	.word	0x080075b5
 80076ac:	080075dd 	.word	0x080075dd
 80076b0:	08001665 	.word	0x08001665
 80076b4:	080075f1 	.word	0x080075f1
 80076b8:	08007605 	.word	0x08007605
 80076bc:	08007619 	.word	0x08007619
 80076c0:	0800762d 	.word	0x0800762d
 80076c4:	08007641 	.word	0x08007641

080076c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b090      	sub	sp, #64	; 0x40
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d137      	bne.n	8007754 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	2200      	movs	r2, #0
 80076e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	623b      	str	r3, [r7, #32]
   return(result);
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007700:	63bb      	str	r3, [r7, #56]	; 0x38
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3314      	adds	r3, #20
 8007708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800770a:	633a      	str	r2, [r7, #48]	; 0x30
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e5      	bne.n	80076ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	60fb      	str	r3, [r7, #12]
   return(result);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773e:	61fa      	str	r2, [r7, #28]
 8007740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	69b9      	ldr	r1, [r7, #24]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	617b      	str	r3, [r7, #20]
   return(result);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e5      	bne.n	800771e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007752:	e003      	b.n	800775c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007758:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800775a:	4798      	blx	r3
}
 800775c:	bf00      	nop
 800775e:	3740      	adds	r7, #64	; 0x40
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b21      	cmp	r3, #33	; 0x21
 80077b4:	d108      	bne.n	80077c8 <UART_DMAError+0x46>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2200      	movs	r2, #0
 80077c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077c2:	68b8      	ldr	r0, [r7, #8]
 80077c4:	f000 f866 	bl	8007894 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	bf0c      	ite	eq
 80077d6:	2301      	moveq	r3, #1
 80077d8:	2300      	movne	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b22      	cmp	r3, #34	; 0x22
 80077e8:	d108      	bne.n	80077fc <UART_DMAError+0x7a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077f6:	68b8      	ldr	r0, [r7, #8]
 80077f8:	f000 f874 	bl	80078e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	f043 0210 	orr.w	r2, r3, #16
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780c:	68b8      	ldr	r0, [r7, #8]
 800780e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2222      	movs	r2, #34	; 0x22
 8007842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007864:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0201 	orr.w	r2, r2, #1
 8007874:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0220 	orr.w	r2, r2, #32
 8007884:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b089      	sub	sp, #36	; 0x24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	61ba      	str	r2, [r7, #24]
 80078be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6979      	ldr	r1, [r7, #20]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078d8:	bf00      	nop
 80078da:	3724      	adds	r7, #36	; 0x24
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b095      	sub	sp, #84	; 0x54
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	330c      	adds	r3, #12
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800790c:	643a      	str	r2, [r7, #64]	; 0x40
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	64bb      	str	r3, [r7, #72]	; 0x48
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3314      	adds	r3, #20
 800793e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007940:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	2b01      	cmp	r3, #1
 800795a:	d119      	bne.n	8007990 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	60bb      	str	r3, [r7, #8]
   return(result);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	647b      	str	r3, [r7, #68]	; 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800797c:	61ba      	str	r2, [r7, #24]
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6979      	ldr	r1, [r7, #20]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	613b      	str	r3, [r7, #16]
   return(result);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e5      	bne.n	800795c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800799e:	bf00      	nop
 80079a0:	3754      	adds	r7, #84	; 0x54
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b21      	cmp	r3, #33	; 0x21
 80079e6:	d13e      	bne.n	8007a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f0:	d114      	bne.n	8007a1c <UART_Transmit_IT+0x48>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d110      	bne.n	8007a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	1c9a      	adds	r2, r3, #2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]
 8007a1a:	e008      	b.n	8007a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6211      	str	r1, [r2, #32]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10f      	bne.n	8007a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e000      	b.n	8007a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a66:	2302      	movs	r3, #2
  }
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b08c      	sub	sp, #48	; 0x30
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b22      	cmp	r3, #34	; 0x22
 8007ab8:	f040 80ad 	bne.w	8007c16 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac4:	d117      	bne.n	8007af6 <UART_Receive_IT+0x50>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d113      	bne.n	8007af6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
 8007af4:	e026      	b.n	8007b44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b08:	d007      	beq.n	8007b1a <UART_Receive_IT+0x74>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <UART_Receive_IT+0x82>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e008      	b.n	8007b3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	4619      	mov	r1, r3
 8007b52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d15c      	bne.n	8007c12 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0220 	bic.w	r2, r2, #32
 8007b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d136      	bne.n	8007c06 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d10a      	bne.n	8007bf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007bfe:	4611      	mov	r1, r2
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	e003      	b.n	8007c0e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e002      	b.n	8007c18 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3730      	adds	r7, #48	; 0x30
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c24:	b0c0      	sub	sp, #256	; 0x100
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	68d9      	ldr	r1, [r3, #12]
 8007c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	ea40 0301 	orr.w	r3, r0, r1
 8007c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c78:	f021 010c 	bic.w	r1, r1, #12
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c86:	430b      	orrs	r3, r1
 8007c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9a:	6999      	ldr	r1, [r3, #24]
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	ea40 0301 	orr.w	r3, r0, r1
 8007ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b8f      	ldr	r3, [pc, #572]	; (8007eec <UART_SetConfig+0x2cc>)
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d005      	beq.n	8007cc0 <UART_SetConfig+0xa0>
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b8d      	ldr	r3, [pc, #564]	; (8007ef0 <UART_SetConfig+0x2d0>)
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d104      	bne.n	8007cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cc0:	f7fd ffb2 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8007cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cc8:	e003      	b.n	8007cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cca:	f7fd ff99 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8007cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cdc:	f040 810c 	bne.w	8007ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	1891      	adds	r1, r2, r2
 8007cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cfa:	415b      	adcs	r3, r3
 8007cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d02:	4621      	mov	r1, r4
 8007d04:	eb12 0801 	adds.w	r8, r2, r1
 8007d08:	4629      	mov	r1, r5
 8007d0a:	eb43 0901 	adc.w	r9, r3, r1
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d22:	4690      	mov	r8, r2
 8007d24:	4699      	mov	r9, r3
 8007d26:	4623      	mov	r3, r4
 8007d28:	eb18 0303 	adds.w	r3, r8, r3
 8007d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d30:	462b      	mov	r3, r5
 8007d32:	eb49 0303 	adc.w	r3, r9, r3
 8007d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d4e:	460b      	mov	r3, r1
 8007d50:	18db      	adds	r3, r3, r3
 8007d52:	653b      	str	r3, [r7, #80]	; 0x50
 8007d54:	4613      	mov	r3, r2
 8007d56:	eb42 0303 	adc.w	r3, r2, r3
 8007d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d64:	f7f8 fa38 	bl	80001d8 <__aeabi_uldivmod>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4b61      	ldr	r3, [pc, #388]	; (8007ef4 <UART_SetConfig+0x2d4>)
 8007d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	011c      	lsls	r4, r3, #4
 8007d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	1891      	adds	r1, r2, r2
 8007d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d90:	415b      	adcs	r3, r3
 8007d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d98:	4641      	mov	r1, r8
 8007d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d9e:	4649      	mov	r1, r9
 8007da0:	eb43 0b01 	adc.w	fp, r3, r1
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db8:	4692      	mov	sl, r2
 8007dba:	469b      	mov	fp, r3
 8007dbc:	4643      	mov	r3, r8
 8007dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8007dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007de4:	460b      	mov	r3, r1
 8007de6:	18db      	adds	r3, r3, r3
 8007de8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dea:	4613      	mov	r3, r2
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	647b      	str	r3, [r7, #68]	; 0x44
 8007df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dfa:	f7f8 f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	4b3b      	ldr	r3, [pc, #236]	; (8007ef4 <UART_SetConfig+0x2d4>)
 8007e06:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	2264      	movs	r2, #100	; 0x64
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e1a:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <UART_SetConfig+0x2d4>)
 8007e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e28:	441c      	add	r4, r3
 8007e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	1891      	adds	r1, r2, r2
 8007e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e44:	415b      	adcs	r3, r3
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	1851      	adds	r1, r2, r1
 8007e50:	6339      	str	r1, [r7, #48]	; 0x30
 8007e52:	4649      	mov	r1, r9
 8007e54:	414b      	adcs	r3, r1
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e64:	4659      	mov	r1, fp
 8007e66:	00cb      	lsls	r3, r1, #3
 8007e68:	4651      	mov	r1, sl
 8007e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6e:	4651      	mov	r1, sl
 8007e70:	00ca      	lsls	r2, r1, #3
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	4642      	mov	r2, r8
 8007e7a:	189b      	adds	r3, r3, r2
 8007e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e80:	464b      	mov	r3, r9
 8007e82:	460a      	mov	r2, r1
 8007e84:	eb42 0303 	adc.w	r3, r2, r3
 8007e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	18db      	adds	r3, r3, r3
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	eb42 0303 	adc.w	r3, r2, r3
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007eb6:	f7f8 f98f 	bl	80001d8 <__aeabi_uldivmod>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <UART_SetConfig+0x2d4>)
 8007ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	2164      	movs	r1, #100	; 0x64
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	3332      	adds	r3, #50	; 0x32
 8007ed2:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <UART_SetConfig+0x2d4>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	f003 0207 	and.w	r2, r3, #7
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4422      	add	r2, r4
 8007ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ee8:	e105      	b.n	80080f6 <UART_SetConfig+0x4d6>
 8007eea:	bf00      	nop
 8007eec:	40011000 	.word	0x40011000
 8007ef0:	40011400 	.word	0x40011400
 8007ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	1891      	adds	r1, r2, r2
 8007f10:	6239      	str	r1, [r7, #32]
 8007f12:	415b      	adcs	r3, r3
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
 8007f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	1854      	adds	r4, r2, r1
 8007f1e:	4649      	mov	r1, r9
 8007f20:	eb43 0501 	adc.w	r5, r3, r1
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	00eb      	lsls	r3, r5, #3
 8007f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f32:	00e2      	lsls	r2, r4, #3
 8007f34:	4614      	mov	r4, r2
 8007f36:	461d      	mov	r5, r3
 8007f38:	4643      	mov	r3, r8
 8007f3a:	18e3      	adds	r3, r4, r3
 8007f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f40:	464b      	mov	r3, r9
 8007f42:	eb45 0303 	adc.w	r3, r5, r3
 8007f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f66:	4629      	mov	r1, r5
 8007f68:	008b      	lsls	r3, r1, #2
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f70:	4621      	mov	r1, r4
 8007f72:	008a      	lsls	r2, r1, #2
 8007f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f78:	f7f8 f92e 	bl	80001d8 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4b60      	ldr	r3, [pc, #384]	; (8008104 <UART_SetConfig+0x4e4>)
 8007f82:	fba3 2302 	umull	r2, r3, r3, r2
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	011c      	lsls	r4, r3, #4
 8007f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	1891      	adds	r1, r2, r2
 8007fa2:	61b9      	str	r1, [r7, #24]
 8007fa4:	415b      	adcs	r3, r3
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fac:	4641      	mov	r1, r8
 8007fae:	1851      	adds	r1, r2, r1
 8007fb0:	6139      	str	r1, [r7, #16]
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	414b      	adcs	r3, r1
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	00cb      	lsls	r3, r1, #3
 8007fc8:	4651      	mov	r1, sl
 8007fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fce:	4651      	mov	r1, sl
 8007fd0:	00ca      	lsls	r2, r1, #3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4642      	mov	r2, r8
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	eb42 0303 	adc.w	r3, r2, r3
 8007fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008004:	4649      	mov	r1, r9
 8008006:	008b      	lsls	r3, r1, #2
 8008008:	4641      	mov	r1, r8
 800800a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800e:	4641      	mov	r1, r8
 8008010:	008a      	lsls	r2, r1, #2
 8008012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008016:	f7f8 f8df 	bl	80001d8 <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b39      	ldr	r3, [pc, #228]	; (8008104 <UART_SetConfig+0x4e4>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	; 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	3332      	adds	r3, #50	; 0x32
 8008032:	4a34      	ldr	r2, [pc, #208]	; (8008104 <UART_SetConfig+0x4e4>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800803e:	441c      	add	r4, r3
 8008040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008044:	2200      	movs	r2, #0
 8008046:	673b      	str	r3, [r7, #112]	; 0x70
 8008048:	677a      	str	r2, [r7, #116]	; 0x74
 800804a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800804e:	4642      	mov	r2, r8
 8008050:	464b      	mov	r3, r9
 8008052:	1891      	adds	r1, r2, r2
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	415b      	adcs	r3, r3
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800805e:	4641      	mov	r1, r8
 8008060:	1851      	adds	r1, r2, r1
 8008062:	6039      	str	r1, [r7, #0]
 8008064:	4649      	mov	r1, r9
 8008066:	414b      	adcs	r3, r1
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008076:	4659      	mov	r1, fp
 8008078:	00cb      	lsls	r3, r1, #3
 800807a:	4651      	mov	r1, sl
 800807c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008080:	4651      	mov	r1, sl
 8008082:	00ca      	lsls	r2, r1, #3
 8008084:	4610      	mov	r0, r2
 8008086:	4619      	mov	r1, r3
 8008088:	4603      	mov	r3, r0
 800808a:	4642      	mov	r2, r8
 800808c:	189b      	adds	r3, r3, r2
 800808e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008090:	464b      	mov	r3, r9
 8008092:	460a      	mov	r2, r1
 8008094:	eb42 0303 	adc.w	r3, r2, r3
 8008098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	663b      	str	r3, [r7, #96]	; 0x60
 80080a4:	667a      	str	r2, [r7, #100]	; 0x64
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080b2:	4649      	mov	r1, r9
 80080b4:	008b      	lsls	r3, r1, #2
 80080b6:	4641      	mov	r1, r8
 80080b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080bc:	4641      	mov	r1, r8
 80080be:	008a      	lsls	r2, r1, #2
 80080c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080c4:	f7f8 f888 	bl	80001d8 <__aeabi_uldivmod>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <UART_SetConfig+0x4e4>)
 80080ce:	fba3 1302 	umull	r1, r3, r3, r2
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	2164      	movs	r1, #100	; 0x64
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	3332      	adds	r3, #50	; 0x32
 80080e0:	4a08      	ldr	r2, [pc, #32]	; (8008104 <UART_SetConfig+0x4e4>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4422      	add	r2, r4
 80080f4:	609a      	str	r2, [r3, #8]
}
 80080f6:	bf00      	nop
 80080f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080fc:	46bd      	mov	sp, r7
 80080fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008102:	bf00      	nop
 8008104:	51eb851f 	.word	0x51eb851f

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	; (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	; (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	; (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	; (800814c <__libc_init_array+0x44>)
 800811c:	f000 f82e 	bl	800817c <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	080081bc 	.word	0x080081bc
 8008144:	080081bc 	.word	0x080081bc
 8008148:	080081bc 	.word	0x080081bc
 800814c:	080081c0 	.word	0x080081c0

08008150 <memcpy>:
 8008150:	440a      	add	r2, r1
 8008152:	4291      	cmp	r1, r2
 8008154:	f100 33ff 	add.w	r3, r0, #4294967295
 8008158:	d100      	bne.n	800815c <memcpy+0xc>
 800815a:	4770      	bx	lr
 800815c:	b510      	push	{r4, lr}
 800815e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008166:	4291      	cmp	r1, r2
 8008168:	d1f9      	bne.n	800815e <memcpy+0xe>
 800816a:	bd10      	pop	{r4, pc}

0800816c <memset>:
 800816c:	4402      	add	r2, r0
 800816e:	4603      	mov	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	d100      	bne.n	8008176 <memset+0xa>
 8008174:	4770      	bx	lr
 8008176:	f803 1b01 	strb.w	r1, [r3], #1
 800817a:	e7f9      	b.n	8008170 <memset+0x4>

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
