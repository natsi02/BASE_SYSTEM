
BASE_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080dc  080080dc  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080080e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  20000228  0800830c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  0800830c  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001557d  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8e  00000000  00000000  000357d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00039508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179af  00000000  00000000  0003a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cfc  00000000  00000000  00051e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091225  00000000  00000000  00067b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000f8db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000228 	.word	0x20000228
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800809c 	.word	0x0800809c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000022c 	.word	0x2000022c
 80001d4:	0800809c 	.word	0x0800809c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ENDEFF_SOFT_RESET>:
#include "ModBusRTU.h"

#define SLAVE_ADDR (0x15<<1) //End Effector Address
uint32_t timestamp;
int complete;
void ENDEFF_SOFT_RESET(I2C_HandleTypeDef *hi2c) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0x00, 0xFF, 0x55, 0xAA };
	if (HAL_GetTick() - timestamp >= 10) {
 80004e4:	f001 fb64 	bl	8001bb0 <HAL_GetTick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	d911      	bls.n	8000518 <ENDEFF_SOFT_RESET+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2304      	movs	r3, #4
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <ENDEFF_SOFT_RESET+0x48>)
 80004fe:	212a      	movs	r1, #42	; 0x2a
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f002 fb71 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000506:	f001 fb53 	bl	8001bb0 <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <ENDEFF_SOFT_RESET+0x44>)
 800050e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <ENDEFF_SOFT_RESET+0x4c>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
		return;
 8000516:	bf00      	nop
	}
}
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000244 	.word	0x20000244
 8000524:	20000000 	.word	0x20000000
 8000528:	20000248 	.word	0x20000248

0800052c <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000534:	f001 fb3c 	bl	8001bb0 <HAL_GetTick>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	2b09      	cmp	r3, #9
 8000542:	d911      	bls.n	8000568 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2302      	movs	r3, #2
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <ENDEFF_TEST_MODE+0x48>)
 800054e:	212a      	movs	r1, #42	; 0x2a
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f002 fb49 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000556:	f001 fb2b 	bl	8001bb0 <HAL_GetTick>
 800055a:	4603      	mov	r3, r0
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <ENDEFF_TEST_MODE+0x44>)
 800055e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <ENDEFF_TEST_MODE+0x4c>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		return;
 8000566:	bf00      	nop
	}
}
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000244 	.word	0x20000244
 8000574:	20000004 	.word	0x20000004
 8000578:	20000248 	.word	0x20000248

0800057c <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8000584:	f001 fb14 	bl	8001bb0 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2b09      	cmp	r3, #9
 8000592:	d911      	bls.n	80005b8 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800059e:	212a      	movs	r1, #42	; 0x2a
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fb21 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005a6:	f001 fb03 	bl	8001bb0 <HAL_GetTick>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <ENDEFF_TEST_MODE_QUIT+0x44>)
 80005ae:	6013      	str	r3, [r2, #0]
		complete = 1;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
		return;
 80005b6:	bf00      	nop
	}
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000244 	.word	0x20000244
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000248 	.word	0x20000248

080005cc <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80005d4:	f001 faec 	bl	8001bb0 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	d911      	bls.n	8000608 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80005ee:	212a      	movs	r1, #42	; 0x2a
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f002 faf9 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80005f6:	f001 fadb 	bl	8001bb0 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
		return;
 8000606:	bf00      	nop
	}
}
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000244 	.word	0x20000244
 8000614:	2000000c 	.word	0x2000000c
 8000618:	20000248 	.word	0x20000248

0800061c <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8000624:	f001 fac4 	bl	8001bb0 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b09      	cmp	r3, #9
 8000632:	d911      	bls.n	8000658 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <ENDEFF_GRIPPER_IDLE+0x48>)
 800063e:	212a      	movs	r1, #42	; 0x2a
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f002 fad1 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000646:	f001 fab3 	bl	8001bb0 <HAL_GetTick>
 800064a:	4603      	mov	r3, r0
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <ENDEFF_GRIPPER_IDLE+0x44>)
 800064e:	6013      	str	r3, [r2, #0]
		complete = 1;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ENDEFF_GRIPPER_IDLE+0x4c>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
		return;
 8000656:	bf00      	nop
	}
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000244 	.word	0x20000244
 8000664:	20000010 	.word	0x20000010
 8000668:	20000248 	.word	0x20000248

0800066c <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8000674:	f001 fa9c 	bl	8001bb0 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000684:	d311      	bcc.n	80006aa <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ENDEFF_GRIPPER_PICK+0x48>)
 8000690:	212a      	movs	r1, #42	; 0x2a
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f002 faa8 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8000698:	f001 fa8a 	bl	8001bb0 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <ENDEFF_GRIPPER_PICK+0x44>)
 80006a0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <ENDEFF_GRIPPER_PICK+0x4c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
		return;
 80006a8:	bf00      	nop
	}
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000244 	.word	0x20000244
 80006b4:	20000014 	.word	0x20000014
 80006b8:	20000248 	.word	0x20000248

080006bc <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80006c4:	f001 fa74 	bl	8001bb0 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006d4:	d311      	bcc.n	80006fa <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <ENDEFF_GRIPPER_PLACE+0x48>)
 80006e0:	212a      	movs	r1, #42	; 0x2a
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 fa80 	bl	8002be8 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80006e8:	f001 fa62 	bl	8001bb0 <HAL_GetTick>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <ENDEFF_GRIPPER_PLACE+0x44>)
 80006f0:	6013      	str	r3, [r2, #0]
		complete = 1;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
		return;
 80006f8:	bf00      	nop
	}
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000244 	.word	0x20000244
 8000704:	20000018 	.word	0x20000018
 8000708:	20000248 	.word	0x20000248

0800070c <I2C_TO_BASESYSTEM>:


void I2C_TO_BASESYSTEM(uint16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 8000716:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	f200 810d 	bhi.w	800093a <I2C_TO_BASESYSTEM+0x22e>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <I2C_TO_BASESYSTEM+0x1c>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007eb 	.word	0x080007eb
 8000734:	080008a9 	.word	0x080008a9
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00e      	beq.n	8000762 <I2C_TO_BASESYSTEM+0x56>
			ENDEFF_TEST_MODE(hi2c);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff fef1 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800074a:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80ec 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = TEST;
 8000754:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8000760:	e0e4      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 80de 	beq.w	800092c <I2C_TO_BASESYSTEM+0x220>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8000770:	6838      	ldr	r0, [r7, #0]
 8000772:	f7ff ff2b 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 80d6 	bne.w	800092c <I2C_TO_BASESYSTEM+0x220>
				END_EFFECTOR_STATE = RUNMODE;
 8000780:	4b70      	ldr	r3, [pc, #448]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000786:	4b70      	ldr	r3, [pc, #448]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e0ce      	b.n	800092c <I2C_TO_BASESYSTEM+0x220>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10e      	bne.n	80007b8 <I2C_TO_BASESYSTEM+0xac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800079a:	6838      	ldr	r0, [r7, #0]
 800079c:	f7ff feee 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 80c3 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = INIT;
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 80007b6:	e0bb      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 80b5 	beq.w	8000930 <I2C_TO_BASESYSTEM+0x224>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f7ff fed8 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f7ff fefd 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 80aa 	bne.w	8000930 <I2C_TO_BASESYSTEM+0x224>
				END_EFFECTOR_STATE = RUNMODE;
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80007de:	2202      	movs	r2, #2
 80007e0:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80007e2:	4b59      	ldr	r3, [pc, #356]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		break;
 80007e8:	e0a2      	b.n	8000930 <I2C_TO_BASESYSTEM+0x224>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10e      	bne.n	8000814 <I2C_TO_BASESYSTEM+0x108>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80007f6:	6838      	ldr	r0, [r7, #0]
 80007f8:	f7ff ff10 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f040 8097 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = INIT;
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800080c:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8000812:	e08f      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0001) == 1) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00e      	beq.n	800083e <I2C_TO_BASESYSTEM+0x132>
			ENDEFF_TEST_MODE(hi2c);
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f7ff fe83 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 8082 	bne.w	8000934 <I2C_TO_BASESYSTEM+0x228>
				END_EFFECTOR_STATE = TEST;
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
		break;
 800083c:	e07a      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	2b00      	cmp	r3, #0
 8000848:	d013      	beq.n	8000872 <I2C_TO_BASESYSTEM+0x166>
			ENDEFF_GRIPPER_PICK(hi2c);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff ff0e 	bl	800066c <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8000850:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d16d      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				*DataFrame = 0b0010;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
				picked = 1;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
		break;
 8000870:	e060      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d05a      	beq.n	8000934 <I2C_TO_BASESYSTEM+0x228>
			if (picked == 1) {
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d156      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8000886:	6838      	ldr	r0, [r7, #0]
 8000888:	f7ff ff18 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d14f      	bne.n	8000934 <I2C_TO_BASESYSTEM+0x228>
					*DataFrame = 0b0010;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2202      	movs	r2, #2
 8000898:	801a      	strh	r2, [r3, #0]
					complete = 0;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
					picked = 0;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e045      	b.n	8000934 <I2C_TO_BASESYSTEM+0x228>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10d      	bne.n	80008d0 <I2C_TO_BASESYSTEM+0x1c4>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80008b4:	6838      	ldr	r0, [r7, #0]
 80008b6:	f7ff feb1 	bl	800061c <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d13a      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = INIT;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80008ce:	e033      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b0001) == 1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00d      	beq.n	80008f8 <I2C_TO_BASESYSTEM+0x1ec>
			ENDEFF_TEST_MODE(hi2c);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f7ff fe25 	bl	800052c <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d126      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				END_EFFECTOR_STATE = TEST;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e01f      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d019      	beq.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
			ENDEFF_GRIPPER_PLACE(hi2c);
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f7ff fed9 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d112      	bne.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
				*DataFrame = 0b0010;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2202      	movs	r2, #2
 8000916:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <I2C_TO_BASESYSTEM+0x238>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <I2C_TO_BASESYSTEM+0x23c>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
				picked = 0;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <I2C_TO_BASESYSTEM+0x240>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		break;
 800092a:	e005      	b.n	8000938 <I2C_TO_BASESYSTEM+0x22c>
		break;
 800092c:	bf00      	nop
 800092e:	e004      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000930:	bf00      	nop
 8000932:	e002      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000934:	bf00      	nop
 8000936:	e000      	b.n	800093a <I2C_TO_BASESYSTEM+0x22e>
		break;
 8000938:	bf00      	nop
	}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000024c 	.word	0x2000024c
 8000948:	20000248 	.word	0x20000248
 800094c:	20000250 	.word	0x20000250

08000950 <UARTInterruptConfig>:
#include "usart.h"

#define BUFFER_SIZE 6
uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <UARTInterruptConfig+0x14>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <UARTInterruptConfig+0x18>)
 800095a:	f006 f9d7 	bl	8006d0c <HAL_UART_Receive_IT>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000254 	.word	0x20000254
 8000968:	20000a04 	.word	0x20000a04

0800096c <Joystick_Received>:
//	}
//	else for(int j = 0; j< BUFFER_SIZE;j++) RxBuffer[j] = 0;
//	HAL_UART_Receive_IT(&huart1, RxBuffer, sizeof(RxBuffer));
//}

void Joystick_Received(int *receivedByte) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	static int count;
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8000974:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <Joystick_Received+0x108>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <Joystick_Received+0x16>
 800097c:	2b01      	cmp	r3, #1
 800097e:	d008      	beq.n	8000992 <Joystick_Received+0x26>
 8000980:	e06f      	b.n	8000a62 <Joystick_Received+0xf6>
	case (START):
		if (RxBuffer[0] == 69) {
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <Joystick_Received+0x10c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b45      	cmp	r3, #69	; 0x45
 8000988:	d16a      	bne.n	8000a60 <Joystick_Received+0xf4>
			Joy_State = COUNT;
 800098a:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <Joystick_Received+0x108>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000990:	e066      	b.n	8000a60 <Joystick_Received+0xf4>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <Joystick_Received+0x10c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b45      	cmp	r3, #69	; 0x45
 8000998:	d112      	bne.n	80009c0 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(receivedByte); i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e008      	b.n	80009b2 <Joystick_Received+0x46>
				receivedByte[i] = 0;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d9f3      	bls.n	80009a0 <Joystick_Received+0x34>
			}
			count = 0;
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <Joystick_Received+0x110>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
		} else {
			receivedByte[count] = RxBuffer[0];
			if(receivedByte[count] > UINT8_MAX/2) receivedByte[count] -= UINT8_MAX+1;
			count++;
		}
		break;
 80009be:	e050      	b.n	8000a62 <Joystick_Received+0xf6>
		} else if (RxBuffer[0] == 71 && count < 4) {
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <Joystick_Received+0x10c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b47      	cmp	r3, #71	; 0x47
 80009c6:	d116      	bne.n	80009f6 <Joystick_Received+0x8a>
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <Joystick_Received+0x110>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	dc12      	bgt.n	80009f6 <Joystick_Received+0x8a>
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e008      	b.n	80009e8 <Joystick_Received+0x7c>
				receivedByte[i] = 0;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d9f3      	bls.n	80009d6 <Joystick_Received+0x6a>
			count = 0;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <Joystick_Received+0x110>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e033      	b.n	8000a5e <Joystick_Received+0xf2>
		} else if (RxBuffer[0] == 71 && count == 4) {
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <Joystick_Received+0x10c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b47      	cmp	r3, #71	; 0x47
 80009fc:	d10a      	bne.n	8000a14 <Joystick_Received+0xa8>
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <Joystick_Received+0x110>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d106      	bne.n	8000a14 <Joystick_Received+0xa8>
			count = 0;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <Joystick_Received+0x110>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <Joystick_Received+0x108>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e024      	b.n	8000a5e <Joystick_Received+0xf2>
			receivedByte[count] = RxBuffer[0];
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <Joystick_Received+0x10c>)
 8000a16:	7819      	ldrb	r1, [r3, #0]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <Joystick_Received+0x110>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	460a      	mov	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
			if(receivedByte[count] > UINT8_MAX/2) receivedByte[count] -= UINT8_MAX+1;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <Joystick_Received+0x110>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b7f      	cmp	r3, #127	; 0x7f
 8000a34:	dd0d      	ble.n	8000a52 <Joystick_Received+0xe6>
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <Joystick_Received+0x110>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <Joystick_Received+0x110>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000a50:	601a      	str	r2, [r3, #0]
			count++;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <Joystick_Received+0x110>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <Joystick_Received+0x110>)
 8000a5a:	6013      	str	r3, [r2, #0]
		break;
 8000a5c:	e001      	b.n	8000a62 <Joystick_Received+0xf6>
 8000a5e:	e000      	b.n	8000a62 <Joystick_Received+0xf6>
		break;
 8000a60:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <Joystick_Received+0x10c>)
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <Joystick_Received+0x114>)
 8000a68:	f006 f950 	bl	8006d0c <HAL_UART_Receive_IT>
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000255 	.word	0x20000255
 8000a78:	20000254 	.word	0x20000254
 8000a7c:	20000258 	.word	0x20000258
 8000a80:	20000a04 	.word	0x20000a04

08000a84 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <modbus_1t5_Timeout+0x1c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2201      	movs	r2, #1
 8000a92:	751a      	strb	r2, [r3, #20]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000025c 	.word	0x2000025c

08000aa4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <modbus_3t5_Timeout+0x1c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	755a      	strb	r2, [r3, #21]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	2000025c 	.word	0x2000025c

08000ac4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000ade:	1c59      	adds	r1, r3, #1
 8000ae0:	b289      	uxth	r1, r1
 8000ae2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000aea:	d210      	bcs.n	8000b0e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68d8      	ldr	r0, [r3, #12]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000afe:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000b02:	4413      	add	r3, r2
 8000b04:	3302      	adds	r3, #2
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f006 f8ff 	bl	8006d0c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <modbus_UART_Recived+0x60>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000025c 	.word	0x2000025c

08000b28 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <Modbus_init+0x9c>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <Modbus_init+0x9c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <Modbus_init+0x9c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <Modbus_init+0xa0>)
 8000b48:	2114      	movs	r1, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 fbea 	bl	8006324 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <Modbus_init+0x9c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <Modbus_init+0xa4>)
 8000b58:	210e      	movs	r1, #14
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fbe2 	bl	8006324 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <Modbus_init+0x9c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <Modbus_init+0xa8>)
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 f826 	bl	8006bbc <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <Modbus_init+0x9c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68d8      	ldr	r0, [r3, #12]
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <Modbus_init+0x9c>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <Modbus_init+0x9c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000b82:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000b86:	4413      	add	r3, r2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f006 f8bd 	bl	8006d0c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <Modbus_init+0x9c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d10c      	bne.n	8000bbc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <Modbus_init+0x9c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 f83d 	bl	8005c28 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <Modbus_init+0x9c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 f966 	bl	8005e88 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000025c 	.word	0x2000025c
 8000bc8:	08000a85 	.word	0x08000a85
 8000bcc:	08000aa5 	.word	0x08000aa5
 8000bd0:	08000ac5 	.word	0x08000ac5

08000bd4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000be0:	23ff      	movs	r3, #255	; 0xff
 8000be2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000be4:	23ff      	movs	r3, #255	; 0xff
 8000be6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000be8:	e013      	b.n	8000c12 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <CRC16+0x64>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	4053      	eors	r3, r2
 8000c06:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <CRC16+0x68>)
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	1e5a      	subs	r2, r3, #1
 8000c16:	803a      	strh	r2, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1e6      	bne.n	8000bea <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	b29b      	uxth	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	2000001c 	.word	0x2000001c

08000c40 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000c46:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	7e1b      	ldrb	r3, [r3, #24]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d80a      	bhi.n	8000c68 <Modbus_Protocal_Worker+0x28>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <Modbus_Protocal_Worker+0x18>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c73 	.word	0x08000c73
 8000c5c:	08000e13 	.word	0x08000e13
 8000c60:	08000cff 	.word	0x08000cff
 8000c64:	08000d25 	.word	0x08000d25
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000c68:	4b78      	ldr	r3, [pc, #480]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	761a      	strb	r2, [r3, #24]
		break;
 8000c70:	e0e8      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000c72:	4b76      	ldr	r3, [pc, #472]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000c7e:	f000 f9dd 	bl	800103c <Modbus_Emission>
 8000c82:	e01c      	b.n	8000cbe <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000c84:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	7d9b      	ldrb	r3, [r3, #22]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d017      	beq.n	8000cbe <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000c96:	4b6d      	ldr	r3, [pc, #436]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000c9e:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0201 	orr.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000cb6:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b20      	cmp	r3, #32
 8000ccc:	f040 80b3 	bne.w	8000e36 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000cd0:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000cda:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68d8      	ldr	r0, [r3, #12]
 8000ce0:	4b5a      	ldr	r3, [pc, #360]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000cec:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f006 f808 	bl	8006d0c <HAL_UART_Receive_IT>
		}
		break;
 8000cfc:	e09b      	b.n	8000e36 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000cfe:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	7d1b      	ldrb	r3, [r3, #20]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8098 	beq.w	8000e3a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	22fe      	movs	r2, #254	; 0xfe
 8000d18:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2204      	movs	r2, #4
 8000d20:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000d22:	e08a      	b.n	8000e3a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000d24:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	7d9b      	ldrb	r3, [r3, #22]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000d3a:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000d4a:	f113 0f02 	cmn.w	r3, #2
 8000d4e:	d150      	bne.n	8000df2 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000d50:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000d58:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f7ff ff31 	bl	8000bd4 <CRC16>
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000d76:	793a      	ldrb	r2, [r7, #4]
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d7a:	6819      	ldr	r1, [r3, #0]
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000d84:	3b02      	subs	r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d10c      	bne.n	8000daa <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000d90:	797a      	ldrb	r2, [r7, #5]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	440b      	add	r3, r1
 8000da2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d004      	beq.n	8000db4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	75da      	strb	r2, [r3, #23]
				break;
 8000db2:	e047      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d113      	bne.n	8000dee <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000dd6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000de0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000de2:	461a      	mov	r2, r3
 8000de4:	f007 f944 	bl	8008070 <memcpy>

			//execute command
			Modbus_frame_response();
 8000de8:	f000 f910 	bl	800100c <Modbus_frame_response>
 8000dec:	e001      	b.n	8000df2 <Modbus_Protocal_Worker+0x1b2>
				break;
 8000dee:	bf00      	nop
					}
		break;


	}
}
 8000df0:	e028      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	7d5b      	ldrb	r3, [r3, #21]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 f82c 	bl	8006e68 <HAL_UART_AbortReceive>
		break;
 8000e10:	e015      	b.n	8000e3e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b20      	cmp	r3, #32
 8000e20:	d10f      	bne.n	8000e42 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <Modbus_Protocal_Worker+0x20c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2201      	movs	r2, #1
 8000e32:	761a      	strb	r2, [r3, #24]
		break;
 8000e34:	e005      	b.n	8000e42 <Modbus_Protocal_Worker+0x202>
		break;
 8000e36:	bf00      	nop
 8000e38:	e004      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
		break;
 8000e3a:	bf00      	nop
 8000e3c:	e002      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
		break;
 8000e3e:	bf00      	nop
 8000e40:	e000      	b.n	8000e44 <Modbus_Protocal_Worker+0x204>
		break;
 8000e42:	bf00      	nop
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000025c 	.word	0x2000025c

08000e50 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	7e9b      	ldrb	r3, [r3, #26]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	7edb      	ldrb	r3, [r3, #27]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d903      	bls.n	8000e82 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f000 f8a4 	bl	8000fc8 <ModbusErrorReply>
			 return;
 8000e80:	e023      	b.n	8000eca <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	440b      	add	r3, r1
 8000e92:	7f12      	ldrb	r2, [r2, #28]
 8000e94:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6859      	ldr	r1, [r3, #4]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	440b      	add	r3, r1
 8000ea6:	7f52      	ldrb	r2, [r2, #29]
 8000ea8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f007 f8d8 	bl	8008070 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <modbusWrite1Register+0x80>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000025c 	.word	0x2000025c

08000ed4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	7f5b      	ldrb	r3, [r3, #29]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7e9b      	ldrb	r3, [r3, #26]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	7edb      	ldrb	r3, [r3, #27]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <modbusRead1Register+0x42>
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	2b7d      	cmp	r3, #125	; 0x7d
 8000f14:	d903      	bls.n	8000f1e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f856 	bl	8000fc8 <ModbusErrorReply>
		 return;
 8000f1c:	e04e      	b.n	8000fbc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000f1e:	88ba      	ldrh	r2, [r7, #4]
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d808      	bhi.n	8000f3c <modbusRead1Register+0x68>
 8000f2a:	88ba      	ldrh	r2, [r7, #4]
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d903      	bls.n	8000f44 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f000 f843 	bl	8000fc8 <ModbusErrorReply>
		 return;
 8000f42:	e03b      	b.n	8000fbc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000f5e:	2400      	movs	r4, #0
 8000f60:	e020      	b.n	8000fa4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	4423      	add	r3, r4
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	18d1      	adds	r1, r2, r3
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	1c63      	adds	r3, r4, #1
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	7849      	ldrb	r1, [r1, #1]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	4423      	add	r3, r4
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	18d1      	adds	r1, r2, r3
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	0063      	lsls	r3, r4, #1
 8000f96:	3303      	adds	r3, #3
 8000f98:	7809      	ldrb	r1, [r1, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000fa2:	3401      	adds	r4, #1
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	dbdb      	blt.n	8000f62 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <modbusRead1Register+0xf0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0052      	lsls	r2, r2, #1
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000025c 	.word	0x2000025c

08000fc8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <ModbusErrorReply+0x40>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	7e5a      	ldrb	r2, [r3, #25]
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <ModbusErrorReply+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ModbusErrorReply+0x40>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <ModbusErrorReply+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000025c 	.word	0x2000025c

0800100c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <Modbus_frame_response+0x2c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	7e5b      	ldrb	r3, [r3, #25]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d004      	beq.n	8001024 <Modbus_frame_response+0x18>
 800101a:	2b06      	cmp	r3, #6
 800101c:	d105      	bne.n	800102a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800101e:	f7ff ff17 	bl	8000e50 <modbusWrite1Register>
		break;
 8001022:	e006      	b.n	8001032 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001024:	f7ff ff56 	bl	8000ed4 <modbusRead1Register>
		break;
 8001028:	e003      	b.n	8001032 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ffcc 	bl	8000fc8 <ModbusErrorReply>
		break;
 8001030:	bf00      	nop

	}
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000025c 	.word	0x2000025c

0800103c <Modbus_Emission>:

void Modbus_Emission()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <Modbus_Emission+0xfc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b20      	cmp	r3, #32
 8001050:	d15e      	bne.n	8001110 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <Modbus_Emission+0xfc>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <Modbus_Emission+0xfc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <Modbus_Emission+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001068:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <Modbus_Emission+0xfc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <Modbus_Emission+0xfc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800107a:	461a      	mov	r2, r3
 800107c:	f006 fff8 	bl	8008070 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <Modbus_Emission+0xfc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <Modbus_Emission+0xfc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3203      	adds	r2, #3
 8001090:	b292      	uxth	r2, r2
 8001092:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <Modbus_Emission+0xfc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <Modbus_Emission+0xfc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80010a6:	3b02      	subs	r3, #2
 80010a8:	4619      	mov	r1, r3
 80010aa:	4610      	mov	r0, r2
 80010ac:	f7ff fd92 	bl	8000bd4 <CRC16>
 80010b0:	4603      	mov	r3, r0
 80010b2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <Modbus_Emission+0xfc>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <Modbus_Emission+0xfc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80010c0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80010c2:	7939      	ldrb	r1, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	460a      	mov	r2, r1
 80010c8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <Modbus_Emission+0xfc>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <Modbus_Emission+0xfc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80010d8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80010da:	7979      	ldrb	r1, [r7, #5]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <Modbus_Emission+0xfc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b20      	cmp	r3, #32
 80010f2:	d10d      	bne.n	8001110 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <Modbus_Emission+0xfc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <Modbus_Emission+0xfc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <Modbus_Emission+0xfc>)
 8001104:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001106:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800110a:	461a      	mov	r2, r3
 800110c:	f005 fe2e 	bl	8006d6c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <Modbus_Emission+0xfc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <Modbus_Emission+0xfc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <Modbus_Emission+0xfc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <Modbus_Emission+0xfc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2202      	movs	r2, #2
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000025c 	.word	0x2000025c

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <MX_DMA_Init+0x3c>)
 800114c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2011      	movs	r0, #17
 8001164:	f000 fe0b 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001168:	2011      	movs	r0, #17
 800116a:	f000 fe24 	bl	8001db6 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a2c      	ldr	r2, [pc, #176]	; (800124c <MX_GPIO_Init+0xd0>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_GPIO_Init+0xd4>)
 8001208:	f001 fb90 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_GPIO_Init+0xd8>)
 8001224:	f001 f9fe 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001228:	2320      	movs	r3, #32
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_GPIO_Init+0xd4>)
 8001240:	f001 f9f0 	bl	8002624 <HAL_GPIO_Init>

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020800 	.word	0x40020800

08001258 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f001 fb63 	bl	8002960 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f9c0 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000260 	.word	0x20000260
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <HAL_I2C_MspInit+0xa4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d13b      	bne.n	800134e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_I2C_MspInit+0xa8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_I2C_MspInit+0xa8>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_I2C_MspInit+0xa8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f2:	23c0      	movs	r3, #192	; 0xc0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001302:	2304      	movs	r3, #4
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4814      	ldr	r0, [pc, #80]	; (8001360 <HAL_I2C_MspInit+0xac>)
 800130e:	f001 f989 	bl	8002624 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_I2C_MspInit+0xa8>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_I2C_MspInit+0xa8>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_I2C_MspInit+0xa8>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201f      	movs	r0, #31
 8001334:	f000 fd23 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001338:	201f      	movs	r0, #31
 800133a:	f000 fd3c 	bl	8001db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2020      	movs	r0, #32
 8001344:	f000 fd1b 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001348:	2020      	movs	r0, #32
 800134a:	f000 fd34 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40005400 	.word	0x40005400
 800135c:	40023800 	.word	0x40023800
 8001360:	40020400 	.word	0x40020400

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136a:	f000 fbbb 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136e:	f000 f8dd 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001372:	f7ff ff03 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8001376:	f7ff fee1 	bl	800113c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800137a:	f000 fa9f 	bl	80018bc <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800137e:	f000 f9f7 	bl	8001770 <MX_TIM11_Init>
  MX_I2C1_Init();
 8001382:	f7ff ff69 	bl	8001258 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001386:	f000 fa6f 	bl	8001868 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <main+0x18c>)
 800138c:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <main+0x190>)
 800138e:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8001390:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <main+0x18c>)
 8001392:	4a59      	ldr	r2, [pc, #356]	; (80014f8 <main+0x194>)
 8001394:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <main+0x18c>)
 8001398:	2215      	movs	r2, #21
 800139a:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <main+0x18c>)
 800139e:	22c8      	movs	r2, #200	; 0xc8
 80013a0:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80013a2:	4956      	ldr	r1, [pc, #344]	; (80014fc <main+0x198>)
 80013a4:	4852      	ldr	r0, [pc, #328]	; (80014f0 <main+0x18c>)
 80013a6:	f7ff fbbf 	bl	8000b28 <Modbus_init>
  UARTInterruptConfig();
 80013aa:	f7ff fad1 	bl	8000950 <UARTInterruptConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 80013ae:	f7ff fc47 	bl	8000c40 <Modbus_Protocal_Worker>
	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() >= timestamp){
 80013b2:	f000 fbfd 	bl	8001bb0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <main+0x19c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d309      	bcc.n	80013d4 <main+0x70>
	  	timestamp = HAL_GetTick() + 200;
 80013c0:	f000 fbf6 	bl	8001bb0 <HAL_GetTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	33c8      	adds	r3, #200	; 0xc8
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <main+0x19c>)
 80013ca:	6013      	str	r3, [r2, #0]
	  	registerFrame[00].U16 = 22881;
 80013cc:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <main+0x198>)
 80013ce:	f645 1261 	movw	r2, #22881	; 0x5961
 80013d2:	801a      	strh	r2, [r3, #0]
//		HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//	  decimalToBinary(registerFrame[2].U16,Data);
//	  	Transmit_To_Basesystem(&registerFrame[2].U16,&hi2c1);
	  }
	  I2C_TO_BASESYSTEM(&registerFrame[2].U16,&hi2c1);
 80013d4:	494b      	ldr	r1, [pc, #300]	; (8001504 <main+0x1a0>)
 80013d6:	484c      	ldr	r0, [pc, #304]	; (8001508 <main+0x1a4>)
 80013d8:	f7ff f998 	bl	800070c <I2C_TO_BASESYSTEM>
//		  }
//		  registerFrame[2].U16 = Result;
//		  flag = 0;
//	  }

 	  if(reset == 1)
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <main+0x1a8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d114      	bne.n	800140e <main+0xaa>
	  {
		  ENDEFF_SOFT_RESET(&hi2c1);
 80013e4:	4847      	ldr	r0, [pc, #284]	; (8001504 <main+0x1a0>)
 80013e6:	f7ff f879 	bl	80004dc <ENDEFF_SOFT_RESET>
		  reset = 0;
 80013ea:	4b48      	ldr	r3, [pc, #288]	; (800150c <main+0x1a8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		  start = 0;
 80013f0:	4b47      	ldr	r3, [pc, #284]	; (8001510 <main+0x1ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
		  test = 0;
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <main+0x1b0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
		  pick = 0;
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <main+0x1b4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
		  place = 0;
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <main+0x1b8>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
		  stoptest = 0;
 8001408:	4b45      	ldr	r3, [pc, #276]	; (8001520 <main+0x1bc>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
//		  flag = 1;
	  }
	  if(test == 1)
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <main+0x1b0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10f      	bne.n	8001436 <main+0xd2>
	  {
		  ENDEFF_TEST_MODE(&hi2c1);
 8001416:	483b      	ldr	r0, [pc, #236]	; (8001504 <main+0x1a0>)
 8001418:	f7ff f888 	bl	800052c <ENDEFF_TEST_MODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	4a3f      	ldr	r2, [pc, #252]	; (8001524 <main+0x1c0>)
 8001426:	212a      	movs	r1, #42	; 0x2a
 8001428:	4836      	ldr	r0, [pc, #216]	; (8001504 <main+0x1a0>)
 800142a:	f001 fcdb 	bl	8002de4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  test = 0;
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <main+0x1b0>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e7bb      	b.n	80013ae <main+0x4a>
//		  flag = 1;
	  }
	  else if(stoptest == 1)
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <main+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10f      	bne.n	800145e <main+0xfa>
	  {
		  ENDEFF_TEST_MODE_QUIT(&hi2c1);
 800143e:	4831      	ldr	r0, [pc, #196]	; (8001504 <main+0x1a0>)
 8001440:	f7ff f89c 	bl	800057c <ENDEFF_TEST_MODE_QUIT>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <main+0x1c0>)
 800144e:	212a      	movs	r1, #42	; 0x2a
 8001450:	482c      	ldr	r0, [pc, #176]	; (8001504 <main+0x1a0>)
 8001452:	f001 fcc7 	bl	8002de4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stoptest = 0;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <main+0x1bc>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e7a7      	b.n	80013ae <main+0x4a>
//		  flag = 1;
	  }
	  else if(start == 1)
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <main+0x1ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10f      	bne.n	8001486 <main+0x122>
	  {
		  ENDEFF_GRIPPER_RUNMODE(&hi2c1);
 8001466:	4827      	ldr	r0, [pc, #156]	; (8001504 <main+0x1a0>)
 8001468:	f7ff f8b0 	bl	80005cc <ENDEFF_GRIPPER_RUNMODE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <main+0x1c0>)
 8001476:	212a      	movs	r1, #42	; 0x2a
 8001478:	4822      	ldr	r0, [pc, #136]	; (8001504 <main+0x1a0>)
 800147a:	f001 fcb3 	bl	8002de4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  start = 0;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <main+0x1ac>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e793      	b.n	80013ae <main+0x4a>
//		  flag = 1;
	  }
	  else if(pick == 1)
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <main+0x1b4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10f      	bne.n	80014ae <main+0x14a>
	  {
		  ENDEFF_GRIPPER_PICK(&hi2c1);
 800148e:	481d      	ldr	r0, [pc, #116]	; (8001504 <main+0x1a0>)
 8001490:	f7ff f8ec 	bl	800066c <ENDEFF_GRIPPER_PICK>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <main+0x1c0>)
 800149e:	212a      	movs	r1, #42	; 0x2a
 80014a0:	4818      	ldr	r0, [pc, #96]	; (8001504 <main+0x1a0>)
 80014a2:	f001 fc9f 	bl	8002de4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  pick = 0;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <main+0x1b4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e77f      	b.n	80013ae <main+0x4a>
//		  flag = 1;
	  }
	  else if(place == 1)
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <main+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d106      	bne.n	80014c4 <main+0x160>
	  {
		  ENDEFF_GRIPPER_PLACE(&hi2c1);
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <main+0x1a0>)
 80014b8:	f7ff f900 	bl	80006bc <ENDEFF_GRIPPER_PLACE>
//		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
//		  decimalToBinary(RecieveData,Data);
		  place = 0;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <main+0x1b8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e774      	b.n	80013ae <main+0x4a>
//		  flag = 1;
	  }
	  else if(stop == 1)
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <main+0x1c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f47f af70 	bne.w	80013ae <main+0x4a>
	  {
		  ENDEFF_GRIPPER_IDLE(&hi2c1);
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <main+0x1a0>)
 80014d0:	f7ff f8a4 	bl	800061c <ENDEFF_GRIPPER_IDLE>
		  HAL_I2C_Master_Receive(&hi2c1, 0x15<<1, &RecieveData, 1, HAL_MAX_DELAY);
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <main+0x1c0>)
 80014de:	212a      	movs	r1, #42	; 0x2a
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <main+0x1a0>)
 80014e2:	f001 fc7f 	bl	8002de4 <HAL_I2C_Master_Receive>
//		  decimalToBinary(RecieveData,Data);
		  stop = 0;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <main+0x1c4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  {
 80014ec:	e75f      	b.n	80013ae <main+0x4a>
 80014ee:	bf00      	nop
 80014f0:	200002b4 	.word	0x200002b4
 80014f4:	20000a78 	.word	0x20000a78
 80014f8:	20000950 	.word	0x20000950
 80014fc:	2000078c 	.word	0x2000078c
 8001500:	2000094c 	.word	0x2000094c
 8001504:	20000260 	.word	0x20000260
 8001508:	20000790 	.word	0x20000790
 800150c:	2000091c 	.word	0x2000091c
 8001510:	20000920 	.word	0x20000920
 8001514:	20000930 	.word	0x20000930
 8001518:	20000924 	.word	0x20000924
 800151c:	20000928 	.word	0x20000928
 8001520:	20000934 	.word	0x20000934
 8001524:	20000938 	.word	0x20000938
 8001528:	2000092c 	.word	0x2000092c

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fda6 	bl	800808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <SystemClock_Config+0xc8>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <SystemClock_Config+0xc8>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <SystemClock_Config+0xc8>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <SystemClock_Config+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <SystemClock_Config+0xcc>)
 8001576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <SystemClock_Config+0xcc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800158c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fe45 	bl	8005240 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015bc:	f000 f832 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2103      	movs	r1, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 f8a7 	bl	8005730 <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015e8:	f000 f81c 	bl	8001624 <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3750      	adds	r7, #80	; 0x50
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_UART_RxCpltCallback+0x20>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d102      	bne.n	8001612 <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received(&receivedByte);
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <HAL_UART_RxCpltCallback+0x24>)
 800160e:	f7ff f9ad 	bl	800096c <Joystick_Received>
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000a04 	.word	0x20000a04
 8001620:	2000093c 	.word	0x2000093c

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166e:	2007      	movs	r0, #7
 8001670:	f000 fb7a 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 fa5c 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA1_Stream6_IRQHandler+0x10>)
 80016da:	f000 fd1f 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000aec 	.word	0x20000aec

080016e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80016ee:	f004 fc31 	bl	8005f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000950 	.word	0x20000950

080016fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <I2C1_EV_IRQHandler+0x10>)
 8001702:	f001 fd95 	bl	8003230 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000260 	.word	0x20000260

08001710 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <I2C1_ER_IRQHandler+0x10>)
 8001716:	f001 fefc 	bl	8003512 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000260 	.word	0x20000260

08001724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART1_IRQHandler+0x10>)
 800172a:	f005 fc41 	bl	8006fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000a04 	.word	0x20000a04

08001738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART2_IRQHandler+0x10>)
 800173e:	f005 fc37 	bl	8006fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000a78 	.word	0x20000a78

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_TIM11_Init+0xa0>)
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <MX_TIM11_Init+0xa4>)
 800178c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_TIM11_Init+0xa0>)
 8001790:	2263      	movs	r2, #99	; 0x63
 8001792:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_TIM11_Init+0xa0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM11_Init+0xa0>)
 800179c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80017a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017b0:	f004 f9de 	bl	8005b70 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80017ba:	f7ff ff33 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80017be:	4814      	ldr	r0, [pc, #80]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017c0:	f004 fa94 	bl	8005cec <HAL_TIM_OC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80017ca:	f7ff ff2b 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80017ce:	2108      	movs	r1, #8
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017d2:	f004 faf1 	bl	8005db8 <HAL_TIM_OnePulse_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80017dc:	f7ff ff22 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80017e0:	2310      	movs	r3, #16
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80017e4:	f240 5399 	movw	r3, #1433	; 0x599
 80017e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM11_Init+0xa0>)
 80017fa:	f004 fcd3 	bl	80061a4 <HAL_TIM_OC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001804:	f7ff ff0e 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000950 	.word	0x20000950
 8001814:	40014800 	.word	0x40014800

08001818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_TIM_Base_MspInit+0x48>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_TIM_Base_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_TIM_Base_MspInit+0x4c>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_TIM_Base_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201a      	movs	r0, #26
 800184c:	f000 fa97 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001850:	201a      	movs	r0, #26
 8001852:	f000 fab0 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40014800 	.word	0x40014800
 8001864:	40023800 	.word	0x40023800

08001868 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART1_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 80018a0:	f005 f932 	bl	8006b08 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f7ff febb 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000a04 	.word	0x20000a04
 80018b8:	40011000 	.word	0x40011000

080018bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <MX_USART2_UART_Init+0x54>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018c8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80018cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART2_UART_Init+0x50>)
 80018f8:	f005 f906 	bl	8006b08 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001902:	f7ff fe8f 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000a78 	.word	0x20000a78
 8001910:	40004400 	.word	0x40004400

08001914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_UART_MspInit+0x164>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d135      	bne.n	80019a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_UART_MspInit+0x168>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <HAL_UART_MspInit+0x168>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_UART_MspInit+0x168>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_UART_MspInit+0x168>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a48      	ldr	r2, [pc, #288]	; (8001a7c <HAL_UART_MspInit+0x168>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_UART_MspInit+0x168>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800196e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001980:	2307      	movs	r3, #7
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	483d      	ldr	r0, [pc, #244]	; (8001a80 <HAL_UART_MspInit+0x16c>)
 800198c:	f000 fe4a 	bl	8002624 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2025      	movs	r0, #37	; 0x25
 8001996:	f000 f9f2 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800199a:	2025      	movs	r0, #37	; 0x25
 800199c:	f000 fa0b 	bl	8001db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019a0:	e066      	b.n	8001a70 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <HAL_UART_MspInit+0x170>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d161      	bne.n	8001a70 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_UART_MspInit+0x168>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019e4:	230c      	movs	r3, #12
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f4:	2307      	movs	r3, #7
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4820      	ldr	r0, [pc, #128]	; (8001a80 <HAL_UART_MspInit+0x16c>)
 8001a00:	f000 fe10 	bl	8002624 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_UART_MspInit+0x178>)
 8001a08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a46:	f000 f9d1 	bl	8001dec <HAL_DMA_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001a50:	f7ff fde8 	bl	8001624 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_UART_MspInit+0x174>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2026      	movs	r0, #38	; 0x26
 8001a66:	f000 f98a 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a6a:	2026      	movs	r0, #38	; 0x26
 8001a6c:	f000 f9a3 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40004400 	.word	0x40004400
 8001a88:	20000aec 	.word	0x20000aec
 8001a8c:	400260a0 	.word	0x400260a0

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aba:	f7ff fe47 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f006 fab3 	bl	8008028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fc4f 	bl	8001364 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001ad4:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 8001ad8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001adc:	20000b50 	.word	0x20000b50

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f92b 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fd8a 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f943 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f90b 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000021c 	.word	0x2000021c
 8001b80:	20000224 	.word	0x20000224
 8001b84:	20000220 	.word	0x20000220

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000224 	.word	0x20000224
 8001bac:	20000b4c 	.word	0x20000b4c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000b4c 	.word	0x20000b4c

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff29 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff3e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff31 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff feda 	bl	8001bb0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fec1 	bl	8001bb0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb1b 	bl	800252c <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fad2 	bl	80024c0 <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_DMA_Start_IT+0x26>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e040      	b.n	8001ff0 <HAL_DMA_Start_IT+0xa8>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12f      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa64 	bl	8002464 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	223f      	movs	r2, #63	; 0x3f
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0216 	orr.w	r2, r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0208 	orr.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e005      	b.n	8001fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002006:	f7ff fdd3 	bl	8001bb0 <HAL_GetTick>
 800200a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d008      	beq.n	800202a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e052      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0216 	bic.w	r2, r2, #22
 8002038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_DMA_Abort+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	e013      	b.n	80020a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207c:	f7ff fd98 	bl	8001bb0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	d90c      	bls.n	80020a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e015      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1e4      	bne.n	800207c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00c      	b.n	8002110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002128:	4b8e      	ldr	r3, [pc, #568]	; (8002364 <HAL_DMA_IRQHandler+0x248>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a8e      	ldr	r2, [pc, #568]	; (8002368 <HAL_DMA_IRQHandler+0x24c>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2208      	movs	r2, #8
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2204      	movs	r2, #4
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2204      	movs	r2, #4
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2210      	movs	r2, #16
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d043      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2210      	movs	r2, #16
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e01f      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e016      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0208 	bic.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2220      	movs	r2, #32
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 808f 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8087 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2220      	movs	r2, #32
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d136      	bne.n	8002334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x1da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	223f      	movs	r2, #63	; 0x3f
 800230c:	409a      	lsls	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07e      	beq.n	8002428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
        }
        return;
 8002332:	e079      	b.n	8002428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e02c      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
 8002362:	bf00      	nop
 8002364:	2000021c 	.word	0x2000021c
 8002368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
 800237c:	e01e      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0210 	bic.w	r2, r2, #16
 800239a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x2cc>
 8002402:	e000      	b.n	8002406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002428:	bf00      	nop
    }
  }
}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243e:	b2db      	uxtb	r3, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002480:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d108      	bne.n	80024a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024a2:	e007      	b.n	80024b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	60da      	str	r2, [r3, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	3b10      	subs	r3, #16
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <DMA_CalcBaseAndBitshift+0x64>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <DMA_CalcBaseAndBitshift+0x68>)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d909      	bls.n	8002502 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002500:	e007      	b.n	8002512 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	aaaaaaab 	.word	0xaaaaaaab
 8002528:	080080cc 	.word	0x080080cc

0800252c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11f      	bne.n	8002586 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d856      	bhi.n	80025fa <DMA_CheckFifoParam+0xce>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <DMA_CheckFifoParam+0x28>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002565 	.word	0x08002565
 8002558:	08002577 	.word	0x08002577
 800255c:	08002565 	.word	0x08002565
 8002560:	080025fb 	.word	0x080025fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d046      	beq.n	80025fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e043      	b.n	80025fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800257e:	d140      	bne.n	8002602 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002584:	e03d      	b.n	8002602 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	d121      	bne.n	80025d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d837      	bhi.n	8002606 <DMA_CheckFifoParam+0xda>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <DMA_CheckFifoParam+0x70>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025b3 	.word	0x080025b3
 80025a4:	080025ad 	.word	0x080025ad
 80025a8:	080025c5 	.word	0x080025c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e030      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d025      	beq.n	800260a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c2:	e022      	b.n	800260a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025cc:	d11f      	bne.n	800260e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025d2:	e01c      	b.n	800260e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d903      	bls.n	80025e2 <DMA_CheckFifoParam+0xb6>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d003      	beq.n	80025e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025e0:	e018      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      break;
 80025e6:	e015      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e00b      	b.n	8002612 <DMA_CheckFifoParam+0xe6>
      break;
 80025fa:	bf00      	nop
 80025fc:	e00a      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e008      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e006      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e004      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;   
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
    }
  } 
  
  return status; 
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e159      	b.n	80028f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 8148 	bne.w	80028ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d005      	beq.n	8002676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002672:	2b02      	cmp	r3, #2
 8002674:	d130      	bne.n	80026d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d017      	beq.n	8002714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d123      	bne.n	8002768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a2 	beq.w	80028ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_GPIO_Init+0x2e8>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c6:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_GPIO_Init+0x2ec>)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a49      	ldr	r2, [pc, #292]	; (8002914 <HAL_GPIO_Init+0x2f0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d019      	beq.n	8002826 <HAL_GPIO_Init+0x202>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <HAL_GPIO_Init+0x2f4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0x1fe>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a47      	ldr	r2, [pc, #284]	; (800291c <HAL_GPIO_Init+0x2f8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00d      	beq.n	800281e <HAL_GPIO_Init+0x1fa>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a46      	ldr	r2, [pc, #280]	; (8002920 <HAL_GPIO_Init+0x2fc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <HAL_GPIO_Init+0x1f6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a45      	ldr	r2, [pc, #276]	; (8002924 <HAL_GPIO_Init+0x300>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_GPIO_Init+0x1f2>
 8002812:	2304      	movs	r3, #4
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x204>
 8002816:	2307      	movs	r3, #7
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x204>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x204>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x204>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x204>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_GPIO_Init+0x2ec>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_GPIO_Init+0x304>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <HAL_GPIO_Init+0x304>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_GPIO_Init+0x304>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a24      	ldr	r2, [pc, #144]	; (8002928 <HAL_GPIO_Init+0x304>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_GPIO_Init+0x304>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_GPIO_Init+0x304>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_GPIO_Init+0x304>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <HAL_GPIO_Init+0x304>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f aea2 	bls.w	8002640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40013c00 	.word	0x40013c00

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e12b      	b.n	8002bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fc94 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c4:	f003 f8ac 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a81      	ldr	r2, [pc, #516]	; (8002bd4 <HAL_I2C_Init+0x274>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d807      	bhi.n	80029e4 <HAL_I2C_Init+0x84>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a80      	ldr	r2, [pc, #512]	; (8002bd8 <HAL_I2C_Init+0x278>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e006      	b.n	80029f2 <HAL_I2C_Init+0x92>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_I2C_Init+0x27c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0e7      	b.n	8002bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a78      	ldr	r2, [pc, #480]	; (8002be0 <HAL_I2C_Init+0x280>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_I2C_Init+0x274>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d802      	bhi.n	8002a34 <HAL_I2C_Init+0xd4>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	e009      	b.n	8002a48 <HAL_I2C_Init+0xe8>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <HAL_I2C_Init+0x284>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	3301      	adds	r3, #1
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	495c      	ldr	r1, [pc, #368]	; (8002bd4 <HAL_I2C_Init+0x274>)
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d819      	bhi.n	8002a9c <HAL_I2C_Init+0x13c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e59      	subs	r1, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_I2C_Init+0x138>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e59      	subs	r1, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	e051      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x168>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x18e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x196>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	817b      	strh	r3, [r7, #10]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7fe ffd8 	bl	8001bb0 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	f040 80e0 	bne.w	8002dd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2319      	movs	r3, #25
 8002c16:	2201      	movs	r2, #1
 8002c18:	4970      	ldr	r1, [pc, #448]	; (8002ddc <HAL_I2C_Master_Transmit+0x1f4>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f002 f8e6 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e0d3      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x50>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0cc      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d007      	beq.n	8002c5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2221      	movs	r2, #33	; 0x21
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	893a      	ldrh	r2, [r7, #8]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f001 fea8 	bl	80049fc <I2C_MasterRequestWrite>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e08d      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ccc:	e066      	b.n	8002d9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f002 f960 	bl	8004f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_I2C_Master_Transmit+0x188>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6a39      	ldr	r1, [r7, #32]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f002 f950 	bl	800501a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d107      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e01a      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d194      	bne.n	8002cce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	817b      	strh	r3, [r7, #10]
 8002df4:	4613      	mov	r3, r2
 8002df6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7fe feda 	bl	8001bb0 <HAL_GetTick>
 8002dfc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	f040 820b 	bne.w	8003222 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2319      	movs	r3, #25
 8002e12:	2201      	movs	r2, #1
 8002e14:	497c      	ldr	r1, [pc, #496]	; (8003008 <HAL_I2C_Master_Receive+0x224>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f001 ffe8 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
 8002e24:	e1fe      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_I2C_Master_Receive+0x50>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e1f7      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d007      	beq.n	8002e5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2222      	movs	r2, #34	; 0x22
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2210      	movs	r2, #16
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	893a      	ldrh	r2, [r7, #8]
 8002e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a5c      	ldr	r2, [pc, #368]	; (800300c <HAL_I2C_Master_Receive+0x228>)
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f001 fe2c 	bl	8004b00 <I2C_MasterRequestRead>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1b8      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e18c      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e16c      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	e14c      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f88:	e138      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	f200 80f1 	bhi.w	8003176 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d123      	bne.n	8002fe4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f002 f8ad 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e139      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe2:	e10b      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d14e      	bne.n	800308a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4906      	ldr	r1, [pc, #24]	; (8003010 <HAL_I2C_Master_Receive+0x22c>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f001 fef8 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e10e      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
 8003006:	bf00      	nop
 8003008:	00100002 	.word	0x00100002
 800300c:	ffff0000 	.word	0xffff0000
 8003010:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003088:	e0b8      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2200      	movs	r2, #0
 8003092:	4966      	ldr	r1, [pc, #408]	; (800322c <HAL_I2C_Master_Receive+0x448>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f001 fea9 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0bf      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	2200      	movs	r2, #0
 80030ee:	494f      	ldr	r1, [pc, #316]	; (800322c <HAL_I2C_Master_Receive+0x448>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f001 fe7b 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e091      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003174:	e042      	b.n	80031fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f001 ffc0 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e04c      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d118      	bne.n	80031fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f aec2 	bne.w	8002f8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	00010004 	.word	0x00010004

08003230 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b10      	cmp	r3, #16
 800325e:	d003      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x38>
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	f040 80c1 	bne.w	80033ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_I2C_EV_IRQHandler+0x6e>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003288:	d003      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x62>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003290:	d101      	bne.n	8003296 <HAL_I2C_EV_IRQHandler+0x66>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_I2C_EV_IRQHandler+0x68>
 8003296:	2300      	movs	r3, #0
 8003298:	2b01      	cmp	r3, #1
 800329a:	f000 8132 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x92>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	0a5b      	lsrs	r3, r3, #9
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f001 ffa8 	bl	800520a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fd83 	bl	8003dc6 <I2C_Master_SB>
 80032c0:	e092      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a5b      	lsrs	r3, r3, #9
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fdf9 	bl	8003ed2 <I2C_Master_ADD10>
 80032e0:	e082      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0xd2>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	0a5b      	lsrs	r3, r3, #9
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fe13 	bl	8003f26 <I2C_Master_ADDR>
 8003300:	e072      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03b      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331c:	f000 80f3 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	09db      	lsrs	r3, r3, #7
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00f      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9f3 	bl	8003730 <I2C_MasterTransmit_TXE>
 800334a:	e04d      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80d6 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0a5b      	lsrs	r3, r3, #9
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80cf 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	2b21      	cmp	r3, #33	; 0x21
 800336c:	d103      	bne.n	8003376 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa7a 	bl	8003868 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003374:	e0c7      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	f040 80c4 	bne.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fae8 	bl	8003954 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003384:	e0bf      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	f000 80b7 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00f      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	0a9b      	lsrs	r3, r3, #10
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fb5d 	bl	8003a7c <I2C_MasterReceive_RXNE>
 80033c2:	e011      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 809a 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	0a5b      	lsrs	r3, r3, #9
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8093 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fc06 	bl	8003bf2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e6:	e08e      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033e8:	e08d      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e007      	b.n	800340c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x20e>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0a5b      	lsrs	r3, r3, #9
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003434:	69b9      	ldr	r1, [r7, #24]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 ffc4 	bl	80043c4 <I2C_Slave_ADDR>
 800343c:	e066      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x22e>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fffe 	bl	8004458 <I2C_Slave_STOPF>
 800345c:	e056      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	2b21      	cmp	r3, #33	; 0x21
 8003462:	d002      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x23a>
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	2b29      	cmp	r3, #41	; 0x29
 8003468:	d125      	bne.n	80034b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	09db      	lsrs	r3, r3, #7
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00f      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a9b      	lsrs	r3, r3, #10
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 feda 	bl	8004248 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003494:	e039      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d033      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02d      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 ff07 	bl	80042c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b4:	e029      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00f      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	0a9b      	lsrs	r3, r3, #10
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ff12 	bl	8004304 <I2C_SlaveReceive_RXNE>
 80034e0:	e014      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 ff40 	bl	8004380 <I2C_SlaveReceive_BTF>
 8003500:	e004      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08a      	sub	sp, #40	; 0x28
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003534:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x4e>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800355e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	0a5b      	lsrs	r3, r3, #9
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <HAL_I2C_ER_IRQHandler+0x78>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003588:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	0a9b      	lsrs	r3, r3, #10
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03f      	beq.n	8003616 <HAL_I2C_ER_IRQHandler+0x104>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d039      	beq.n	8003616 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035a2:	7efb      	ldrb	r3, [r7, #27]
 80035a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035bc:	7ebb      	ldrb	r3, [r7, #26]
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d112      	bne.n	80035e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b21      	cmp	r3, #33	; 0x21
 80035cc:	d008      	beq.n	80035e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b29      	cmp	r3, #41	; 0x29
 80035d2:	d005      	beq.n	80035e0 <HAL_I2C_ER_IRQHandler+0xce>
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b28      	cmp	r3, #40	; 0x28
 80035d8:	d106      	bne.n	80035e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b21      	cmp	r3, #33	; 0x21
 80035de:	d103      	bne.n	80035e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f001 f869 	bl	80046b8 <I2C_Slave_AF>
 80035e6:	e016      	b.n	8003616 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035fa:	7efb      	ldrb	r3, [r7, #27]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d002      	beq.n	8003606 <HAL_I2C_ER_IRQHandler+0xf4>
 8003600:	7efb      	ldrb	r3, [r7, #27]
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d107      	bne.n	8003616 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003614:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	0adb      	lsrs	r3, r3, #11
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x12e>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800363e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 f8a0 	bl	8004798 <I2C_ITError>
  }
}
 8003658:	bf00      	nop
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
 80036bc:	4613      	mov	r3, r2
 80036be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003746:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d150      	bne.n	80037f8 <I2C_MasterTransmit_TXE+0xc8>
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b21      	cmp	r3, #33	; 0x21
 800375a:	d14d      	bne.n	80037f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b08      	cmp	r3, #8
 8003760:	d01d      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d01a      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376e:	d016      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2211      	movs	r2, #17
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff62 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800379c:	e060      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d107      	bne.n	80037e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff7d 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e6:	e03b      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff35 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f6:	e033      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d005      	beq.n	800380a <I2C_MasterTransmit_TXE+0xda>
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d12d      	bne.n	8003860 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b22      	cmp	r3, #34	; 0x22
 8003808:	d12a      	bne.n	8003860 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003824:	e01c      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d103      	bne.n	800383a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f88e 	bl	8003954 <I2C_MemoryTransmit_TXE_BTF>
}
 8003838:	e012      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800385e:	e7ff      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b21      	cmp	r3, #33	; 0x21
 8003880:	d164      	bne.n	800394c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038b0:	e04c      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d01d      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d01a      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c4:	d016      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2211      	movs	r2, #17
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff feb7 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
}
 80038f2:	e02b      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003902:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003912:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d107      	bne.n	800393e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fed2 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
}
 800393c:	e006      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe8a 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10b      	bne.n	800398c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	b2da      	uxtb	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800398a:	e073      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	b29b      	uxth	r3, r3
 8003992:	121b      	asrs	r3, r3, #8
 8003994:	b2da      	uxtb	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a6:	e065      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10b      	bne.n	80039c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c6:	e055      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d151      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b22      	cmp	r3, #34	; 0x22
 80039d4:	d10d      	bne.n	80039f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f0:	e040      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b21      	cmp	r3, #33	; 0x21
 8003a00:	d112      	bne.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a26:	e025      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d120      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b21      	cmp	r3, #33	; 0x21
 8003a36:	d11d      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe36 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b22      	cmp	r3, #34	; 0x22
 8003a8e:	f040 80ac 	bne.w	8003bea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d921      	bls.n	8003ae4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	f040 808c 	bne.w	8003bea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ae2:	e082      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d075      	beq.n	8003bd8 <I2C_MasterReceive_RXNE+0x15c>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d002      	beq.n	8003af8 <I2C_MasterReceive_RXNE+0x7c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d16f      	bne.n	8003bd8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 facf 	bl	800509c <I2C_WaitOnSTOPRequestThroughIT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d142      	bne.n	8003b8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d10a      	bne.n	8003b74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fdc1 	bl	80036f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b72:	e03a      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2212      	movs	r2, #18
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fd76 	bl	8003674 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b88:	e02f      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fd99 	bl	8003708 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bd6:	e008      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be6:	605a      	str	r2, [r3, #4]
}
 8003be8:	e7ff      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d11b      	bne.n	8003c42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c40:	e0bd      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d129      	bne.n	8003ca0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00a      	beq.n	8003c78 <I2C_MasterReceive_BTF+0x86>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d007      	beq.n	8003c78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c9e:	e08e      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d176      	bne.n	8003d98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <I2C_MasterReceive_BTF+0xc4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d108      	bne.n	8003cc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e019      	b.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d002      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0xe2>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d108      	bne.n	8003ce6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e00a      	b.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d007      	beq.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d10a      	bne.n	8003d82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fcba 	bl	80036f4 <HAL_I2C_MemRxCpltCallback>
}
 8003d80:	e01d      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2212      	movs	r2, #18
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fc6f 	bl	8003674 <HAL_I2C_MasterRxCpltCallback>
}
 8003d96:	e012      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d117      	bne.n	8003e0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003df4:	e067      	b.n	8003ec6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]
}
 8003e08:	e05d      	b.n	8003ec6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e12:	d133      	bne.n	8003e7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d109      	bne.n	8003e34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e008      	b.n	8003e46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <I2C_Master_SB+0x92>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d108      	bne.n	8003e6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d032      	beq.n	8003ec6 <I2C_Master_SB+0x100>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02d      	beq.n	8003ec6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e78:	605a      	str	r2, [r3, #4]
}
 8003e7a:	e024      	b.n	8003ec6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10e      	bne.n	8003ea2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	11db      	asrs	r3, r3, #7
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0306 	and.w	r3, r3, #6
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f063 030f 	orn	r3, r3, #15
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
}
 8003ea0:	e011      	b.n	8003ec6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10d      	bne.n	8003ec6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	11db      	asrs	r3, r3, #7
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0306 	and.w	r3, r3, #6
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f063 030e 	orn	r3, r3, #14
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <I2C_Master_ADD10+0x26>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d108      	bne.n	8003f0a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <I2C_Master_ADD10+0x48>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	605a      	str	r2, [r3, #4]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b091      	sub	sp, #68	; 0x44
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b22      	cmp	r3, #34	; 0x22
 8003f4e:	f040 8169 	bne.w	8004224 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <I2C_Master_ADDR+0x54>
 8003f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d10b      	bne.n	8003f7a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	e160      	b.n	800423c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11d      	bne.n	8003fbe <I2C_Master_ADDR+0x98>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f8a:	d118      	bne.n	8003fbe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	651a      	str	r2, [r3, #80]	; 0x50
 8003fbc:	e13e      	b.n	800423c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e115      	b.n	800421c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f040 808a 	bne.w	8004110 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004002:	d137      	bne.n	8004074 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d113      	bne.n	800404c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	e0e7      	b.n	800421c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e0d3      	b.n	800421c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b08      	cmp	r3, #8
 8004078:	d02e      	beq.n	80040d8 <I2C_Master_ADDR+0x1b2>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b20      	cmp	r3, #32
 800407e:	d02b      	beq.n	80040d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	2b12      	cmp	r3, #18
 8004084:	d102      	bne.n	800408c <I2C_Master_ADDR+0x166>
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b01      	cmp	r3, #1
 800408a:	d125      	bne.n	80040d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00e      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b02      	cmp	r3, #2
 8004096:	d00b      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	2b10      	cmp	r3, #16
 800409c:	d008      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e007      	b.n	80040c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	e0a1      	b.n	800421c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e085      	b.n	800421c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d14d      	bne.n	80041b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b04      	cmp	r3, #4
 800411e:	d016      	beq.n	800414e <I2C_Master_ADDR+0x228>
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b02      	cmp	r3, #2
 8004124:	d013      	beq.n	800414e <I2C_Master_ADDR+0x228>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	2b10      	cmp	r3, #16
 800412a:	d010      	beq.n	800414e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e007      	b.n	800415e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d117      	bne.n	800419e <I2C_Master_ADDR+0x278>
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004174:	d00b      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d008      	beq.n	800418e <I2C_Master_ADDR+0x268>
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b08      	cmp	r3, #8
 8004180:	d005      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b10      	cmp	r3, #16
 8004186:	d002      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b20      	cmp	r3, #32
 800418c:	d107      	bne.n	800419e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800419c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	e032      	b.n	800421c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d4:	d117      	bne.n	8004206 <I2C_Master_ADDR+0x2e0>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041dc:	d00b      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d008      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d005      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d002      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d107      	bne.n	8004206 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004204:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004222:	e00b      	b.n	800423c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
}
 800423a:	e7ff      	b.n	800423c <I2C_Master_ADDR+0x316>
 800423c:	bf00      	nop
 800423e:	3744      	adds	r7, #68	; 0x44
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02b      	beq.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d114      	bne.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b29      	cmp	r3, #41	; 0x29
 8004294:	d111      	bne.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2228      	movs	r2, #40	; 0x28
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff f9e7 	bl	8003688 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d011      	beq.n	80042f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d02c      	beq.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d114      	bne.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d111      	bne.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2222      	movs	r2, #34	; 0x22
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2228      	movs	r2, #40	; 0x28
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff f992 	bl	800369c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043de:	2b28      	cmp	r3, #40	; 0x28
 80043e0:	d127      	bne.n	8004432 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	81bb      	strh	r3, [r7, #12]
 8004414:	e002      	b.n	800441c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004424:	89ba      	ldrh	r2, [r7, #12]
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff f940 	bl	80036b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004430:	e00e      	b.n	8004450 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b4:	d172      	bne.n	800459c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b22      	cmp	r3, #34	; 0x22
 80044ba:	d002      	beq.n	80044c2 <I2C_Slave_STOPF+0x6a>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b2a      	cmp	r3, #42	; 0x2a
 80044c0:	d135      	bne.n	800452e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fd ff98 	bl	8002430 <HAL_DMA_GetState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d049      	beq.n	800459a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 800450c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd fde0 	bl	80020d8 <HAL_DMA_Abort_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03d      	beq.n	800459a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004528:	4610      	mov	r0, r2
 800452a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800452c:	e035      	b.n	800459a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd ff62 	bl	8002430 <HAL_DMA_GetState>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d014      	beq.n	800459c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	4a4e      	ldr	r2, [pc, #312]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fdaa 	bl	80020d8 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
 8004598:	e000      	b.n	800459c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800459a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03e      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d112      	bne.n	80045da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d112      	bne.n	800460e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8b3 	bl	8004798 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004632:	e039      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	d109      	bne.n	800464e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff f827 	bl	800369c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b28      	cmp	r3, #40	; 0x28
 8004658:	d111      	bne.n	800467e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <I2C_Slave_STOPF+0x25c>)
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff f828 	bl	80036cc <HAL_I2C_ListenCpltCallback>
}
 800467c:	e014      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d002      	beq.n	800468c <I2C_Slave_STOPF+0x234>
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b22      	cmp	r3, #34	; 0x22
 800468a:	d10d      	bne.n	80046a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fffa 	bl	800369c <HAL_I2C_SlaveRxCpltCallback>
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08004c9d 	.word	0x08004c9d
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d002      	beq.n	80046da <I2C_Slave_AF+0x22>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d129      	bne.n	800472e <I2C_Slave_AF+0x76>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d126      	bne.n	800472e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <I2C_Slave_AF+0xdc>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe ffd0 	bl	80036cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800472c:	e02e      	b.n	800478c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b21      	cmp	r3, #33	; 0x21
 8004732:	d126      	bne.n	8004782 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <I2C_Slave_AF+0xdc>)
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004768:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe ff84 	bl	8003688 <HAL_I2C_SlaveTxCpltCallback>
}
 8004780:	e004      	b.n	800478c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047b0:	7bbb      	ldrb	r3, [r7, #14]
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d002      	beq.n	80047bc <I2C_ITError+0x24>
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d10a      	bne.n	80047d2 <I2C_ITError+0x3a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b22      	cmp	r3, #34	; 0x22
 80047c0:	d107      	bne.n	80047d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047d8:	2b28      	cmp	r3, #40	; 0x28
 80047da:	d107      	bne.n	80047ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2228      	movs	r2, #40	; 0x28
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ea:	e015      	b.n	8004818 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d00a      	beq.n	8004812 <I2C_ITError+0x7a>
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b60      	cmp	r3, #96	; 0x60
 8004800:	d007      	beq.n	8004812 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d162      	bne.n	80048ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d020      	beq.n	8004888 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	4a6a      	ldr	r2, [pc, #424]	; (80049f4 <I2C_ITError+0x25c>)
 800484c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fc40 	bl	80020d8 <HAL_DMA_Abort_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8089 	beq.w	8004972 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004882:	4610      	mov	r0, r2
 8004884:	4798      	blx	r3
 8004886:	e074      	b.n	8004972 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <I2C_ITError+0x25c>)
 800488e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fc1f 	bl	80020d8 <HAL_DMA_Abort_IT>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d068      	beq.n	8004972 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d10b      	bne.n	80048c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	4610      	mov	r0, r2
 80048ea:	4798      	blx	r3
 80048ec:	e041      	b.n	8004972 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b60      	cmp	r3, #96	; 0x60
 80048f8:	d125      	bne.n	8004946 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10b      	bne.n	800492e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe feec 	bl	800371c <HAL_I2C_AbortCpltCallback>
 8004944:	e015      	b.n	8004972 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d10b      	bne.n	800496c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fe fecb 	bl	8003708 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10e      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d113      	bne.n	80049ec <I2C_ITError+0x254>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b28      	cmp	r3, #40	; 0x28
 80049c8:	d110      	bne.n	80049ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <I2C_ITError+0x260>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fe fe70 	bl	80036cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08004c9d 	.word	0x08004c9d
 80049f8:	ffff0000 	.word	0xffff0000

080049fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d006      	beq.n	8004a26 <I2C_MasterRequestWrite+0x2a>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d003      	beq.n	8004a26 <I2C_MasterRequestWrite+0x2a>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a24:	d108      	bne.n	8004a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e00b      	b.n	8004a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	2b12      	cmp	r3, #18
 8004a3e:	d107      	bne.n	8004a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f9c5 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	d103      	bne.n	8004a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e035      	b.n	8004af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8c:	d108      	bne.n	8004aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a9c:	611a      	str	r2, [r3, #16]
 8004a9e:	e01b      	b.n	8004ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa0:	897b      	ldrh	r3, [r7, #10]
 8004aa2:	11db      	asrs	r3, r3, #7
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f063 030f 	orn	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	490e      	ldr	r1, [pc, #56]	; (8004af8 <I2C_MasterRequestWrite+0xfc>)
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9eb 	bl	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e010      	b.n	8004af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4907      	ldr	r1, [pc, #28]	; (8004afc <I2C_MasterRequestWrite+0x100>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f9db 	bl	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010008 	.word	0x00010008
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d006      	beq.n	8004b3a <I2C_MasterRequestRead+0x3a>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d003      	beq.n	8004b3a <I2C_MasterRequestRead+0x3a>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b38:	d108      	bne.n	8004b4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e00b      	b.n	8004b64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	2b11      	cmp	r3, #17
 8004b52:	d107      	bne.n	8004b64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f93b 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8a:	d103      	bne.n	8004b94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e079      	b.n	8004c8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba0:	d108      	bne.n	8004bb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba2:	897b      	ldrh	r3, [r7, #10]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	611a      	str	r2, [r3, #16]
 8004bb2:	e05f      	b.n	8004c74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	11db      	asrs	r3, r3, #7
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f063 030f 	orn	r3, r3, #15
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4930      	ldr	r1, [pc, #192]	; (8004c94 <I2C_MasterRequestRead+0x194>)
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f961 	bl	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e054      	b.n	8004c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4929      	ldr	r1, [pc, #164]	; (8004c98 <I2C_MasterRequestRead+0x198>)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f951 	bl	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e044      	b.n	8004c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8d9 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00d      	beq.n	8004c5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d103      	bne.n	8004c58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e017      	b.n	8004c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c5c:	897b      	ldrh	r3, [r7, #10]
 8004c5e:	11db      	asrs	r3, r3, #7
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0306 	and.w	r3, r3, #6
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f063 030e 	orn	r3, r3, #14
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4907      	ldr	r1, [pc, #28]	; (8004c98 <I2C_MasterRequestRead+0x198>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f90d 	bl	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	00010008 	.word	0x00010008
 8004c98:	00010002 	.word	0x00010002

08004c9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <I2C_DMAAbort+0x148>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	08db      	lsrs	r3, r3, #3
 8004cbc:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <I2C_DMAAbort+0x14c>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	0a1a      	lsrs	r2, r3, #8
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00da      	lsls	r2, r3, #3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ce2:	e00a      	b.n	8004cfa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d0ea      	beq.n	8004cd0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2200      	movs	r2, #0
 8004d08:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	2200      	movs	r2, #0
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d10e      	bne.n	8004d8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7fe fcca 	bl	800371c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d88:	e027      	b.n	8004dda <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d90:	2b28      	cmp	r3, #40	; 0x28
 8004d92:	d117      	bne.n	8004dc4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2228      	movs	r2, #40	; 0x28
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dc2:	e007      	b.n	8004dd4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f7fe fc97 	bl	8003708 <HAL_I2C_ErrorCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000021c 	.word	0x2000021c
 8004de8:	14f8b589 	.word	0x14f8b589

08004dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	e025      	b.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d021      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fc fed3 	bl	8001bb0 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d116      	bne.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e023      	b.n	8004e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10d      	bne.n	8004e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	e00c      	b.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	43da      	mvns	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d0b6      	beq.n	8004dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ea8:	e051      	b.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb8:	d123      	bne.n	8004f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e046      	b.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d021      	beq.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fc fe51 	bl	8001bb0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d116      	bne.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e020      	b.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d10c      	bne.n	8004f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	e00b      	b.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d18d      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fa4:	e02d      	b.n	8005002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f900 	bl	80051ac <I2C_IsAcknowledgeFailed>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e02d      	b.n	8005012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d021      	beq.n	8005002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fc fdf7 	bl	8001bb0 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d116      	bne.n	8005002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e007      	b.n	8005012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d1ca      	bne.n	8004fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005026:	e02d      	b.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8bf 	bl	80051ac <I2C_IsAcknowledgeFailed>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e02d      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d021      	beq.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fc fdb6 	bl	8001bb0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e007      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d1ca      	bne.n	8005028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	0a1a      	lsrs	r2, r3, #8
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e008      	b.n	80050ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d0e9      	beq.n	80050be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	2000021c 	.word	0x2000021c
 80050fc:	14f8b589 	.word	0x14f8b589

08005100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800510c:	e042      	b.n	8005194 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d119      	bne.n	8005150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0210 	mvn.w	r2, #16
 8005124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e029      	b.n	80051a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fc fd2e 	bl	8001bb0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e007      	b.n	80051a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d1b5      	bne.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d11b      	bne.n	80051fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800521a:	d103      	bne.n	8005224 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005222:	e007      	b.n	8005234 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800522c:	d102      	bne.n	8005234 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2208      	movs	r2, #8
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e267      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d075      	beq.n	800534a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800525e:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00c      	beq.n	8005284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526a:	4b85      	ldr	r3, [pc, #532]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005272:	2b08      	cmp	r3, #8
 8005274:	d112      	bne.n	800529c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005282:	d10b      	bne.n	800529c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005284:	4b7e      	ldr	r3, [pc, #504]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d05b      	beq.n	8005348 <HAL_RCC_OscConfig+0x108>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d157      	bne.n	8005348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e242      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a4:	d106      	bne.n	80052b4 <HAL_RCC_OscConfig+0x74>
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	e01d      	b.n	80052f0 <HAL_RCC_OscConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x98>
 80052be:	4b70      	ldr	r3, [pc, #448]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6f      	ldr	r2, [pc, #444]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6c      	ldr	r2, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0xb0>
 80052d8:	4b69      	ldr	r3, [pc, #420]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a68      	ldr	r2, [pc, #416]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a65      	ldr	r2, [pc, #404]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d013      	beq.n	8005320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fc fc5a 	bl	8001bb0 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fc fc56 	bl	8001bb0 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e207      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0xc0>
 800531e:	e014      	b.n	800534a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fc fc46 	bl	8001bb0 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005328:	f7fc fc42 	bl	8001bb0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e1f3      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	4b51      	ldr	r3, [pc, #324]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0xe8>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d063      	beq.n	800541e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005356:	4b4a      	ldr	r3, [pc, #296]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800536a:	2b08      	cmp	r3, #8
 800536c:	d11c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536e:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d116      	bne.n	80053a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_RCC_OscConfig+0x152>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d001      	beq.n	8005392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e1c7      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4937      	ldr	r1, [pc, #220]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	e03a      	b.n	800541e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <HAL_RCC_OscConfig+0x244>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fc fbfb 	bl	8001bb0 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053be:	f7fc fbf7 	bl	8001bb0 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e1a8      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4925      	ldr	r1, [pc, #148]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
 80053f0:	e015      	b.n	800541e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_RCC_OscConfig+0x244>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc fbda 	bl	8001bb0 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005400:	f7fc fbd6 	bl	8001bb0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e187      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005412:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d036      	beq.n	8005498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_RCC_OscConfig+0x248>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fc fbba 	bl	8001bb0 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005440:	f7fc fbb6 	bl	8001bb0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e167      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x200>
 800545e:	e01b      	b.n	8005498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_OscConfig+0x248>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005466:	f7fc fba3 	bl	8001bb0 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800546c:	e00e      	b.n	800548c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546e:	f7fc fb9f 	bl	8001bb0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d907      	bls.n	800548c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e150      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
 8005480:	40023800 	.word	0x40023800
 8005484:	42470000 	.word	0x42470000
 8005488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1ea      	bne.n	800546e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8097 	beq.w	80055d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	4b7d      	ldr	r3, [pc, #500]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a7c      	ldr	r2, [pc, #496]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d6:	4b77      	ldr	r3, [pc, #476]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d118      	bne.n	8005514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e2:	4b74      	ldr	r3, [pc, #464]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a73      	ldr	r2, [pc, #460]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ee:	f7fc fb5f 	bl	8001bb0 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f6:	f7fc fb5b 	bl	8001bb0 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e10c      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x2ea>
 800551c:	4b64      	ldr	r3, [pc, #400]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	4a63      	ldr	r2, [pc, #396]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6713      	str	r3, [r2, #112]	; 0x70
 8005528:	e01c      	b.n	8005564 <HAL_RCC_OscConfig+0x324>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b05      	cmp	r3, #5
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x30c>
 8005532:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4a5e      	ldr	r2, [pc, #376]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	6713      	str	r3, [r2, #112]	; 0x70
 800553e:	4b5c      	ldr	r3, [pc, #368]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a5b      	ldr	r2, [pc, #364]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6713      	str	r3, [r2, #112]	; 0x70
 800554a:	e00b      	b.n	8005564 <HAL_RCC_OscConfig+0x324>
 800554c:	4b58      	ldr	r3, [pc, #352]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a57      	ldr	r2, [pc, #348]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800555e:	f023 0304 	bic.w	r3, r3, #4
 8005562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fc fb20 	bl	8001bb0 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005572:	e00a      	b.n	800558a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fc fb1c 	bl	8001bb0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0cb      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558a:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0ee      	beq.n	8005574 <HAL_RCC_OscConfig+0x334>
 8005596:	e014      	b.n	80055c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005598:	f7fc fb0a 	bl	8001bb0 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a0:	f7fc fb06 	bl	8001bb0 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0b5      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b6:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ee      	bne.n	80055a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a1 	beq.w	8005720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055de:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d05c      	beq.n	80056a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d141      	bne.n	8005676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fada 	bl	8001bb0 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005600:	f7fc fad6 	bl	8001bb0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e087      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	491b      	ldr	r1, [pc, #108]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fc faaf 	bl	8001bb0 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005656:	f7fc faab 	bl	8001bb0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e05c      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005668:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x416>
 8005674:	e054      	b.n	8005720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fc fa98 	bl	8001bb0 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005684:	f7fc fa94 	bl	8001bb0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e045      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x444>
 80056a2:	e03d      	b.n	8005720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d107      	bne.n	80056bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e038      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40007000 	.word	0x40007000
 80056b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x4ec>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d028      	beq.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d121      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d11a      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d111      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	3b01      	subs	r3, #1
 8005706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0cc      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005744:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d90c      	bls.n	800576c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b65      	ldr	r3, [pc, #404]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0b8      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005784:	4b59      	ldr	r3, [pc, #356]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a58      	ldr	r2, [pc, #352]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800578e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a52      	ldr	r2, [pc, #328]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	494d      	ldr	r1, [pc, #308]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d044      	beq.n	8005850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	4b47      	ldr	r3, [pc, #284]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d119      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e07f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d003      	beq.n	80057ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d107      	bne.n	80057fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ee:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e06f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e067      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 0203 	bic.w	r2, r3, #3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4934      	ldr	r1, [pc, #208]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	4313      	orrs	r3, r2
 800581e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005820:	f7fc f9c6 	bl	8001bb0 <HAL_GetTick>
 8005824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fc f9c2 	bl	8001bb0 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e04f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583e:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 020c 	and.w	r2, r3, #12
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	429a      	cmp	r2, r3
 800584e:	d1eb      	bne.n	8005828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d20c      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b22      	ldr	r3, [pc, #136]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e032      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005884:	4b19      	ldr	r3, [pc, #100]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4916      	ldr	r1, [pc, #88]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	490e      	ldr	r1, [pc, #56]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058b6:	f000 f821 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 80058ba:	4602      	mov	r2, r0
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	490a      	ldr	r1, [pc, #40]	; (80058f0 <HAL_RCC_ClockConfig+0x1c0>)
 80058c8:	5ccb      	ldrb	r3, [r1, r3]
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 80058d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fc f926 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023c00 	.word	0x40023c00
 80058ec:	40023800 	.word	0x40023800
 80058f0:	080080b4 	.word	0x080080b4
 80058f4:	2000021c 	.word	0x2000021c
 80058f8:	20000220 	.word	0x20000220

080058fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005900:	b094      	sub	sp, #80	; 0x50
 8005902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	647b      	str	r3, [r7, #68]	; 0x44
 8005908:	2300      	movs	r3, #0
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	2300      	movs	r3, #0
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005914:	4b79      	ldr	r3, [pc, #484]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b08      	cmp	r3, #8
 800591e:	d00d      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x40>
 8005920:	2b08      	cmp	r3, #8
 8005922:	f200 80e1 	bhi.w	8005ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x34>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d003      	beq.n	8005936 <HAL_RCC_GetSysClockFreq+0x3a>
 800592e:	e0db      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005934:	e0db      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005936:	4b73      	ldr	r3, [pc, #460]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800593a:	e0d8      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800593c:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005946:	4b6d      	ldr	r3, [pc, #436]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d063      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005952:	4b6a      	ldr	r3, [pc, #424]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	2200      	movs	r2, #0
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
 800595c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
 8005966:	2300      	movs	r3, #0
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800596e:	4622      	mov	r2, r4
 8005970:	462b      	mov	r3, r5
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	0159      	lsls	r1, r3, #5
 800597c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005980:	0150      	lsls	r0, r2, #5
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4621      	mov	r1, r4
 8005988:	1a51      	subs	r1, r2, r1
 800598a:	6139      	str	r1, [r7, #16]
 800598c:	4629      	mov	r1, r5
 800598e:	eb63 0301 	sbc.w	r3, r3, r1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a0:	4659      	mov	r1, fp
 80059a2:	018b      	lsls	r3, r1, #6
 80059a4:	4651      	mov	r1, sl
 80059a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059aa:	4651      	mov	r1, sl
 80059ac:	018a      	lsls	r2, r1, #6
 80059ae:	4651      	mov	r1, sl
 80059b0:	ebb2 0801 	subs.w	r8, r2, r1
 80059b4:	4659      	mov	r1, fp
 80059b6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	462b      	mov	r3, r5
 80059dc:	eb49 0303 	adc.w	r3, r9, r3
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059ee:	4629      	mov	r1, r5
 80059f0:	024b      	lsls	r3, r1, #9
 80059f2:	4621      	mov	r1, r4
 80059f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059f8:	4621      	mov	r1, r4
 80059fa:	024a      	lsls	r2, r1, #9
 80059fc:	4610      	mov	r0, r2
 80059fe:	4619      	mov	r1, r3
 8005a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a02:	2200      	movs	r2, #0
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a0c:	f7fa fbe4 	bl	80001d8 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4613      	mov	r3, r2
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	e058      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	2200      	movs	r2, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	4611      	mov	r1, r2
 8005a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	f04f 0000 	mov.w	r0, #0
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a46:	0150      	lsls	r0, r2, #5
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a52:	4649      	mov	r1, r9
 8005a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a70:	eb63 050b 	sbc.w	r5, r3, fp
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	00eb      	lsls	r3, r5, #3
 8005a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a82:	00e2      	lsls	r2, r4, #3
 8005a84:	4614      	mov	r4, r2
 8005a86:	461d      	mov	r5, r3
 8005a88:	4643      	mov	r3, r8
 8005a8a:	18e3      	adds	r3, r4, r3
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	464b      	mov	r3, r9
 8005a90:	eb45 0303 	adc.w	r3, r5, r3
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	028b      	lsls	r3, r1, #10
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aac:	4621      	mov	r1, r4
 8005aae:	028a      	lsls	r2, r1, #10
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac0:	f7fa fb8a 	bl	80001d8 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ae6:	e002      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3750      	adds	r7, #80	; 0x50
 8005af4:	46bd      	mov	sp, r7
 8005af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	007a1200 	.word	0x007a1200

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	2000021c 	.word	0x2000021c

08005b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b24:	f7ff fff0 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0a9b      	lsrs	r3, r3, #10
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	080080c4 	.word	0x080080c4

08005b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b4c:	f7ff ffdc 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	0b5b      	lsrs	r3, r3, #13
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4903      	ldr	r1, [pc, #12]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	080080c4 	.word	0x080080c4

08005b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e04c      	b.n	8005c1c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d111      	bne.n	8005bb2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 ff40 	bl	8006a1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <HAL_TIM_Base_Init+0xb4>)
 8005ba8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fcf7 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	08001819 	.word	0x08001819

08005c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d001      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e044      	b.n	8005cca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <HAL_TIM_Base_Start_IT+0x6c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6a:	d013      	beq.n	8005c94 <HAL_TIM_Base_Start_IT+0x6c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <HAL_TIM_Base_Start_IT+0xb4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <HAL_TIM_Base_Start_IT+0x6c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_TIM_Base_Start_IT+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_TIM_Base_Start_IT+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d111      	bne.n	8005cb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d010      	beq.n	8005cc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb6:	e007      	b.n	8005cc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40014000 	.word	0x40014000

08005cec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e04c      	b.n	8005d98 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d111      	bne.n	8005d2e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fe82 	bl	8006a1c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <HAL_TIM_OC_Init+0xb4>)
 8005d24:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fc39 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	08005da5 	.word	0x08005da5

08005da4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04c      	b.n	8005e66 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d111      	bne.n	8005dfc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fe1b 	bl	8006a1c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_TIM_OnePulse_Init+0xb8>)
 8005df2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f000 fbd2 	bl	80065b8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0208 	bic.w	r2, r2, #8
 8005e22:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	08005e75 	.word	0x08005e75

08005e74 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005eb0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d108      	bne.n	8005eca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d105      	bne.n	8005eca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ebe:	7b7b      	ldrb	r3, [r7, #13]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec4:	7b3b      	ldrb	r3, [r7, #12]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d001      	beq.n	8005ece <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e03b      	b.n	8005f46 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0202 	orr.w	r2, r2, #2
 8005efc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0204 	orr.w	r2, r2, #4
 8005f0c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fd5a 	bl	80069d0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	2104      	movs	r1, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fd53 	bl	80069d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000

08005f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d128      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d121      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0202 	mvn.w	r2, #2
 8005f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	e009      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d128      	bne.n	800601c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d121      	bne.n	800601c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0204 	mvn.w	r2, #4
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	e009      	b.n	8006016 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b08      	cmp	r3, #8
 8006028:	d128      	bne.n	800607c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b08      	cmp	r3, #8
 8006036:	d121      	bne.n	800607c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0208 	mvn.w	r2, #8
 8006040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2204      	movs	r2, #4
 8006046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
 8006060:	e009      	b.n	8006076 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b10      	cmp	r3, #16
 8006088:	d128      	bne.n	80060dc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d121      	bne.n	80060dc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0210 	mvn.w	r2, #16
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2208      	movs	r2, #8
 80060a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
 80060c0:	e009      	b.n	80060d6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d110      	bne.n	800610c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d109      	bne.n	800610c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0201 	mvn.w	r2, #1
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d110      	bne.n	800613c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d109      	bne.n	800613c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d110      	bne.n	800616c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d109      	bne.n	800616c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d110      	bne.n	800619c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b20      	cmp	r3, #32
 8006186:	d109      	bne.n	800619c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0220 	mvn.w	r2, #32
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e048      	b.n	8006254 <HAL_TIM_OC_ConfigChannel+0xb0>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d839      	bhi.n	8006244 <HAL_TIM_OC_ConfigChannel+0xa0>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	0800620d 	.word	0x0800620d
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006237 	.word	0x08006237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa50 	bl	80066b8 <TIM_OC1_SetConfig>
      break;
 8006218:	e017      	b.n	800624a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 faaf 	bl	8006784 <TIM_OC2_SetConfig>
      break;
 8006226:	e010      	b.n	800624a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fb14 	bl	800685c <TIM_OC3_SetConfig>
      break;
 8006234:	e009      	b.n	800624a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fb77 	bl	8006930 <TIM_OC4_SetConfig>
      break;
 8006242:	e002      	b.n	800624a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	460b      	mov	r3, r1
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e135      	b.n	80065ac <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_TIM_RegisterCallback+0x2a>
 800634a:	2302      	movs	r3, #2
 800634c:	e12e      	b.n	80065ac <HAL_TIM_RegisterCallback+0x288>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	f040 80ba 	bne.w	80064d8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	2b1a      	cmp	r3, #26
 8006368:	f200 80b3 	bhi.w	80064d2 <HAL_TIM_RegisterCallback+0x1ae>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_TIM_RegisterCallback+0x50>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080063e9 	.word	0x080063e9
 800637c:	080063f1 	.word	0x080063f1
 8006380:	080063f9 	.word	0x080063f9
 8006384:	08006401 	.word	0x08006401
 8006388:	08006409 	.word	0x08006409
 800638c:	08006411 	.word	0x08006411
 8006390:	08006419 	.word	0x08006419
 8006394:	08006421 	.word	0x08006421
 8006398:	08006429 	.word	0x08006429
 800639c:	08006431 	.word	0x08006431
 80063a0:	08006439 	.word	0x08006439
 80063a4:	08006441 	.word	0x08006441
 80063a8:	08006449 	.word	0x08006449
 80063ac:	08006451 	.word	0x08006451
 80063b0:	0800645b 	.word	0x0800645b
 80063b4:	08006465 	.word	0x08006465
 80063b8:	0800646f 	.word	0x0800646f
 80063bc:	08006479 	.word	0x08006479
 80063c0:	08006483 	.word	0x08006483
 80063c4:	0800648d 	.word	0x0800648d
 80063c8:	08006497 	.word	0x08006497
 80063cc:	080064a1 	.word	0x080064a1
 80063d0:	080064ab 	.word	0x080064ab
 80063d4:	080064b5 	.word	0x080064b5
 80063d8:	080064bf 	.word	0x080064bf
 80063dc:	080064c9 	.word	0x080064c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80063e6:	e0dc      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80063ee:	e0d8      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80063f6:	e0d4      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80063fe:	e0d0      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006406:	e0cc      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800640e:	e0c8      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006416:	e0c4      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800641e:	e0c0      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006426:	e0bc      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800642e:	e0b8      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006436:	e0b4      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800643e:	e0b0      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006446:	e0ac      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800644e:	e0a8      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006458:	e0a3      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006462:	e09e      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800646c:	e099      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006476:	e094      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006480:	e08f      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800648a:	e08a      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006494:	e085      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800649e:	e080      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80064a8:	e07b      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80064b2:	e076      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80064bc:	e071      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80064c6:	e06c      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80064d0:	e067      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
        break;
 80064d6:	e064      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d15c      	bne.n	800659e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	2b0d      	cmp	r3, #13
 80064e8:	d856      	bhi.n	8006598 <HAL_TIM_RegisterCallback+0x274>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_TIM_RegisterCallback+0x1cc>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006529 	.word	0x08006529
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006539 	.word	0x08006539
 80064fc:	08006541 	.word	0x08006541
 8006500:	08006549 	.word	0x08006549
 8006504:	08006551 	.word	0x08006551
 8006508:	08006559 	.word	0x08006559
 800650c:	08006561 	.word	0x08006561
 8006510:	08006569 	.word	0x08006569
 8006514:	08006571 	.word	0x08006571
 8006518:	08006579 	.word	0x08006579
 800651c:	08006581 	.word	0x08006581
 8006520:	08006589 	.word	0x08006589
 8006524:	08006591 	.word	0x08006591
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800652e:	e038      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006536:	e034      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800653e:	e030      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006546:	e02c      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800654e:	e028      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006556:	e024      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800655e:	e020      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006566:	e01c      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800656e:	e018      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006576:	e014      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800657e:	e010      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006586:	e00c      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800658e:	e008      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006596:	e004      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
        break;
 800659c:	e001      	b.n	80065a2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a34      	ldr	r2, [pc, #208]	; (800669c <TIM_Base_SetConfig+0xe4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <TIM_Base_SetConfig+0xe8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a30      	ldr	r2, [pc, #192]	; (80066a4 <TIM_Base_SetConfig+0xec>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2f      	ldr	r2, [pc, #188]	; (80066a8 <TIM_Base_SetConfig+0xf0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d108      	bne.n	8006602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a25      	ldr	r2, [pc, #148]	; (800669c <TIM_Base_SetConfig+0xe4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01b      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006610:	d017      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <TIM_Base_SetConfig+0xe8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <TIM_Base_SetConfig+0xec>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <TIM_Base_SetConfig+0xf0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <TIM_Base_SetConfig+0xf4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1e      	ldr	r2, [pc, #120]	; (80066b0 <TIM_Base_SetConfig+0xf8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <TIM_Base_SetConfig+0xfc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a08      	ldr	r2, [pc, #32]	; (800669c <TIM_Base_SetConfig+0xe4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d103      	bne.n	8006688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	615a      	str	r2, [r3, #20]
}
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800

080066b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f023 0302 	bic.w	r3, r3, #2
 8006700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <TIM_OC1_SetConfig+0xc8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10c      	bne.n	800672e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0308 	bic.w	r3, r3, #8
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <TIM_OC1_SetConfig+0xc8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000

08006784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0210 	bic.w	r2, r3, #16
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0320 	bic.w	r3, r3, #32
 80067ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <TIM_OC2_SetConfig+0xd4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10d      	bne.n	8006800 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <TIM_OC2_SetConfig+0xd4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d113      	bne.n	8006830 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000

0800685c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <TIM_OC3_SetConfig+0xd0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10d      	bne.n	80068d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a14      	ldr	r2, [pc, #80]	; (800692c <TIM_OC3_SetConfig+0xd0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40010000 	.word	0x40010000

08006930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <TIM_OC4_SetConfig+0x9c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d109      	bne.n	80069a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000

080069d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2201      	movs	r2, #1
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1a      	ldr	r2, [r3, #32]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <TIM_ResetCallback+0x7c>)
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <TIM_ResetCallback+0x80>)
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1a      	ldr	r2, [pc, #104]	; (8006aa0 <TIM_ResetCallback+0x84>)
 8006a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <TIM_ResetCallback+0x88>)
 8006a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_ResetCallback+0x8c>)
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_ResetCallback+0x90>)
 8006a50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_ResetCallback+0x94>)
 8006a58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_ResetCallback+0x98>)
 8006a60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_ResetCallback+0x9c>)
 8006a68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a13      	ldr	r2, [pc, #76]	; (8006abc <TIM_ResetCallback+0xa0>)
 8006a70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <TIM_ResetCallback+0xa4>)
 8006a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <TIM_ResetCallback+0xa8>)
 8006a80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a10      	ldr	r2, [pc, #64]	; (8006ac8 <TIM_ResetCallback+0xac>)
 8006a88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	0800625d 	.word	0x0800625d
 8006a9c:	08006271 	.word	0x08006271
 8006aa0:	080062e9 	.word	0x080062e9
 8006aa4:	080062fd 	.word	0x080062fd
 8006aa8:	08006299 	.word	0x08006299
 8006aac:	080062ad 	.word	0x080062ad
 8006ab0:	08006285 	.word	0x08006285
 8006ab4:	080062c1 	.word	0x080062c1
 8006ab8:	080062d5 	.word	0x080062d5
 8006abc:	08006311 	.word	0x08006311
 8006ac0:	08006acd 	.word	0x08006acd
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006af5 	.word	0x08006af5

08006acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e04a      	b.n	8006bb0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d111      	bne.n	8006b4a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fd22 	bl	8007578 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <HAL_UART_Init+0xb0>)
 8006b40:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2224      	movs	r2, #36	; 0x24
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 ffec 	bl	8007b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695a      	ldr	r2, [r3, #20]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08001915 	.word	0x08001915

08006bbc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d107      	bne.n	8006be4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e08c      	b.n	8006cfe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_RegisterCallback+0x36>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e085      	b.n	8006cfe <HAL_UART_RegisterCallback+0x142>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d151      	bne.n	8006caa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b0c      	cmp	r3, #12
 8006c0a:	d845      	bhi.n	8006c98 <HAL_UART_RegisterCallback+0xdc>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <HAL_UART_RegisterCallback+0x58>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c51 	.word	0x08006c51
 8006c1c:	08006c59 	.word	0x08006c59
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c69 	.word	0x08006c69
 8006c28:	08006c71 	.word	0x08006c71
 8006c2c:	08006c79 	.word	0x08006c79
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006c89 	.word	0x08006c89
 8006c44:	08006c91 	.word	0x08006c91
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006c4e:	e051      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006c56:	e04d      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006c5e:	e049      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006c66:	e045      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006c6e:	e041      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006c76:	e03d      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006c7e:	e039      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006c86:	e035      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c8e:	e031      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c96:	e02d      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	f043 0220 	orr.w	r2, r3, #32
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ca8:	e024      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d116      	bne.n	8006ce4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	2b0b      	cmp	r3, #11
 8006cba:	d002      	beq.n	8006cc2 <HAL_UART_RegisterCallback+0x106>
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d004      	beq.n	8006cca <HAL_UART_RegisterCallback+0x10e>
 8006cc0:	e007      	b.n	8006cd2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006cc8:	e014      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006cd0:	e010      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8006ce2:	e007      	b.n	8006cf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d11d      	bne.n	8006d62 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <HAL_UART_Receive_IT+0x26>
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e016      	b.n	8006d64 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Receive_IT+0x38>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e00f      	b.n	8006d64 <HAL_UART_Receive_IT+0x58>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fced 	bl	8007738 <UART_Start_Receive_IT>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	e000      	b.n	8006d64 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	; 0x30
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d165      	bne.n	8006e52 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_UART_Transmit_DMA+0x26>
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e05e      	b.n	8006e54 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_UART_Transmit_DMA+0x38>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e057      	b.n	8006e54 <HAL_UART_Transmit_DMA+0xe8>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	88fa      	ldrh	r2, [r7, #6]
 8006dbc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2221      	movs	r2, #33	; 0x21
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	4a22      	ldr	r2, [pc, #136]	; (8006e5c <HAL_UART_Transmit_DMA+0xf0>)
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd8:	4a21      	ldr	r2, [pc, #132]	; (8006e60 <HAL_UART_Transmit_DMA+0xf4>)
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <HAL_UART_Transmit_DMA+0xf8>)
 8006de2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	2200      	movs	r2, #0
 8006dea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006dec:	f107 0308 	add.w	r3, r7, #8
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	461a      	mov	r2, r3
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	f7fb f8a0 	bl	8001f48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3314      	adds	r3, #20
 8006e20:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3314      	adds	r3, #20
 8006e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6a39      	ldr	r1, [r7, #32]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e000      	b.n	8006e54 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
  }
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3730      	adds	r7, #48	; 0x30
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	080075e9 	.word	0x080075e9
 8006e60:	08007685 	.word	0x08007685
 8006e64:	080076a3 	.word	0x080076a3

08006e68 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b09a      	sub	sp, #104	; 0x68
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	330c      	adds	r3, #12
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e86:	667b      	str	r3, [r7, #100]	; 0x64
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e90:	657a      	str	r2, [r7, #84]	; 0x54
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	663b      	str	r3, [r7, #96]	; 0x60
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ec4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e5      	bne.n	8006ea4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d119      	bne.n	8006f14 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e5      	bne.n	8006ee0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d136      	bne.n	8006f90 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f42:	61ba      	str	r2, [r7, #24]
 8006f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d018      	beq.n	8006f90 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	2200      	movs	r2, #0
 8006f64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fb f844 	bl	8001ff8 <HAL_DMA_Abort>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fb fa66 	bl	800244c <HAL_DMA_GetError>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d104      	bne.n	8006f90 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e00a      	b.n	8006fa6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3768      	adds	r7, #104	; 0x68
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b0ba      	sub	sp, #232	; 0xe8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10f      	bne.n	8007016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <HAL_UART_IRQHandler+0x66>
 8007002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fcd9 	bl	80079c6 <UART_Receive_IT>
      return;
 8007014:	e25b      	b.n	80074ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80e1 	beq.w	80071e2 <HAL_UART_IRQHandler+0x232>
 8007020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800702c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007030:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80d4 	beq.w	80071e2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_UART_IRQHandler+0xae>
 8007046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f043 0201 	orr.w	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800705e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <HAL_UART_IRQHandler+0xd2>
 800706a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f043 0202 	orr.w	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00b      	beq.n	80070a6 <HAL_UART_IRQHandler+0xf6>
 800708e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f043 0204 	orr.w	r2, r3, #4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d011      	beq.n	80070d6 <HAL_UART_IRQHandler+0x126>
 80070b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f043 0208 	orr.w	r2, r3, #8
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 81f2 	beq.w	80074c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_UART_IRQHandler+0x14e>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc64 	bl	80079c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <HAL_UART_IRQHandler+0x17a>
 8007122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d051      	beq.n	80071ce <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb6a 	bl	8007804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d142      	bne.n	80071c4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3314      	adds	r3, #20
 8007144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3314      	adds	r3, #20
 8007166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800716a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800716e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1d9      	bne.n	800713e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	2b00      	cmp	r3, #0
 8007190:	d013      	beq.n	80071ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	4a7f      	ldr	r2, [pc, #508]	; (8007394 <HAL_UART_IRQHandler+0x3e4>)
 8007198:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fa ff9a 	bl	80020d8 <HAL_DMA_Abort_IT>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d019      	beq.n	80071de <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b8:	e011      	b.n	80071de <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c2:	e00c      	b.n	80071de <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	e007      	b.n	80071de <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071dc:	e172      	b.n	80074c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071de:	bf00      	nop
    return;
 80071e0:	e170      	b.n	80074c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	f040 814c 	bne.w	8007484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8145 	beq.w	8007484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 813e 	beq.w	8007484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007208:	2300      	movs	r3, #0
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	f040 80b5 	bne.w	8007398 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800723a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8142 	beq.w	80074c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800724c:	429a      	cmp	r2, r3
 800724e:	f080 813b 	bcs.w	80074c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007258:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	f000 8088 	beq.w	8007378 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800727e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007294:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1d9      	bne.n	8007268 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072c6:	f023 0301 	bic.w	r3, r3, #1
 80072ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3314      	adds	r3, #20
 80072d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e1      	bne.n	80072b4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3314      	adds	r3, #20
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007314:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007316:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800731a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e3      	bne.n	80072f0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800735a:	65ba      	str	r2, [r7, #88]	; 0x58
 800735c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e3      	bne.n	8007336 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	4618      	mov	r0, r3
 8007374:	f7fa fe40 	bl	8001ff8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007384:	b292      	uxth	r2, r2
 8007386:	1a8a      	subs	r2, r1, r2
 8007388:	b292      	uxth	r2, r2
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007390:	e09a      	b.n	80074c8 <HAL_UART_IRQHandler+0x518>
 8007392:	bf00      	nop
 8007394:	080078cb 	.word	0x080078cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 808c 	beq.w	80074cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80073b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8087 	beq.w	80074cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	330c      	adds	r3, #12
 80073c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073e2:	647a      	str	r2, [r7, #68]	; 0x44
 80073e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e3      	bne.n	80073be <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	623b      	str	r3, [r7, #32]
   return(result);
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3314      	adds	r3, #20
 8007416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800741a:	633a      	str	r2, [r7, #48]	; 0x30
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e3      	bne.n	80073f6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	60fb      	str	r3, [r7, #12]
   return(result);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0310 	bic.w	r3, r3, #16
 8007452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007460:	61fa      	str	r2, [r7, #28]
 8007462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	69b9      	ldr	r1, [r7, #24]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	617b      	str	r3, [r7, #20]
   return(result);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e3      	bne.n	800743c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007478:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800747c:	4611      	mov	r1, r2
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007482:	e023      	b.n	80074cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <HAL_UART_IRQHandler+0x4f4>
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa29 	bl	80078f4 <UART_Transmit_IT>
    return;
 80074a2:	e014      	b.n	80074ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <HAL_UART_IRQHandler+0x51e>
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa69 	bl	8007994 <UART_EndTransmit_IT>
    return;
 80074c2:	e004      	b.n	80074ce <HAL_UART_IRQHandler+0x51e>
    return;
 80074c4:	bf00      	nop
 80074c6:	e002      	b.n	80074ce <HAL_UART_IRQHandler+0x51e>
      return;
 80074c8:	bf00      	nop
 80074ca:	e000      	b.n	80074ce <HAL_UART_IRQHandler+0x51e>
      return;
 80074cc:	bf00      	nop
  }
}
 80074ce:	37e8      	adds	r7, #232	; 0xe8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <UART_InitCallbacksToDefault+0x4c>)
 8007584:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a0f      	ldr	r2, [pc, #60]	; (80075c8 <UART_InitCallbacksToDefault+0x50>)
 800758a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a0f      	ldr	r2, [pc, #60]	; (80075cc <UART_InitCallbacksToDefault+0x54>)
 8007590:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <UART_InitCallbacksToDefault+0x58>)
 8007596:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a0e      	ldr	r2, [pc, #56]	; (80075d4 <UART_InitCallbacksToDefault+0x5c>)
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a0d      	ldr	r2, [pc, #52]	; (80075d8 <UART_InitCallbacksToDefault+0x60>)
 80075a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <UART_InitCallbacksToDefault+0x64>)
 80075a8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <UART_InitCallbacksToDefault+0x68>)
 80075ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a0c      	ldr	r2, [pc, #48]	; (80075e4 <UART_InitCallbacksToDefault+0x6c>)
 80075b4:	669a      	str	r2, [r3, #104]	; 0x68

}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	080074e9 	.word	0x080074e9
 80075c8:	080074d5 	.word	0x080074d5
 80075cc:	080074fd 	.word	0x080074fd
 80075d0:	080015fd 	.word	0x080015fd
 80075d4:	08007511 	.word	0x08007511
 80075d8:	08007525 	.word	0x08007525
 80075dc:	08007539 	.word	0x08007539
 80075e0:	0800754d 	.word	0x0800754d
 80075e4:	08007561 	.word	0x08007561

080075e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b090      	sub	sp, #64	; 0x40
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d137      	bne.n	8007674 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	2200      	movs	r2, #0
 8007608:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3314      	adds	r3, #20
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	623b      	str	r3, [r7, #32]
   return(result);
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762a:	633a      	str	r2, [r7, #48]	; 0x30
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	60fb      	str	r3, [r7, #12]
   return(result);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800765e:	61fa      	str	r2, [r7, #28]
 8007660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	69b9      	ldr	r1, [r7, #24]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	617b      	str	r3, [r7, #20]
   return(result);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007672:	e003      	b.n	800767c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800767a:	4798      	blx	r3
}
 800767c:	bf00      	nop
 800767e:	3740      	adds	r7, #64	; 0x40
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b21      	cmp	r3, #33	; 0x21
 80076d4:	d108      	bne.n	80076e8 <UART_DMAError+0x46>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076e2:	68b8      	ldr	r0, [r7, #8]
 80076e4:	f000 f866 	bl	80077b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b22      	cmp	r3, #34	; 0x22
 8007708:	d108      	bne.n	800771c <UART_DMAError+0x7a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007716:	68b8      	ldr	r0, [r7, #8]
 8007718:	f000 f874 	bl	8007804 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	f043 0210 	orr.w	r2, r3, #16
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	68b8      	ldr	r0, [r7, #8]
 800772e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2222      	movs	r2, #34	; 0x22
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007784:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0201 	orr.w	r2, r2, #1
 8007794:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0220 	orr.w	r2, r2, #32
 80077a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b089      	sub	sp, #36	; 0x24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	61ba      	str	r2, [r7, #24]
 80077de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6979      	ldr	r1, [r7, #20]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	613b      	str	r3, [r7, #16]
   return(result);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80077f8:	bf00      	nop
 80077fa:	3724      	adds	r7, #36	; 0x24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b095      	sub	sp, #84	; 0x54
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800782c:	643a      	str	r2, [r7, #64]	; 0x40
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	d119      	bne.n	80078b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	60bb      	str	r3, [r7, #8]
   return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789c:	61ba      	str	r2, [r7, #24]
 800789e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078be:	bf00      	nop
 80078c0:	3754      	adds	r7, #84	; 0x54
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b21      	cmp	r3, #33	; 0x21
 8007906:	d13e      	bne.n	8007986 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007910:	d114      	bne.n	800793c <UART_Transmit_IT+0x48>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d110      	bne.n	800793c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]
 800793a:	e008      	b.n	800794e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6211      	str	r1, [r2, #32]
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29b      	uxth	r3, r3
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	4619      	mov	r1, r3
 800795c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007970:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007980:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	e000      	b.n	8007988 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007986:	2302      	movs	r3, #2
  }
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b08c      	sub	sp, #48	; 0x30
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b22      	cmp	r3, #34	; 0x22
 80079d8:	f040 80ad 	bne.w	8007b36 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e4:	d117      	bne.n	8007a16 <UART_Receive_IT+0x50>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d113      	bne.n	8007a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	1c9a      	adds	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	629a      	str	r2, [r3, #40]	; 0x28
 8007a14:	e026      	b.n	8007a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a28:	d007      	beq.n	8007a3a <UART_Receive_IT+0x74>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <UART_Receive_IT+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e008      	b.n	8007a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d15c      	bne.n	8007b32 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0220 	bic.w	r2, r2, #32
 8007a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d136      	bne.n	8007b26 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 0310 	bic.w	r3, r3, #16
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	623a      	str	r2, [r7, #32]
 8007ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d10a      	bne.n	8007b16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007b1e:	4611      	mov	r1, r2
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
 8007b24:	e003      	b.n	8007b2e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e002      	b.n	8007b38 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e000      	b.n	8007b38 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007b36:	2302      	movs	r3, #2
  }
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b44:	b0c0      	sub	sp, #256	; 0x100
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	68d9      	ldr	r1, [r3, #12]
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	ea40 0301 	orr.w	r3, r0, r1
 8007b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b98:	f021 010c 	bic.w	r1, r1, #12
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bba:	6999      	ldr	r1, [r3, #24]
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	ea40 0301 	orr.w	r3, r0, r1
 8007bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b8f      	ldr	r3, [pc, #572]	; (8007e0c <UART_SetConfig+0x2cc>)
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d005      	beq.n	8007be0 <UART_SetConfig+0xa0>
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b8d      	ldr	r3, [pc, #564]	; (8007e10 <UART_SetConfig+0x2d0>)
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d104      	bne.n	8007bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd ffb2 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 8007be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007be8:	e003      	b.n	8007bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bea:	f7fd ff99 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8007bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfc:	f040 810c 	bne.w	8007e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	1891      	adds	r1, r2, r2
 8007c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c22:	4621      	mov	r1, r4
 8007c24:	eb12 0801 	adds.w	r8, r2, r1
 8007c28:	4629      	mov	r1, r5
 8007c2a:	eb43 0901 	adc.w	r9, r3, r1
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c42:	4690      	mov	r8, r2
 8007c44:	4699      	mov	r9, r3
 8007c46:	4623      	mov	r3, r4
 8007c48:	eb18 0303 	adds.w	r3, r8, r3
 8007c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c50:	462b      	mov	r3, r5
 8007c52:	eb49 0303 	adc.w	r3, r9, r3
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c6e:	460b      	mov	r3, r1
 8007c70:	18db      	adds	r3, r3, r3
 8007c72:	653b      	str	r3, [r7, #80]	; 0x50
 8007c74:	4613      	mov	r3, r2
 8007c76:	eb42 0303 	adc.w	r3, r2, r3
 8007c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c84:	f7f8 faa8 	bl	80001d8 <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4b61      	ldr	r3, [pc, #388]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	011c      	lsls	r4, r3, #4
 8007c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ca8:	4642      	mov	r2, r8
 8007caa:	464b      	mov	r3, r9
 8007cac:	1891      	adds	r1, r2, r2
 8007cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cb0:	415b      	adcs	r3, r3
 8007cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cb8:	4641      	mov	r1, r8
 8007cba:	eb12 0a01 	adds.w	sl, r2, r1
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd8:	4692      	mov	sl, r2
 8007cda:	469b      	mov	fp, r3
 8007cdc:	4643      	mov	r3, r8
 8007cde:	eb1a 0303 	adds.w	r3, sl, r3
 8007ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d04:	460b      	mov	r3, r1
 8007d06:	18db      	adds	r3, r3, r3
 8007d08:	643b      	str	r3, [r7, #64]	; 0x40
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	eb42 0303 	adc.w	r3, r2, r3
 8007d10:	647b      	str	r3, [r7, #68]	; 0x44
 8007d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d1a:	f7f8 fa5d 	bl	80001d8 <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007d26:	fba3 2301 	umull	r2, r3, r3, r1
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2264      	movs	r2, #100	; 0x64
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	1acb      	subs	r3, r1, r3
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d3a:	4b36      	ldr	r3, [pc, #216]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d48:	441c      	add	r4, r3
 8007d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	1891      	adds	r1, r2, r2
 8007d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d64:	415b      	adcs	r3, r3
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	1851      	adds	r1, r2, r1
 8007d70:	6339      	str	r1, [r7, #48]	; 0x30
 8007d72:	4649      	mov	r1, r9
 8007d74:	414b      	adcs	r3, r1
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d84:	4659      	mov	r1, fp
 8007d86:	00cb      	lsls	r3, r1, #3
 8007d88:	4651      	mov	r1, sl
 8007d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8e:	4651      	mov	r1, sl
 8007d90:	00ca      	lsls	r2, r1, #3
 8007d92:	4610      	mov	r0, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	4642      	mov	r2, r8
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007da0:	464b      	mov	r3, r9
 8007da2:	460a      	mov	r2, r1
 8007da4:	eb42 0303 	adc.w	r3, r2, r3
 8007da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	18db      	adds	r3, r3, r3
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	eb42 0303 	adc.w	r3, r2, r3
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dd6:	f7f8 f9ff 	bl	80001d8 <__aeabi_uldivmod>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007de0:	fba3 1302 	umull	r1, r3, r3, r2
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	2164      	movs	r1, #100	; 0x64
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	3332      	adds	r3, #50	; 0x32
 8007df2:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <UART_SetConfig+0x2d4>)
 8007df4:	fba2 2303 	umull	r2, r3, r2, r3
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f003 0207 	and.w	r2, r3, #7
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4422      	add	r2, r4
 8007e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e08:	e105      	b.n	8008016 <UART_SetConfig+0x4d6>
 8007e0a:	bf00      	nop
 8007e0c:	40011000 	.word	0x40011000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	1891      	adds	r1, r2, r2
 8007e30:	6239      	str	r1, [r7, #32]
 8007e32:	415b      	adcs	r3, r3
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
 8007e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	1854      	adds	r4, r2, r1
 8007e3e:	4649      	mov	r1, r9
 8007e40:	eb43 0501 	adc.w	r5, r3, r1
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	00eb      	lsls	r3, r5, #3
 8007e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e52:	00e2      	lsls	r2, r4, #3
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	4643      	mov	r3, r8
 8007e5a:	18e3      	adds	r3, r4, r3
 8007e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e60:	464b      	mov	r3, r9
 8007e62:	eb45 0303 	adc.w	r3, r5, r3
 8007e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e86:	4629      	mov	r1, r5
 8007e88:	008b      	lsls	r3, r1, #2
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e90:	4621      	mov	r1, r4
 8007e92:	008a      	lsls	r2, r1, #2
 8007e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e98:	f7f8 f99e 	bl	80001d8 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4b60      	ldr	r3, [pc, #384]	; (8008024 <UART_SetConfig+0x4e4>)
 8007ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	011c      	lsls	r4, r3, #4
 8007eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	1891      	adds	r1, r2, r2
 8007ec2:	61b9      	str	r1, [r7, #24]
 8007ec4:	415b      	adcs	r3, r3
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ecc:	4641      	mov	r1, r8
 8007ece:	1851      	adds	r1, r2, r1
 8007ed0:	6139      	str	r1, [r7, #16]
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	414b      	adcs	r3, r1
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	00cb      	lsls	r3, r1, #3
 8007ee8:	4651      	mov	r1, sl
 8007eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eee:	4651      	mov	r1, sl
 8007ef0:	00ca      	lsls	r2, r1, #3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f00:	464b      	mov	r3, r9
 8007f02:	460a      	mov	r2, r1
 8007f04:	eb42 0303 	adc.w	r3, r2, r3
 8007f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f24:	4649      	mov	r1, r9
 8007f26:	008b      	lsls	r3, r1, #2
 8007f28:	4641      	mov	r1, r8
 8007f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f2e:	4641      	mov	r1, r8
 8007f30:	008a      	lsls	r2, r1, #2
 8007f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f36:	f7f8 f94f 	bl	80001d8 <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <UART_SetConfig+0x4e4>)
 8007f40:	fba3 1302 	umull	r1, r3, r3, r2
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	2164      	movs	r1, #100	; 0x64
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	3332      	adds	r3, #50	; 0x32
 8007f52:	4a34      	ldr	r2, [pc, #208]	; (8008024 <UART_SetConfig+0x4e4>)
 8007f54:	fba2 2303 	umull	r2, r3, r2, r3
 8007f58:	095b      	lsrs	r3, r3, #5
 8007f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f5e:	441c      	add	r4, r3
 8007f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f64:	2200      	movs	r2, #0
 8007f66:	673b      	str	r3, [r7, #112]	; 0x70
 8007f68:	677a      	str	r2, [r7, #116]	; 0x74
 8007f6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f6e:	4642      	mov	r2, r8
 8007f70:	464b      	mov	r3, r9
 8007f72:	1891      	adds	r1, r2, r2
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	415b      	adcs	r3, r3
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f7e:	4641      	mov	r1, r8
 8007f80:	1851      	adds	r1, r2, r1
 8007f82:	6039      	str	r1, [r7, #0]
 8007f84:	4649      	mov	r1, r9
 8007f86:	414b      	adcs	r3, r1
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f96:	4659      	mov	r1, fp
 8007f98:	00cb      	lsls	r3, r1, #3
 8007f9a:	4651      	mov	r1, sl
 8007f9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	00ca      	lsls	r2, r1, #3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	4642      	mov	r2, r8
 8007fac:	189b      	adds	r3, r3, r2
 8007fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	eb42 0303 	adc.w	r3, r2, r3
 8007fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8007fc4:	667a      	str	r2, [r7, #100]	; 0x64
 8007fc6:	f04f 0200 	mov.w	r2, #0
 8007fca:	f04f 0300 	mov.w	r3, #0
 8007fce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	008b      	lsls	r3, r1, #2
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fdc:	4641      	mov	r1, r8
 8007fde:	008a      	lsls	r2, r1, #2
 8007fe0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fe4:	f7f8 f8f8 	bl	80001d8 <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <UART_SetConfig+0x4e4>)
 8007fee:	fba3 1302 	umull	r1, r3, r3, r2
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	2164      	movs	r1, #100	; 0x64
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	3332      	adds	r3, #50	; 0x32
 8008000:	4a08      	ldr	r2, [pc, #32]	; (8008024 <UART_SetConfig+0x4e4>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4422      	add	r2, r4
 8008014:	609a      	str	r2, [r3, #8]
}
 8008016:	bf00      	nop
 8008018:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800801c:	46bd      	mov	sp, r7
 800801e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008022:	bf00      	nop
 8008024:	51eb851f 	.word	0x51eb851f

08008028 <__libc_init_array>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4d0d      	ldr	r5, [pc, #52]	; (8008060 <__libc_init_array+0x38>)
 800802c:	4c0d      	ldr	r4, [pc, #52]	; (8008064 <__libc_init_array+0x3c>)
 800802e:	1b64      	subs	r4, r4, r5
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	2600      	movs	r6, #0
 8008034:	42a6      	cmp	r6, r4
 8008036:	d109      	bne.n	800804c <__libc_init_array+0x24>
 8008038:	4d0b      	ldr	r5, [pc, #44]	; (8008068 <__libc_init_array+0x40>)
 800803a:	4c0c      	ldr	r4, [pc, #48]	; (800806c <__libc_init_array+0x44>)
 800803c:	f000 f82e 	bl	800809c <_init>
 8008040:	1b64      	subs	r4, r4, r5
 8008042:	10a4      	asrs	r4, r4, #2
 8008044:	2600      	movs	r6, #0
 8008046:	42a6      	cmp	r6, r4
 8008048:	d105      	bne.n	8008056 <__libc_init_array+0x2e>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008050:	4798      	blx	r3
 8008052:	3601      	adds	r6, #1
 8008054:	e7ee      	b.n	8008034 <__libc_init_array+0xc>
 8008056:	f855 3b04 	ldr.w	r3, [r5], #4
 800805a:	4798      	blx	r3
 800805c:	3601      	adds	r6, #1
 800805e:	e7f2      	b.n	8008046 <__libc_init_array+0x1e>
 8008060:	080080dc 	.word	0x080080dc
 8008064:	080080dc 	.word	0x080080dc
 8008068:	080080dc 	.word	0x080080dc
 800806c:	080080e0 	.word	0x080080e0

08008070 <memcpy>:
 8008070:	440a      	add	r2, r1
 8008072:	4291      	cmp	r1, r2
 8008074:	f100 33ff 	add.w	r3, r0, #4294967295
 8008078:	d100      	bne.n	800807c <memcpy+0xc>
 800807a:	4770      	bx	lr
 800807c:	b510      	push	{r4, lr}
 800807e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008086:	4291      	cmp	r1, r2
 8008088:	d1f9      	bne.n	800807e <memcpy+0xe>
 800808a:	bd10      	pop	{r4, pc}

0800808c <memset>:
 800808c:	4402      	add	r2, r0
 800808e:	4603      	mov	r3, r0
 8008090:	4293      	cmp	r3, r2
 8008092:	d100      	bne.n	8008096 <memset+0xa>
 8008094:	4770      	bx	lr
 8008096:	f803 1b01 	strb.w	r1, [r3], #1
 800809a:	e7f9      	b.n	8008090 <memset+0x4>

0800809c <_init>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr

080080a8 <_fini>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	bf00      	nop
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr
